<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<xsd:schema targetNamespace="http://example.com"
  xmlns="http://www.w3.org/2001/XMLSchema" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ex="http://example.com"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://example.com"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  xsi:schemaLocation="http://www.ogf.org/dfdl/dfdl-1.0/ xsd/DFDL_part3_model.xsd 
  http://www.w3.org/2001/XMLSchema xsd/XMLSchema_for_DFDL.xsd">

  <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>

  <annotation>
    <documentation>
      The goal of this schema is to make one use of every XSD
      construct in the DFDL subset of XSD. Including the various ways they
      can be nested.

      This schema is nonsense. It doesn't describe a format, it is for a unit
      test
      that we can parse and create an AST from all the DFDL schema constructs.

      It is a one-schema test, that is, it does not exercise
      cross-namespace or cross-schema document capabilities nor does it
      test things like unusual namespace assignments (like using xsd for
      the dfdl annotation namespace, or using generally unusual
      prefixes).

      So it doesn't test "everything" about DFDL schema constructs, but it
      does contain every element type that is allowed and the variations
      on
      how they are nested.

      This test schema also attempts to utilize all the string-literal
      complexity of DFDL
      including numeric and named character entities, character class entities, and
      byte-valued entities,
      as well as XML's own character entities, and every kind of XML and DFDL
      syntax escaping
      including CDATA, %%, and {{ where an expression or string literal is allowed,
      etc.

      This test schema also tests some internationalization stuff by using
      Kanji and Cyrillic
      characters in format names, and in variable names, so they show up in NCNames,
      in QNames, and
      in variable references from expressions.

      There's some coverage in here of the DFDL expression language, which is a
      subset of XPath.

      (NOTE: THE EXPRESSIONS WILL LIKELY NOT TYPE CHECK. THIS NEEDS TO BE FIXED
      ONCE WE CAN TYPE CHECK THEM.
      AT WHICH POINT THE SCHEMA MAY HAVE TO BECOME MORE SENSIBLE.)


      There are also tons of negative examples that this obviously cannot cover.
      Examples include using DFDL entities in XSD string literals such
      as element names.

    </documentation>

    <!-- this stuff is to cut/paste into various string literals in the schema
      to be sure they properly handle i18n issues. 2003年08月27日, архив

      In case we want to try this, here's &#x1D540; that's a Unicode supplemental 
      character codepoint,
      'MATHEMATICAL DOUBLE-STRUCK CAPITAL I'. It is not representable in 
      16 bits.
      Uses 4-bytes in utf-8, and surrogate pairs in UTF-16.
      Problem is, not very many systems will even display it properly. (no 
      font support usually).
    -->

    <!-- top level dfdl annotations to create named, reusable definitions -->
    <appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:defineFormat name="def1">
        <dfdl:format representation="text" encoding="utf-8" alignmentUnits="bytes" alignment="implicit"
          ref="tns:def2年月日" />
      </dfdl:defineFormat>
      <!-- note use of Japanese Kanji in the name -->
      <dfdl:defineFormat name="def2年月日">
        <dfdl:format representation="binary"
          textStandardBase="10" escapeSchemeRef="tns:quotingScheme" sequenceKind="ordered"
          ref="ex:GeneralFormat" />
      </dfdl:defineFormat>
      <dfdl:defineEscapeScheme name="quotingScheme">
        <dfdl:escapeScheme escapeCharacter="%%"
          escapeBlockStart="&apos;" escapeBlockEnd="'" /> <!-- XML character entity &apos; -->
      </dfdl:defineEscapeScheme>
      <dfdl:defineVariable name="myVar1" type="xs:int"
        defaultValue="6" />
      <dfdl:defineVariable name="архив" type="xs:string"
        defaultValue="2003年08月27日" /> <!-- use of Russian, and Japanese Kanji in string literals -->
    </appinfo>

    <appinfo source="urn:not_DFDL_as_a_source">
      This is other appinfo. The requirement for
      DFDL is just that it not mind
      that this is here. It must be ignored.
    </appinfo>
  </annotation>

  <!-- Global Element Declaration with short, long, and property-form DFDL
    annotations. -->
  <element name="easy" dfdl:initiator="{ '[' }" dfdl:terminator="]">
    <annotation>
      <xsd:appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:element byteOrder="bigEndian">
          <dfdl:property name="encoding">UTF-8</dfdl:property>
        </dfdl:element>
      </xsd:appinfo>
    </annotation>
    <!-- immediate local complex type def -->
    <complexType>
      <annotation>
        <documentation>
          This is an example of documentation
        </documentation>
      </annotation>
      <sequence dfdl:separator=",">
        <annotation>
          <xsd:appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:sequence initiatedContent="no" />
          </xsd:appinfo>
        </annotation>
        <element name="a" minOccurs="1" maxOccurs="2" type="xsd:int"
          dfdl:lengthKind="delimited" dfdl:initiator="#"
          dfdl:occursCountKind="expression" dfdl:occursCount="{ 2 }">
          <annotation>
            <xsd:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:element>
                <dfdl:property name="encoding">UTF-8</dfdl:property>
                <dfdl:property name="initiator"><![CDATA[<$!&>]]></dfdl:property>
              </dfdl:element>
            </xsd:appinfo>
          </annotation>
        </element>
        <element ref="ex:obscure"/>
      </sequence>
    </complexType>
  </element>

  <!-- element with type by reference -->
  <element name="obscure" type="ex:rootType" dfdl:initiator="*" />

  <!-- global complex type def -->
  <complexType name="rootType">
    <!-- group reference -->
    <group ref="ex:gr" dfdl:separator='{ dfdl:property("initiator", "..") }'>
      <annotation>
        <appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:group ignoreCase="yes" />
        </appinfo>
      </annotation>
    </group>
  </complexType>

  <!-- global group def -->
  <group name="gr">
    <sequence dfdl:initiator="{{" dfdl:terminator="}"> <!-- {{ begins with { but is self escaping -->
      <annotation>
        <appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:sequence separatorPosition="infix" />
        </appinfo>
      </annotation>
      <!-- element reference with multiple occurrances -->
      <element ref="ex:a" minOccurs="1" maxOccurs="2">
        <annotation>
          <appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:element />
          </appinfo>
        </annotation>
      </element>
      <!-- hidden group reference -->
      <sequence dfdl:hiddenGroupRef="tns:hiddenGroup" />
    </sequence>
  </group>

  <!-- a second top-level schema annotation. This one sets the default format -->
  <annotation>
    <appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:format ref="tns:def1" occursCountKind="implicit" sequenceKind="ordered"/>
    </appinfo>
  </annotation>

  <group name="hiddenGroup">
    <choice dfdl:choiceLengthKind="implicit">
      <annotation>
        <appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:choice alignment="implicit" />
        </appinfo>
      </annotation>
      <element name="c1" type="xsd:int">
        <annotation>
          <appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:discriminator><![CDATA[{ $myVar1 eq (+47 mod 4) }]]></dfdl:discriminator>
          </appinfo>
        </annotation>
      </element>
      <element name="c2" type="xsd:string">
        <annotation>
          <appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:assert
              test="{ $myVar1 eq xs:int(xs:string(fn:round-half-to-even(8.5))) }" />
          </appinfo>
        </annotation>
      </element>

      <!-- immediate simple type definition -->
      <element name="c3">
        <simpleType>
          <restriction base="tns:aType">
            <maxInclusive value="3" />
          </restriction>
        </simpleType>
      </element>
      
      <group ref="ex:myGlobal3"/>
      <group ref="ex:myGlobal2"/>
      <group ref="ex:myGlobal1"/>
    </choice>
  </group>

  <!-- global element declaration referenced from element ref -->
  <!-- all the various kinds of entities, both XML's syntax like &amp; &#99; 
    &#xABCD; as well as
    DFDL's additional syntax %#32; %#xABCD; %#rF3; the named entities, the 
    numeric character entities
    including, in particular, our ability to represent character code 0, 
    which is never allowed in XML documents -->
  <element name="a" type="ex:aType" nillable="true"
    dfdl:nilValue="%ES; %% %#0; %NUL;%ACK; foo%#rF2;%#rF7;bar %WSP*; %#2024;%#xAABB; &amp;&#2023;&#xCCDD; -1">
    <annotation>
      <appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:element nilKind="literalValue" />
       <!--  Gives a not yet implemented, so commented out.
       <dfdl:newVariableInstance ref="tns:myVar1"
          defaultValue="7" /> -->
          <dfdl:assert>{ fn:true() }</dfdl:assert>
      </appinfo>
    </annotation>
  </element>

  <!-- global simple type definition -->
  <simpleType name="aType">
    <xsd:annotation>
      <appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:simpleType alignmentUnits="bytes" />
        <dfdl:setVariable ref="tns:myVar1">{ 42 }</dfdl:setVariable>
        <dfdl:setVariable ref="tns:архив"
          value='{ "{{nazmataz42}$&amp;" }' />
        <dfdl:assert message="yadda yadda yadda" testKind='expression'>{
          $tns:myVar1 eq 56 or $tns:архив eq "foo%#r87;bar" }</dfdl:assert>
        <!-- russian cyrillic in a variable name, DFDL raw byte-value entity 
          in string literal. -->
      </appinfo>
    </xsd:annotation>
    <!-- base type reference -->
    <restriction base="ex:aaType" />
  </simpleType>

  <!-- global simple type definition (used as a base) -->
  <simpleType name="aaType">
    <xsd:annotation>
      <appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:simpleType byteOrder="bigEndian" />
      </appinfo>
    </xsd:annotation>
    <restriction base="xsd:int" />
  </simpleType>

  <!-- global simple type definition -->
  <simpleType name="aTypeError">
    <xsd:annotation>
      <appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:simpleType alignmentUnits="bytes" />
        <dfdl:setVariable ref="tns:myVar1">{ 42 }</dfdl:setVariable>
        <dfdl:setVariable ref="tns:архив"
          value='{ "{{nazmataz42}$&amp;" }' />
        <dfdl:assert message="yadda yadda yadda" testKind='expression'>{
          $tns:myVar1 eq 56 or $tns:архив eq "foo%#r87;bar" }</dfdl:assert>
        <!-- russian cyrillic in a variable name, DFDL raw byte-value entity 
          in string literal. -->
      </appinfo>
    </xsd:annotation>
    <!-- base type reference -->
    <restriction base="ex:aaTypeError" />
  </simpleType>

  <!-- global simple type definition (used as a base) -->
  <simpleType name="aaTypeError">
    <xsd:annotation>
      <appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:simpleType alignmentUnits="bits" />
      </appinfo>
    </xsd:annotation>
    <restriction base="xsd:int" />
  </simpleType>

  <!-- Global element declaration to test group references -->
  <element name="groupRefTest">
    <complexType>
      <group ref="ex:myGlobal1" dfdl:separator=","></group>
    </complexType>
  </element>

  <!-- Global element declaration to test group references -->
  <element name="groupRefTestOverlap">
    <complexType>
      <group ref="ex:myGlobal3" dfdl:separator=","></group>
    </complexType>
  </element>

  <!-- Global Group def to test group references -->
  <group name="myGlobal2">
    <sequence dfdl:separatorPosition="infix" dfdl:sequenceKind="ordered">
      <element name="grpRefElement1" type="xs:string"
        dfdl:length="8" dfdl:lengthKind="explicit"></element>
    </sequence>
  </group>
  <group name="myGlobal1">
    <sequence dfdl:sequenceKind="ordered">
      <group ref="ex:myGlobal2" dfdl:separator=";" dfdl:sequenceKind="ordered"></group>
    </sequence>
  </group>
  <group name="myGlobal3">
    <sequence dfdl:separatorPosition="infix" dfdl:separator=";" dfdl:sequenceKind="ordered">
      <element name="grpRefElement2" type="xs:string"
        dfdl:length="8" dfdl:lengthKind="explicit"></element>
    </sequence>
  </group>
</xsd:schema>
