<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite xmlns="http://example.com"
  xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ct="http://w3.ibm.com/xmlns/dfdl/ctInfoset"
  xmlns:ex="http://example.com"
  description="This test suite distinguishes whether decode of the binary stream of bytes
	  into characters is done using a SKIP semantics (not right) versus a FAIL and END semantics (correct).">

  <tdml:defineSchema name="v">

    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormatPortable" lengthKind="delimited"
      encoding="utf-8" lengthUnits='characters'/>

    <xs:element name="c">
      <xs:complexType>
        <xs:sequence>
          <xs:choice>
            <xs:element name="textDelimited" type="xsd:int"
              dfdl:terminator="," dfdl:encodingErrorPolicy='error'
              dfdl:textNumberPattern="#######" />
            <!-- If the comma is missing, then we'll scan into the subsequent 
              binary
              data. -->
            <!-- what happens will depend on whether there are decode errors 
              or
              the binary data just so happens to decode without error, and 
              whether a comma
              is part of this false decode, or we find a comma in subsequent 
              data. -->

            <!-- If the data is sufficiently broken, we'll end up on this 
              alternative -->
            <xs:element name="textLength4" type="xsd:int"
              dfdl:lengthKind="explicit" dfdl:length="{ 4 }"
              dfdl:textNumberPattern="####" />

          </xs:choice>
          <xs:element name="binary1" type="xsd:int"
            dfdl:representation="binary" dfdl:lengthKind="implicit" dfdl:lengthUnits="bits"/>
          <xs:element name="text2" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="d" type="xsd:string" dfdl:terminator="," dfdl:encodingErrorPolicy='error'/>

  </tdml:defineSchema>

  <tdml:parserTestCase name="t1" root="c" model="v"
    description="Ok that this fools the parser because binary data just happened to decode without error.">

    <tdml:document>
      <tdml:documentPart type="text">1234</tdml:documentPart>
      <!-- This next chunk of data looks like 222, that is, it will correctly 
        decode as more digits,
        with a comma at the end, eventhough this chunk of data is supposed 
        to be binary stuff. We're simulating
        a data error here where the preceding field is missing its terminating 
        comma, and the binary data
        just so happens to look enough like text to be succesfully decoded, 
        fooling the parser into thinking
        it found the delimiter it wanted. -->
      <tdml:documentPart type="byte">3232322C
      </tdml:documentPart><!-- as characters that's 222, -->
      <tdml:documentPart type="text"><![CDATA[1111foobar]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <c>
          <textDelimited>1234222</textDelimited>
          <binary1>825307441</binary1><!-- 0x31313131 -->
          <text2>foobar</text2>
        </c>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="t2" root="c" model="v"
    description="The parser should detect and recognize decode errors, and stop scanning.">

    <tdml:document>
      <tdml:documentPart type="text">1234</tdml:documentPart>
      <!-- This next binary field should decode with failure. If the failures 
        were skipped,
        then it would eventually find the 2c, which is a comma, at the end 
        of it.
        Correct behavior requires that it NOT find the 2c, but fail before 
        that. -->
      <tdml:documentPart type="byte">FFFFFF2C
      </tdml:documentPart><!-- binary -212 -->
      <tdml:documentPart type="text"><![CDATA[1111foobar]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <c>
          <textLength4>1234</textLength4>
          <binary1>-212</binary1>
          <text2>1111foobar</text2>
        </c>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="t3" root="c" model="v"
    description="The parser should detect and recognize decode errors, and stop scanning.">

    <tdml:document>
      <tdml:documentPart type="text">1234</tdml:documentPart>
      <!-- This next binary field should decode with failure. It begins with 
        C2FF, which is
        not valid utf-8 encoding. If this is skipped, it will find a 352c 
        which is "5," after that.
        This will result in the initial string being 12345, not 1234. -->
      <tdml:documentPart type="byte">C2FF352C
      </tdml:documentPart><!-- binary -1023462100 -->
      <tdml:documentPart type="text"><![CDATA[1111foobar]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <c>
          <textLength4>1234</textLength4>
          <binary1>-1023462100</binary1>
          <text2>1111foobar</text2>
        </c>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>


  <tdml:parserTestCase name="encodingErrorPolicy_error"
    root="d" model="v" description="encodingErrorPolicy of 'replace' should scan past.">

    <tdml:document>
      <tdml:documentPart type="text">abcd</tdml:documentPart>
      <!-- The point of this test is to understand character decoding, and 
        errors while decoding characters.

        If scanning replaces the errors with Unicode replacement chars
        then this test will scan past them and find the 2c 
        (comma) delimiter that it wants. <d> will have value abcd.. where
        the '.' represents the unicode replacement character (U+FFFD).

        The right behavior in this test is that scanning should error on these illegal
        FF bytes. This error will cause backtracking, and the parse will fail.  
  
        See http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/charset/CodingErrorAction.html -->
      <tdml:documentPart type="byte">FFFFFF2C
      </tdml:documentPart><!-- binary -212 -->
    </tdml:document>

    <tdml:errors>
      <tdml:error>Delimiter not found</tdml:error>
    </tdml:errors>

  </tdml:parserTestCase>

</tdml:testSuite>
