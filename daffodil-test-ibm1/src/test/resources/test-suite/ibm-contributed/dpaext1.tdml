<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite suiteName="dpaext" 
	description="Sample tests to post externally"
	xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
	defaultRoundTrip="true"
  defaultImplementations="ibm daffodil">


   <!-- 
The tests in this package represent a sampling of some of the basic functionality of a DFDL processor implementation.  
They are not any guarantee of compliance. There are two test files:

    dpaext1.tdml
    dpaext2.tdml     
     
These XML files each contain a number of tests. Each test specifies the data to parse, the expected resultant tdml:infoset, and a pointer 
to the DFDL schema. The following XML tags are used:

    tdml:parserTestCase - this tag represents one test. It has attributes: 
     
	name  - (must be unique within the full xml file)
	root - the root element of the DFDL schema from which to start processing
	model - the location of the DFDL schema to use
	description - a short summary of the purpose of the tests, including relevant DFDL spec section.
     
    Within the tdml:parserTestCase are the tdml:document and tdml:infoset tags.
     
	The tdml:document tag is the input tdml:document to be parsed.  In can be in readable text format, or within a documentpart with attribute of type=
	"byte" to provide the value in the hex equivalent form, as this is clearer in showing the input values for things such as binary numbers.
     
	The tdml:infoset tag encloses the expected output of the parser, with the tags of the corresponding elements that are parsed using the DFDL
	schema under test.  For string elements, the xsi:type is omitted; for other types it is explicitly provided
   
   
The tests are in order relative to the content of the DFDL specification.  Not all of sections of the specification are covered.  In some cases,
the sample schemas given in the specification are used (made into complete schemas as necessary).
    -->


    <!--  The first two tests pick up the samples in Section 1.2.1 of the DFDL specification.  They are here to show
the basic demonstration of DFDL with binary and text number formats  -->

	<!-- example from  Simple Example 1.2  -->
	<tdml:parserTestCase name="introduction_1_01"
	    root="root"
		model="dpaspc121_01.dfdl.xsd"
		description="Section 1.2 General number example,  What is DFDL - binary numbers">

		<tdml:document><tdml:documentPart type="byte">0000000500779e8c169a54dd0a1b4a3fce2946f6</tdml:documentPart></tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
			  <root>
			    <w xsi:type="xs:int">5</w>
			    <x xsi:type="xs:int">7839372</x>
			    <y xsi:type="xs:double">8.6E-200</y>
			    <z xsi:type="xs:float">-7.1E8</z>
			  </root>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<!--  Second example from  Simple Example 1.2 -->
	<tdml:parserTestCase name="introduction_1_02" root="root"
		model="dpaspc121_02.dfdl.xsd"
		description="Section 12 lengthKind-delimited - DFDL-12-043R">

		<tdml:document>5,7839372,8.6E-200,-7.1E8</tdml:document>

		<tdml:infoset>
	<tdml:dfdlInfoset>
				<root>
					<w xsi:type="xs:int">5</w>
					<x xsi:type="xs:int">7839372</x>
					<y xsi:type="xs:double">8.6E-200</y>
					<z xsi:type="xs:float">-7.1E8</z>
				</root>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>


    <!-- The next set of tests show a number of schema types that can be used, as per described in Section 5.  For these examples,
  an explicit length and a simple number pattern is used.   It is not comprehensive, and further tests are provided 
later for more variation in both length and patterns. -->

    <!-- There are no error tests provided here to demonstrate failure if a DFDL schema uses any of the reserved constructs noted
in Section 5.1 -->

    <!-- Facets, default and fixed, though covered in Section 5, are optional, and so no tests here for those. min/maxOccurs 
 will be covered with Section 16, arrays and optional elements. -->

	<tdml:parserTestCase name="schema_types_5_01" root="byte1"
		model="dpanum.dfdl.xsd" description="Section 5 Schema types - byte - DFDL-5-015R">

		<tdml:document>0123</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<byte1 xsi:type="xs:byte">123</byte1>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>


	<tdml:parserTestCase name="schema_types_5_02" root="short1"
		model="dpanum.dfdl.xsd" description="Section 5 Schema types - short - DFDL-5-014R">

		<tdml:document>-123</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<short1 xsi:type="xs:short">-123</short1>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>


	<tdml:parserTestCase name="schema_types_5_03" root="int1"
		model="dpanum.dfdl.xsd" description="Section 5 Schema types int - DFDL-5-013R">

		<tdml:document>-2147483648</tdml:document>
		<tdml:infoset>
<tdml:dfdlInfoset>
				<int1 xsi:type="xs:int">-2147483648</int1>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="schema_types_5_04" root="long1"
		model="dpanum.dfdl.xsd" description="Section 5 Schema types - long - DFDL-5-012R">

		<tdml:document>9223372036854775807</tdml:document>
		<tdml:infoset>
<tdml:dfdlInfoset>
				<long1 xsi:type="xs:long">9223372036854775807</long1>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>
	
	<tdml:parserTestCase name="schema_types_5_05" description="Section 5 Schema types - unsignedByte - DFDL-5-020R"
		model="dpanum.dfdl.xsd" root="unsignedByte1">
		<tdml:document>0001</tdml:document>
		<tdml:infoset>
<tdml:dfdlInfoset>
				<unsignedByte1 xsi:type="xs:unsignedByte">1</unsignedByte1>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>
	
    <!-- The next tests show examples of using DFDL entities in string literals, to easily represent
values that aren't normally representable in XML -->

	<tdml:parserTestCase name="syntax_entities_6_01"
		description="Section 6.3 DFDL Character Entities - single DFDLEntityName in initiator and terminator, single byte
entities SOH and ETX - DFDL-6-041R"
		model="syntax_entities_6.dfdl.xsd" root="element1">
		<tdml:document><tdml:documentPart type="byte">01616203</tdml:documentPart></tdml:document>
			<tdml:infoset>
		<tdml:dfdlInfoset>
				<element1>ab</element1>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="syntax_entities_6_02"
		description="Section 6.3 DFDL Character Entities - single DFDLEntityName in initiator and terminator - SP and LS, the later 
is multiple bytes in UTF-8 encoding that is used - DFDL-6-042R"
		model="syntax_entities_6.dfdl.xsd" root="element2">
		<tdml:document><tdml:documentPart type="byte">206162E280A8</tdml:documentPart></tdml:document>
		<tdml:infoset>
<tdml:dfdlInfoset>
				<element2>ab</element2>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>
	
	<tdml:parserTestCase name="syntax_entities_6_03"
		description="Section 6.3 DFDL Character Entities - single DFDLEntityName in initiator and terminator, shows use of a character class
entity NL and also use of UTF-16 encoding - DFDL-6-045R"
		model="syntax_entities_6.dfdl.xsd" root="Fixed_text_sequence">
		<tdml:document><tdml:documentPart type="byte">0A00610062000A00</tdml:documentPart></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
			  <Fixed_text_sequence>
			    <element1>a</element1>
			    <element2>b</element2>
			  </Fixed_text_sequence>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
	
		<tdml:parserTestCase name="syntax_entities_6_04"
		description="Section 6.3 DFDL Character Entities - use of raw byte in fillByte for alignment"
		model="syntax_entities_6.dfdl.xsd" root="Fixed_bin_num_sequence">
		<tdml:document><tdml:documentPart type="byte">707E7E7E70</tdml:documentPart></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
			  <Fixed_bin_num_sequence>
			    <binbyte xsi:type="xs:byte">112</binbyte>
			    <binbyte2 xsi:type="xs:byte">112</binbyte2>
			  </Fixed_bin_num_sequence>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
 
 
   <!-- The next tests cover some examples from the Syntax of Annotation Elements in Secion 7, showing attribute and element form,  the ability
   to have CDATA with element form, and the short form -->   

	<!--  example of dfdl component annotation in 7.1  page 37-->
	<tdml:parserTestCase name="property_syntax_7_01" root="root"
	description="Section 7.1.3.1 Representation Property Binding Syntax: Attribute Form - DFDL-7-021R"
		model="dpaspc7131.dfdl.xsd">

		<tdml:document><tdml:documentPart type="byte">61620a6263</tdml:documentPart></tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<root>
					<element1>ab</element1>
					<element2>bc</element2>
				</root>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<!--  element form in 7.1.3.2 -->
	<tdml:parserTestCase name="property_syntax_7_02" root="root"
	description="Section 7.1.3.2 Representation Property Binding Syntax: Element Form - DFDL-7-022R"
		model="dpaspc7132.dfdl.xsd">

		<tdml:document><tdml:documentPart type="byte">61620a6263</tdml:documentPart></tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<root>
					<element1>ab</element1>
					<element2>bc</element2>
				</root>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<!--  CDATA example  in 7.1.3.2-->
	<tdml:parserTestCase name="property_syntax_7_03" root="element1"
	description="Section 7.1.3.2 Representation Property Binding Syntax: CDATA Example - DFDL-7-022R"
		model="dpaspc7132_2.dfdl.xsd">

		<tdml:document><tdml:documentPart type="byte">3c212d2d6162</tdml:documentPart></tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<element1>ab</element1>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<!--
		first part of " example" in section 7.1.3.3 infix separator horizontal
		tab
	-->
	<tdml:parserTestCase name="property_syntax_7_04" root="foo"
	description="Section 7.1.3.3 Short Form Syntax"
		model="dpaspc7133_01.dfdl.xsd">

		<tdml:document><tdml:documentPart type="byte">310932</tdml:documentPart></tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<foo>
					<element1 xsi:type="xs:int">1</element1>
					<element2 xsi:type="xs:int">2</element2>

				</foo>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
	
	<!--  Section 8 covers property scoping. The tests include a simple unnamed format that is used for defaulting DFDL properties,
	combining properties from a named format Also shown is combining properties from references - both user defined type
	and element references. Finally, importing schema and how scoping applies to properties in the imported schema. -->
	
	<!-- scoping 8.1 -->
	<tdml:parserTestCase name="scoping_default_format_8_01" root="book"
		model="dpaspc81_01.dfdl.xsd"
		description="Section 8.1 scoping example - unnamed format">

		<tdml:document>abc123</tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<book>
					<title>abc</title>
					<pages xsi:type="xs:int">123</pages>
				</book>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<!-- scoping 8.2 -->
	<tdml:parserTestCase name="scoping_define_format_8_01" root="book"
		model="dpaspc82_01.dfdl.xsd"
		description="Section 8.1 scoping example - combining properties from named dfdl:defineFormat">

		<tdml:document>abc123</tdml:document>

		<tdml:infoset>
		<tdml:dfdlInfoset>
				<book>
					<title>abc</title>
					<pages xsi:type="xs:int">123</pages>
				</book>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>


	<!-- scoping 8.3 -->
	<tdml:parserTestCase name="scoping_define_format_8_02" root="groupElem"
		model="dpaspc83_01.dfdl.xsd"
		description="Section 8.3 scoping example - combining DFDL properties from references">

		<tdml:document><tdml:documentPart type="byte">0000001C6666666666666666666666660000002c</tdml:documentPart></tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
				<groupElem>

					<testElement1 xsi:type="xs:integer">1</testElement1>
					<testElement1 xsi:type="xs:integer">2</testElement1>
				</groupElem>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<!-- scoping 8.3 - second example -->
	<tdml:parserTestCase name="scoping_define_format_8_03" root="groupElem"
		model="dpaspc83_02.dfdl.xsd"
		description="Section 8.3 scoping example - combining DFDL properties from references, user defined type">

		<tdml:document><tdml:documentPart type="byte">0000001C6666666666666666666666660000002c</tdml:documentPart></tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<groupElem>

					<testElement1 xsi:type="xs:int">1</testElement1>
					<testElement1 xsi:type="xs:int">2</testElement1>
				</groupElem>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>


	<!-- scoping 8.3 - third example -->
	<tdml:parserTestCase name="scoping_define_format_8_04" root="groupElem"
		model="dpaspc83_03.dfdl.xsd"
		description="Section 8.3 scoping example - combining DFDL properties from references - element reference">

		<tdml:document><tdml:documentPart type="byte">0000000166666666666666666666666600000002</tdml:documentPart></tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<groupElem>

					<testElement1 xsi:type="xs:int">1</testElement1>
					<testElement1 xsi:type="xs:int">2</testElement1>
				</groupElem>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	
   
   <!-- scoping 8.3 - fourth example -->
	<tdml:parserTestCase name="scoping_define_format_8_05" root="book" 
		model="dpaspc_41_83_04_01.dfdl.xsd"
		description="Section 8.3 scoping example - combining DFDL properties from references - imported schema">

		<tdml:document>custname</tdml:document>

		<tdml:infoset>
	<tdml:dfdlInfoset>
				<book>

					<customer>custname</customer>

				</book>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
	
	<!-- Section 11 covers properties common to content and framing, so the following test will cover various encodings and byteOrder
	 -->
	 
	<tdml:parserTestCase name="encoding_11_01" root="tag1"
		model="dpaflsenc101_04_01.dfdl.xsd"
		description="Section 11 Properties common to content and framing  - UTF-32 and byteOrder little endian - DFDL-11-001R">

			<tdml:document><tdml:documentPart type="byte">4300000055000000</tdml:documentPart></tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
  <tag1>CU</tag1>
</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>
	
	<tdml:parserTestCase name="encoding_11_02" root="tag2"
		model="dpaflsenc101_04_01.dfdl.xsd"
		description="Section 11 Properties common to content and framing - UTF-32LE - DFDL-11-001R">

			<tdml:document><tdml:documentPart type="byte">4300000055000000</tdml:documentPart></tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
  <tag2>CU</tag2>
</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>
	
	<tdml:parserTestCase name="encoding_11_03" root="tag3"
		model="dpaflsenc101_04_01.dfdl.xsd"
		description="Section 11 Properties common to content and framing - UTF-32BE - DFDL-11-001R">

			<tdml:document><tdml:documentPart type="byte">0000004300000055</tdml:documentPart></tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
  <tag3>CU</tag3>
</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>
	
	<!--  Section 12 covers length properties and framing properties (alignment and markup such as initiators and terminators
	 
	 Alignment tests cover general alignment, leading and trailing skip bytes, and implicit alignment. 
	 
	 Delimiter tests here cover a simple initiator and terminator on a string field, use of ignoreCase property, and
	 use of a space separated list to indicate multiple values for the initiator may be in the data. Also, a DFDL enitity NL is used 
	 -->
	
	<tdml:parserTestCase name="alignment_bytes_12_01" root="Fixed_text_multi_sequence1"
		model="dpaflsaln101_01.dfdl.xsd"
		description="Section 12 Framing -  Alignment = 4">

			<tdml:document>AfffBB</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
  <Fixed_text_multi_sequence1>
    <Fixed_text_1>A</Fixed_text_1>
    <Fixed_text_2a>BB</Fixed_text_2a>
  </Fixed_text_multi_sequence1>
</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
	
	<tdml:parserTestCase name="alignment_bytes_12_02" root="Fixed_text_multi_sequence2"
		model="dpaflsaln101_01.dfdl.xsd"
		description="Section 12 Framing -  Alignment with leadingSkip">

			<tdml:document>AAAfffffBB</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
  <Fixed_text_multi_sequence2>
    <Fixed_text_3>AAA</Fixed_text_3>
    <Fixed_text_2a>BB</Fixed_text_2a>
  </Fixed_text_multi_sequence2>
</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>


<tdml:parserTestCase name="alignment_bytes_12_03" root="Fixed_text_multi_sequence3"
		model="dpaflsaln101_01.dfdl.xsd"
		description="Section 12 Framing - Alignment with trailingSkip"
        roundTrip="twoPass">

			<tdml:document>AAAeeeeeBB</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
  <Fixed_text_multi_sequence3>
    <Fixed_text_3>AAA</Fixed_text_3>
    <Fixed_text_2a>BB</Fixed_text_2a>
  </Fixed_text_multi_sequence3>
</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>


	<!--
		first element is boolean with trailing skip byte, second has implicit
		alignment
	-->
	<tdml:parserTestCase name="alignment_bytes_12_04" root="Fixed_bin_bol_sequence"
		model="alignment_bytes_12.dfdl.xsd"
		description="Section 12 Framing - Alignment with trailingSkip and implicit alignment">
		<tdml:document>
			<tdml:documentPart type="byte">000000017E7E7E7E00000001</tdml:documentPart>
		</tdml:document>
    <tdml:infoset>
		  <tdml:dfdlInfoset >
        <Fixed_bin_bol_sequence>
          <binbol xsi:type="xs:boolean">true</binbol>
          <binbol2 xsi:type="xs:boolean">true</binbol2>
        </Fixed_bin_bol_sequence>
      </tdml:dfdlInfoset>
    </tdml:infoset>
	</tdml:parserTestCase>

	<!--  datetime -->
	<tdml:parserTestCase name="alignment_bytes_12_05" root="Fixed_bin_cal_sequence"
		model="alignment_bytes_12.dfdl.xsd"
		description="Section 12 Framing - Implicit alignment with binary calendar type">


		<tdml:document>
			<tdml:documentPart type="byte">617e7e7e0000003C</tdml:documentPart>
		</tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<Fixed_bin_cal_sequence>
					<mystr>a</mystr>
					<bincal2 xsi:type="xs:dateTime"><![CDATA[1970-01-01T00:01:00+00:00]]></bincal2>
				</Fixed_bin_cal_sequence>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
	
	
	
  <tdml:parserTestCase name="alignment_bytes_12_06" root="Fixed_bin_flt_sequence"
		model="alignment_bytes_12.dfdl.xsd"
		description="Section 12 Framing - Implicit alignment binary float">


		<tdml:document>
			<tdml:documentPart type="byte">67676767A6901D7D67676767449A4000676767673E4CCCCD</tdml:documentPart>
		</tdml:document>

		<tdml:infoset>
<tdml:dfdlInfoset>
				<Fixed_bin_flt_sequence>
					<myFloat1 xsi:type="xs:float">-1.0E-15</myFloat1>
					<myFloat2 xsi:type="xs:float">1234.0</myFloat2>
					<myFloat3 xsi:type="xs:float">0.2</myFloat3>
					
				</Fixed_bin_flt_sequence>
			</tdml:dfdlInfoset>
		</tdml:infoset>



	</tdml:parserTestCase>
	
    <tdml:parserTestCase name="delimiter_12_01" root="Fixed_string_with_Pads_10_1"
		model="delimiter_12.dfdl.xsd" description="Section 12.2 Properties for specifying delimiters - Simple initiator and terminator - DFDL-12-032R">

		<tdml:document>iAAAAAAAAAAt</tdml:document>
		<tdml:infoset>
<tdml:dfdlInfoset>
				<Fixed_string_with_Pads_10_1 >AAAAAAAAAA</Fixed_string_with_Pads_10_1>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>
    
     <tdml:parserTestCase name="delimiter_12_02" root="Fixed_string_with_Pads_10_1"
        roundTrip="twoPass"
		model="delimiter_12.dfdl.xsd" description="Section 12.2 simple initiator and terminator - ignore case">

		<tdml:document>IAAAAAAAAAAT</tdml:document>
		<tdml:infoset>
		<tdml:dfdlInfoset>
				<Fixed_string_with_Pads_10_1>AAAAAAAAAA</Fixed_string_with_Pads_10_1>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>

    <tdml:parserTestCase name="delimiter_12_03" root="Fixed_string_with_Pads_10_2"
		model="delimiter_12.dfdl.xsd" description="Section 12.2 simple initiator and terminator - space separated list - DFDL-12-032R"
		roundTrip="twoPass">

		<tdml:document>:AAAAAAAAAAterminator</tdml:document>
		<tdml:infoset>
		<tdml:dfdlInfoset>
				<Fixed_string_with_Pads_10_2 >AAAAAAAAAA</Fixed_string_with_Pads_10_2>
			</tdml:dfdlInfoset>

		</tdml:infoset>
	</tdml:parserTestCase>
	
	<tdml:parserTestCase name="delimiter_12_04" root="Fixed_text_sequence"
		model="delimiter_12.dfdl.xsd" description="Section 12.2 simple initiator and terminator - NL entity - DFDL-12-032R"
		roundTrip="twoPass">
		<tdml:document><tdml:documentPart type="byte">0A61620A</tdml:documentPart></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
			  <Fixed_text_sequence>
			    <element1>a</element1>
			    <element2>b</element2>
			  </Fixed_text_sequence>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
	
		
	<!--  Demonstrate the use of lengthUnits=bytes vs lengthUnits=characters when  multibyte character sets are used for explicit lengths -->
	
	<!--  section 12.3 properties for specifying length  -->
	<tdml:parserTestCase name="length_explicit_12_01" root="multibytes_1"
		model="length_explicit_12.dfdl.xsd" description="Section 12.3 Properties for specifying length - utf-8 multibyte characters, lengthKind='explicit', lengthUnits='bytes' - DFDL-12-038R">
		<tdml:document><tdml:documentPart type="byte">e282ace282ac</tdml:documentPart></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
			  <multibytes_1>&#8364;&#8364;</multibytes_1>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
	
	<tdml:parserTestCase name="length_explicit_12_02" root="multibytes_2"
		model="length_explicit_12.dfdl.xsd" description="Section 12.3 Properties for specifying length - utf-8 multibyte characters, lengthKind='explicit', lengthUnits='characters'
		- DFDL-12-040R">
		<tdml:document><tdml:documentPart type="byte">e4ba9cc383e697a57e</tdml:documentPart></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
			  <multibytes_2>&#20124;&#195;&#26085;&#126;</multibytes_2>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>
	
	<!--  With lengthKind="delimited", tests show various ways to in indicate the end of an element's content - with terminator, with
	parent separator, with parent of specified length, with end of input. Delimited length can also be used with BCD fields, which
	is shown here.	 Also, an element of explicit length can be a component of a delimited sequence. -->
	
	<!--  A couple of valid logical types are shown with lengthKind="implicit" 	-->
	
<tdml:parserTestCase name="length_delimited_12_01"
 model="dpaextdeltxt101.dfdl.xsd" 
 description="Section 12.3 Properties for specifying length delimited - element terminator"
 root="myDate1">
 <tdml:document>2011-03-21@</tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <myDate1 xsi:type="xs:date">2011-03-21+00:00</myDate1>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase> 
	
	<!--  With lengthKind="delimited", tests show various ways to in indicate the end of an element's content - with terminator, with
	parent separator, with parent of specified length, with end of input. Delimited length can also be used with BCD fields, which
	is shown here.	 Also, an element of explicit length can be a component of a delimited sequence. -->
	
	<!--  A couple of valid logical types are shown with lengthKind="implicit" 	-->
	

<tdml:parserTestCase name="length_delimited_12_02"
 model="dpaextdeltxt101.dfdl.xsd" description="Section 12 lengthKind-delimited - DFDL-12-043R"
 root="myStringSeq1">
 <tdml:document>abcd~efgh@</tdml:document>
 <tdml:infoset>
 <tdml:dfdlInfoset>
  <myStringSeq1>
    <Test1>abcd</Test1>
    <Test2>efgh</Test2>
  </myStringSeq1>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase> 	
 
 <tdml:parserTestCase name="length_delimited_12_03_controversial"
 model="dpaextdeltxt101.dfdl.xsd" description="Section 12.3 length -delimited - parent terminator - DFDL-12-043R"
 root="myStringSeq2_controversial">
 <tdml:document>abcde</tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <myStringSeq2_controversial>
    <Test1>abcde</Test1>
  </myStringSeq2_controversial>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase> 	
	
<tdml:parserTestCase name="length_delimited_12_03"
 model="dpaextdeltxt101.dfdl.xsd" description="Section 12.3 length -delimited - parent terminator - DFDL-12-043R"
 root="myStringSeq2">
 <tdml:document>abcde;</tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <myStringSeq2>
    <Test1>abcde</Test1>
  </myStringSeq2>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase> 	

<tdml:parserTestCase name="length_delimited_12_04"
 model="dpaextdeltxt101.dfdl.xsd" description="Section 12.3 Properties for specifying length -delimited - end of input"
 root="myDate2">
 <tdml:document>2011-03-21</tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <myDate2 xsi:type="xs:date">2011-03-21+00:00</myDate2>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase>
 
<tdml:parserTestCase name="length_delimited_12_05" 
 model="dpadelbcd_01.dfdl.xsd" description="Section 12.3 Properties for specifying length - binary  - bcd - delimited"
 root="mybinDecimal2">
 <tdml:document><tdml:documentPart type="byte">1234567840</tdml:documentPart></tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <mybinDecimal2 xsi:type="xs:decimal">123456.78</mybinDecimal2>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase>
 
 <tdml:parserTestCase name="length_delimited_12_06"
 model="dpadelone107_05.dfdl.xsd" description="Section 12.3 Properties for specifying length - simple element with specified length within a delimited sequence - DFDL-12-038R"
 root="groupElem">
 <tdml:document><tdml:documentPart type="text">A:test1a~</tdml:documentPart>
 <tdml:documentPart type="byte">0004</tdml:documentPart>
 <tdml:documentPart type="text">~cc</tdml:documentPart></tdml:document>
  <tdml:infoset>
 <tdml:dfdlInfoset>
  <groupElem>
    <Test1 >test1</Test1>
    <Test2 xsi:type="xs:unsignedShort">4</Test2>
    <Test3>cc</Test3>
  </groupElem>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase>
 
 <tdml:parserTestCase name="length_implicit_12_01"
 model="dpaimpflt_bin.dfdl.xsd" description="Section 12 - Length Variations - implicit length - binary float"
 root="Implicit">
 <tdml:document><tdml:documentPart type="byte">3f800000</tdml:documentPart></tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <Implicit xsi:type="xs:float">1.0</Implicit>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase> 
 
 <tdml:parserTestCase name="length_implicit_12_02"
 model="dpaimptxt.dfdl.xsd" description="Section 12 - Length Variations -  implicit length - string"
 root="MyText">
 <tdml:document>ABCDE</tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <MyText>ABCDE</MyText>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase> 

<tdml:parserTestCase name="length_explicit_12_03"
 model="length_explicit_12.dfdl.xsd" description="Section 12 - Length Variations - encoding that has varying length characters utf-8 - lengthUnits Characters"
 root="multibytes_2">
 <tdml:document><tdml:documentPart type="byte">e4ba9cc383e697a57e</tdml:documentPart></tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <multibytes_2>&#20124;&#195;&#26085;&#126;</multibytes_2>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase>
 
 <tdml:parserTestCase name="multiple_delimiters"
 model="dpaextdeltxt101.dfdl.xsd" description="Section 12.3 multiple terminators DFDL-12-033R"
 root="myStringSeq3">
 <tdml:document>abcde|fghij|klmno::</tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <myStringSeq3>
    <element1>abcde</element1>
    <element2>fghij</element2>
    <element3>klmno</element3>
  </myStringSeq3>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase>
 
 <tdml:parserTestCase name="multiple_delimiters2"
 model="dpaextdeltxt101.dfdl.xsd" description="Section 14 Sequence groups with delimiters, a whitespace separated list for separator - DFDL-14-008R"
 root="myStringSeq5"
 roundTrip="twoPass">
 <tdml:document>abcde|fghij|klmno::pqrst|uvwzy|z]</tdml:document>
 <tdml:infoset>
  <tdml:dfdlInfoset>
  <myStringSeq5>
  	<seq1>
  		<element1>abcde</element1>
    	<element2>fghij</element2>
    	<element3>klmno</element3>
  	</seq1>
  	<seq2>
  		<element1>pqrst</element1>
    	<element2>uvwzy</element2>
    	<element3>z</element3>
  	</seq2>
  </myStringSeq5>
</tdml:dfdlInfoset>
</tdml:infoset>
 </tdml:parserTestCase> 	 	

 <tdml:parserTestCase name="multiple_delimiters2_err"
 model="dpaextdeltxt101-err.dfdl.xsd" description="Section 14 Sequence groups with delimiters, a whitespace separated list for separator - DFDL-14-008R"
 root="myStringSeq4err">
 <tdml:document>abcde|fghij|klmno::pqrst|uvwzy|z]</tdml:document>
 <tdml:errors>
   <tdml:error>Schema Definition Error</tdml:error>
   <tdml:error>must be distinct</tdml:error>
 </tdml:errors>
 </tdml:parserTestCase>   

</tdml:testSuite>


