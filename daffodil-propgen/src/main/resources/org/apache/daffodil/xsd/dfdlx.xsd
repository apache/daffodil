<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<xs:schema
  targetNamespace="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
  xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"
  xmlns:dafint="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:int"
  attributeFormDefault="unqualified"
  elementFormDefault="qualified">

  <xs:import namespace="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:int"/>
  <xs:import namespace="http://www.ogf.org/dfdl/dfdl-1.0/"/>

  <!-- dfdl:property="..." extension values. Extension properties must start with dfdlx: -->

  <xs:simpleType name="PropertyNameType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="dfdlx:alignmentKind" />
      <xs:enumeration value="dfdlx:choiceBranchKeyRanges" />

      <!-- deprecated -->
      <xs:enumeration value="dfdlx:emptyElementParsePolicy"/>

      <xs:enumeration value="dfdlx:objectKind"/>
      <xs:enumeration value="dfdlx:parseUnparsePolicy"/>
      <xs:enumeration value="dfdlx:repType"/>
      <xs:enumeration value="dfdlx:repValueRanges"/>
      <xs:enumeration value="dfdlx:repValues"/>
      <xs:enumeration value="dfdlx:runtimeProperties"/>
    </xs:restriction>
  </xs:simpleType>


  <xs:attribute name="alignmentKind" type="dfdlx:AlignmentKindEnum" default="automatic">
    <xs:annotation>
      <xs:documentation><![CDATA[
        If manual, then the dfdl:alignment property is ignored, and all alignment must be done
        manually by way of dfdl:leadingSkip, dfdl:trailingSkip, or just arranging for elements
        that have the right size such that alignment is correct.

        The dfdl:alignmentUnits property still applies and is used with dfdl:leadingSkip and dfdl:trailingSkip.

        This property helps overcome limitations of the Daffodil schema compiler where it attempts to optimize
        out normal alignment regions, but is unable to, resulting in the inability to unparse some formats.

        For all constructs in the scope of this property, there will be no alignment regions created,
        and charset encodings will not have mandatory text alignment of their characters.

        Since this is a new extension property that is experimental, it will have a default value of "automatic".
        ]]></xs:documentation>
    </xs:annotation>
  </xs:attribute>

  <xs:simpleType name="AlignmentKindEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="automatic" />
      <xs:enumeration value="manual" />
    </xs:restriction>
  </xs:simpleType>

  <xs:attribute name="parseUnparsePolicy" type="dfdlx:ParseUnparsePolicyEnum"/>
  <xs:simpleType name="ParseUnparsePolicyEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="both" />
      <xs:enumeration value="parseOnly" />
      <xs:enumeration value="unparseOnly" />
    </xs:restriction>
  </xs:simpleType>

  <xs:attribute name="direction" type="dfdlx:VariableDirectionEnum"/>
  <xs:simpleType name="VariableDirectionEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="both" />
      <xs:enumeration value="parseOnly" />
      <xs:enumeration value="unparseOnly" />
    </xs:restriction>
  </xs:simpleType>

  <!-- deprecated -->
  <xs:attribute name="emptyElementParsePolicy" type="dfdlx:EmptyElementParsePolicyEnum"/>
  <xs:simpleType name="EmptyElementParsePolicyEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="treatAsEmpty" />

      <!-- deprecated -->
      <xs:enumeration value="treatAsMissing" />
    </xs:restriction>
  </xs:simpleType>
  
  <xs:attribute name="choiceBranchKeyRanges" type="dfdl:NonEmptyListOfInteger" />

  <xs:attributeGroup name="RepValuesAG">
    <xs:attribute form="qualified" name="repValues" type="dfdl:NonEmptyListofDFDLStringLiteralOrNonEmptyListOfInteger" />
    <xs:attribute form="qualified" name="repValueRanges" type="dfdl:NonEmptyListOfInteger" />
  </xs:attributeGroup>

  <xs:attributeGroup name="RepValuesAGQualified">
    <xs:attribute form="qualified" name="repValues" type="dfdl:NonEmptyListofDFDLStringLiteralOrNonEmptyListOfInteger" />
    <xs:attribute form="qualified" name="repValueRanges" type="dfdl:NonEmptyListOfInteger" />
  </xs:attributeGroup>

  <xs:attributeGroup name="RepTypeAG">
    <xs:attribute form="qualified" name="repType" type="xsd:QName" />
  </xs:attributeGroup>

  <xs:attributeGroup name="RepTypeAGQualified">
    <xs:attribute form="qualified" name="repType" type="xsd:QName" />
  </xs:attributeGroup>

  <xs:attributeGroup name="ExtLayeringAGQualified">
    <xs:attribute form="qualified" name="layer" type="xsd:QName" use='optional'/>
  </xs:attributeGroup>

  <xs:attributeGroup name="ObjectKindAG">
    <xs:attribute form="qualified" name="objectKind" type="dfdlx:ObjectKindType" />
  </xs:attributeGroup>

  <xs:attributeGroup name="ObjectKindAGQualified">
    <xs:attribute form="qualified" name="objectKind" type="dfdlx:ObjectKindType" />
  </xs:attributeGroup>

  <xs:simpleType name="ObjectKindType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="bytes"/>
      <xs:enumeration value="chars"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:attributeGroup name="RuntimePropertiesAG">
    <xs:attribute form="qualified" name="runtimeProperties" type="dfdlx:RuntimePropertiesType" />
  </xs:attributeGroup>

  <xs:attributeGroup name="RuntimePropertiesAGQualified">
    <xs:attribute form="qualified" name="runtimeProperties" type="dfdlx:RuntimePropertiesType" />
  </xs:attributeGroup>

  <xs:simpleType name="RuntimePropertiesType">
    <xs:restriction base="dfdlx:KVList" />
  </xs:simpleType>

  <xs:simpleType name="KVList">
    <xs:list>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:pattern value="[a-zA-Z_][a-zA-Z0-9_]*=\S*"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:list>
  </xs:simpleType>

</xs:schema>
