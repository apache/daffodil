<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite suiteName="Array-OptionalElemTests"
  description="Section 16 - Arrays and Optional Elements" xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ct="http://w3.ibm.com/xmlns/dfdl/ctInfoset"
  xmlns:ex="http://example.com" xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext">

  <tdml:defineSchema name="s1">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>

    <dfdl:format lengthKind="explicit" length="1" ref="ex:GeneralFormat"
      separator="" initiator="" terminator="" occursCountKind="expression"
      ignoreCase="no" textNumberRep="standard" representation="text" />
    <dfdl:defineFormat name="root">
      <dfdl:format lengthKind="implicit" ref="ex:GeneralFormat"
        separator="" initiator="" terminator="" representation="text" />
    </dfdl:defineFormat>

    <xs:element name="r1" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt" type="xs:string" minOccurs="0" dfdl:occursCount="{1}"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
        <xs:element name="r1a" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt" type="xs:string" minOccurs="0" dfdl:occursCount="{3}" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
        <xs:element name="r1b" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt" type="xs:string" minOccurs="0"  dfdl:occursCount="{0}" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    <xs:element name="r2" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt1" type="xs:string" minOccurs="0"  dfdl:occursCount="{3}"/>
          <xs:element name="opt2" type="xs:string" minOccurs="0"  dfdl:occursCount="{1}" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r3" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="sca" type="xs:string" />
          <xs:element name="opt" type="xs:string" minOccurs="0"  dfdl:occursCount="{2}" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r4" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt" type="xs:string" minOccurs="0"  dfdl:occursCount="{2}" />
          <xs:element name="sca" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="r5" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="sca" type="xs:int" />
          <xs:element name="opt" type="xs:string" minOccurs="0"  dfdl:occursCount="{../ex:sca}" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="r6" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="sca" type="xs:int" />
          <xs:element name="opt" type="xs:string" minOccurs="0"  dfdl:occursCount="{../ex:sca}" />
          <xs:element name="opt2" type="xs:string" minOccurs="0" maxOccurs="5" dfdl:occursCountKind="parsed"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

<!--
  Test Name: exprOptPresent
     Schema: s1
       Root: r1
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptPresent" root="r1"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r1>
          <opt>1</opt>
        </r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[1]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptParsedData_01
     Schema: s1
       Root: r5
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptParsedData_01" root="r5"
    model="s1" roundTrip="true">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r5>
          <sca>1</sca>
          <opt>.</opt>
        </r5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[1.]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptParsedData_02
     Schema: s1
       Root: r5
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptParsedData_02" root="r5"
    model="s1" roundTrip="true">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r5>
          <sca>3</sca>
          <opt>.</opt>
          <opt>.</opt>
          <opt>.</opt>
        </r5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[3...]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptParsedData_03
     Schema: s1
       Root: r6
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptParsedData_03" root="r6"
    model="s1" roundTrip="true">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r6>
          <sca>3</sca>
          <opt>.</opt>
          <opt>.</opt>
          <opt>.</opt>
          <opt2>.</opt2>
          <opt2>.</opt2>
          <opt2>.</opt2>
        </r6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[3......]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptParsedData_04
     Schema: s1
       Root: r6
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptParsedData_04" root="r6"
    model="s1" roundTrip="true">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r6>
          <sca>3</sca>
          <opt>.</opt>
          <opt>.</opt>
          <opt>.</opt>
          <opt2>.</opt2>
        </r6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[3....]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptPresentArray
     Schema: s1
       Root: r1a
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptPresentArray" root="r1a"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r1a>
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
        </r1a>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[123]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptAbsentArray
     Schema: s1
       Root: r1b
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptAbsentArray" root="r1b"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r1b/>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document />

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptTwoArrays
     Schema: s1
       Root: r2
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
             Note that this test does not round trip.
-->

  <tdml:unparserTestCase name="exprOptTwoArrays" root="r2"
    model="s1" roundTrip="false">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r2>
          <opt1>1</opt1>
          <opt1>2</opt1>
          <opt1>3</opt1>
          <opt2>1</opt2>
          <opt2>2</opt2>
          <opt2>3</opt2>
        </r2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[123123]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptScalarThenArray
     Schema: s1
       Root: r3
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptScalarThenArray" root="r3"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r3>
          <sca>1</sca>
          <opt>2</opt>
          <opt>3</opt>
        </r3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[123]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: exprOptArrayThenScalar
     Schema: s1
       Root: r4
    Purpose: This test demonsrates unparsing an array with occursCount set to an expression. 
-->

  <tdml:unparserTestCase name="exprOptArrayThenScalar" root="r4"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r4>
          <opt>1</opt>
          <opt>2</opt>
          <sca>3</sca>
        </r4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[123]]></tdml:document>

  </tdml:unparserTestCase>

</tdml:testSuite>
