<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite suiteName="Array-OptionalElemTests"
  description="Section 16 - Arrays and Optional Elements" xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ct="http://w3.ibm.com/xmlns/dfdl/ctInfoset"
  xmlns:ex="http://example.com" xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext">

  <tdml:defineSchema name="s1">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>

    <dfdl:format lengthKind="explicit" length="1" ref="ex:GeneralFormat"
      separator="" initiator="" terminator="" occursCountKind="implicit"
      ignoreCase="no" textNumberRep="standard" representation="text" 
      textPadKind='padChar' textStringPadCharacter="%SP;"/>
    <dfdl:defineFormat name="root">
      <dfdl:format lengthKind="implicit" ref="ex:GeneralFormat"
        separator="" initiator="" terminator="" representation="text" />
    </dfdl:defineFormat>

    <xs:element name="r1" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt" type="xs:string" minOccurs="0"
            maxOccurs="3" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r1_2" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt" type="xs:string" minOccurs="0"
            maxOccurs="2" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r2" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt1" type="xs:string" minOccurs="0"
            maxOccurs="3" />
          <xs:element name="opt2" type="xs:string" minOccurs="0"
            maxOccurs="3" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r3" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="sca" type="xs:string" />
          <xs:element name="opt" type="xs:string" minOccurs="0"
            maxOccurs="3" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r4" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="opt" type="xs:string" minOccurs="0"
            maxOccurs="3" />
          <xs:element name="sca" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r5" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence>
          <xs:sequence>
            <xs:sequence>
              <xs:element name="sca1" type="xs:string" />
            </xs:sequence>
            <xs:element name="opt" type="xs:string" minOccurs="0" maxOccurs="3">
              <xs:annotation>
                <xs:appinfo source="http://www.ogf.org/dfdl/">
                  <dfdl:assert test="{ xs:int(.) lt 6 }" />
                </xs:appinfo>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:element name="sca2" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

<!--
  Test Name: impOptPresent
     Schema: s1
       Root: r1
    Purpose: This test demonsrates unparsing an optional array with occursCountKind="implicit"
             In this case the optional element is present.
-->

  <tdml:unparserTestCase name="impOptPresent" root="r1"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r1>
          <opt>1</opt>
        </r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[1]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptPresentArray
     Schema: s1
       Root: r1
    Purpose: This test demonsrates unparsing an optional array with occursCountKind="implicit"
             In this case the optional element is present with the max number of occurrences.
-->

  <tdml:unparserTestCase name="impOptPresentArray" root="r1"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r1>
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
        </r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[123]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptPresentArrayMax2
     Schema: s1
       Root: r1_2
    Purpose: This test demonsrates unparsing an optional array with occursCountKind="implicit"
             In this case the optional element is present with more than the max number of occurrences.
-->

  <tdml:unparserTestCase name="impOptPresentArrayMax2" root="r1_2"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r1_2>
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
        </r1_2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>Expected array end event</tdml:error>
      <tdml:error>opt</tdml:error>
      <tdml:error>received element start event</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

<!--
  Test Name: impOptAbsentArrayMax
     Schema: s1
       Root: r1
    Purpose: This test demonsrates unparsing an optional array with occursCountKind="implicit"
             In this case the optional element is not present.
-->

  <tdml:unparserTestCase name="impOptAbsentArray" root="r1"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r1 />
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document/>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptTwoArrays
     Schema: s1
       Root: r2
    Purpose: This test demonsrates unparsing a sequence of two optional arrays
             with occursCountKind="implicit." In this case both arrays are present and 
             contain the maximum allowed number of elements.
-->

  <tdml:unparserTestCase name="impOptTwoArrays" root="r2"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r2>
          <opt1>1</opt1>
          <opt1>2</opt1>
          <opt1>3</opt1>
          <opt2>1</opt2>
          <opt2>2</opt2>
          <opt2>3</opt2>
        </r2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[123123]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptScalarThenArray
     Schema: s1
       Root: r3
    Purpose: This test demonsrates unparsing a sequence of a scalar and an optional array
             with occursCountKind="implicit." In this case the optional array is present.
-->

  <tdml:unparserTestCase name="impOptScalarThenArray" root="r3"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r3>
          <sca>1</sca>
          <opt>2</opt>
          <opt>3</opt>
        </r3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[123]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptScalarThenArray02
     Schema: s1
       Root: r3
    Purpose: This test demonsrates unparsing a sequence of a scalar and an optional array
             with occursCountKind="implicit." In this case the optional array is not present.
-->

  <tdml:unparserTestCase name="impOptScalarThenArray02" root="r3"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r3>
          <sca>1</sca>
        </r3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[1]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptScalarThenArray03
     Schema: s1
       Root: r3
    Purpose: This test demonsrates unparsing a sequence of a scalar and an optional array
             with occursCountKind="implicit." In this case the optional array is present and
             there are too many elements.
-->

  <tdml:unparserTestCase name="impOptScalarThenArray03" root="r3"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r3>
          <sca>0</sca>
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
          <opt>4</opt>
        </r3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>Expected array end event</tdml:error>
      <tdml:error>opt</tdml:error>
      <tdml:error>received element start event</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptArrayThenScalar
     Schema: s1
       Root: r4
    Purpose: This test demonsrates unparsing a sequence of an optional array and a scalar
             with occursCountKind="implicit." In this case the optional array is present.
             Note that this test does not round trip.
-->

  <tdml:unparserTestCase name="impOptArrayThenScalar" root="r4"
    model="s1" roundTrip="false">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r4>
          <opt>1</opt>
          <opt>2</opt>
          <sca>3</sca>
        </r4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[123]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptArrayThenScalar02
     Schema: s1
       Root: r4
    Purpose: This test demonsrates unparsing a sequence of an optional array and a scalar
             with occursCountKind="implicit." In this case the optional array is not present.
-->

  <tdml:unparserTestCase name="impOptArrayThenScalar02" root="r4"
    model="s1" roundTrip="false">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r4>
          <opt/>
          <sca>3</sca>
        </r4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[ 3]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: impOptArrayThenScalar02parse
     Schema: s1
       Root: r4
    Purpose: This test demonsrates parsing a sequence of an optional array and a scalar
             with occursCountKind="implicit." In this case the optional array is not present.
-->

  <tdml:parserTestCase name="impOptArrayThenScalar02parse" root="r4"
    model="s1">
    <tdml:document><![CDATA[ 3]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Insufficient</tdml:error>
      <tdml:error>sca</tdml:error>
    </tdml:errors>

  </tdml:parserTestCase>

<!--
  Test Name: impOptArrayThenScalar03
     Schema: s1
       Root: r4
    Purpose: This test demonsrates unparsing a sequence of an optional array and a scalar
             with occursCountKind="implicit." In this case the optional array is present and has
             too many items.
-->

  <tdml:unparserTestCase name="impOptArrayThenScalar03" root="r4"
    model="s1">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r4>
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
          <opt>4</opt>
          <opt>5</opt>
          <sca>6</sca>
        </r4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>Expected array end event</tdml:error>
      <tdml:error>opt</tdml:error>
      <tdml:error>received element start event</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
  Test Name: scalarThenImpOptArray01
     Schema: s1
       Root: r5
    Purpose: This test demonsrates unparsing a scalar with occursCountKind="implicit" followed
             by an optional array with lots of nesting of sequences.
-->

  <tdml:unparserTestCase name="scalarThenImpOptArray01" root="r5"
    model="s1" roundTrip="true">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r5>
          <sca1>6</sca1>
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
          <sca2>6</sca2>
        </r5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[61236]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: scalarThenImpOptArray02
     Schema: s1
       Root: r5
    Purpose: This test demonsrates unparsing a scalar with occursCountKind="implicit" followed
             by an optional array with lots of nesting of sequences.
-->

  <tdml:unparserTestCase name="scalarThenImpOptArray02" root="r5"
    model="s1" roundTrip="true">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r5>
          <sca1>6</sca1>
          <opt>1</opt>
          <sca2>6</sca2>
        </r5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[616]]></tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: scalarThenImpOptArray03
     Schema: s1
       Root: r5
    Purpose: This test demonsrates unparsing a scalar with occursCountKind="implicit" followed
             by an optional array with lots of nesting of sequences.
-->

  <tdml:unparserTestCase name="scalarThenImpOptArray03" root="r5"
    model="s1" roundTrip="true">

    <tdml:infoset xmlns="http://example.com">
      <tdml:dfdlInfoset>
        <r5>
          <sca1>6</sca1>
          <sca2>6</sca2>
        </r5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[66]]></tdml:document>
  </tdml:unparserTestCase>

</tdml:testSuite>
