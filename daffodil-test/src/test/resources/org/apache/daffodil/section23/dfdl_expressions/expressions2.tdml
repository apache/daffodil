<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite
 suiteName="expressions2"
 description="misc expression language tests"
 xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
 xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
 xmlns:ex="http://example.com"
 xmlns:fn="http://www.w3.org/2005/xpath-functions"
 defaultRoundTrip="true">

 <tdml:defineSchema name="s1" 
 elementFormDefault="unqualified"
 >
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format
      ref="ex:GeneralFormat"
      lengthKind="explicit" 
      representation="binary" lengthUnits="bits"/>

  <xs:element name="e1" dfdl:lengthKind="implicit">
   <xs:complexType>
    <xs:sequence>
     <xs:element name="ul" type="xs:unsignedLong" dfdl:length="2" />
     <!-- 
     DFDL-1669, the comparison of ul and 1 would return false because it
     was comparing a java.math.BigInteger with a java.lang.Long
      -->
      <xs:element name="comp" type="xs:int"
       dfdl:inputValueCalc="{ if ( ../ul eq 1 ) then 1 else 0 }" />
    </xs:sequence>
   </xs:complexType>
  </xs:element>

  <xs:element name="e2" dfdl:lengthKind="implicit">
   <xs:complexType>
    <xs:sequence>
     <xs:element name="count" type="xs:unsignedByte" dfdl:length="2" />
     <xs:element name="arr" type="xs:unsignedByte" dfdl:length="2" dfdl:occursCountKind="expression"
       dfdl:occursCount="{ if (../count eq 1) then ../count else 0 }" maxOccurs="unbounded" dfdl:alignmentUnits="bits"/>
    </xs:sequence>
   </xs:complexType>
  </xs:element>

  <xs:element name="e3" dfdl:lengthKind="implicit">
   <xs:complexType>
    <xs:sequence>
     <xs:element name="count" type="xs:unsignedByte" dfdl:length="2" />
     <xs:element name="ovc" type="xs:unsignedByte" dfdl:inputValueCalc="{ xs:unsignedByte(if (../count eq 1) then ../count div 0.75 else 0) }" />
    </xs:sequence>
   </xs:complexType>
  </xs:element>

  <xs:element name="e4" dfdl:lengthKind="implicit">
   <xs:complexType>
    <xs:sequence>
     <xs:element name="count" type="xs:unsignedByte" dfdl:length="2" />
     <xs:element name="ovc" type="xs:unsignedByte" dfdl:inputValueCalc="{ xs:unsignedByte(5 + (if (../count eq 1) then ../count div 0.75 else 0) + 6) }" />
    </xs:sequence>
   </xs:complexType>
  </xs:element>

  <xs:element name="e5" dfdl:lengthKind="implicit">
   <xs:complexType>
    <xs:sequence>
     <xs:element name="count" type="xs:unsignedByte" dfdl:length="2" />
     <xs:element name="ovc" type="xs:unsignedByte" dfdl:inputValueCalc="{ xs:unsignedByte(5 + (if (../count eq 1) then ../count div 0.75 else '0') + 6) }" />
    </xs:sequence>
   </xs:complexType>
  </xs:element>

  </tdml:defineSchema>
  
 <tdml:parserTestCase
  name="test_dfdl_1669_unsignedLong_conversion"
  root="e1"
  model="s1"
  description="Show that unsignedLong element values get compared to literal integers properly."
  roundTrip="false"
 >
  <tdml:document>
  <tdml:documentPart type="bits">01</tdml:documentPart></tdml:document>
  <tdml:infoset>
  <tdml:dfdlInfoset>
   <ex:e1 xmlns:ex="http://example.com">
    <ul>1</ul>
    <comp>1</comp>
   </ex:e1>
   </tdml:dfdlInfoset>
  </tdml:infoset>
 </tdml:parserTestCase>

<tdml:defineSchema name="s2" elementFormDefault="unqualified">
  
  <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
  <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"/>
   
  <!-- This for reproducing the diagnostic about upward paths past root -->
  
  <xs:element name="root">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ex:f1"/>
        <xs:element ref="ex:f2"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="f1" type="xs:int" dfdl:outputValueCalc="{../ex:f2 }"/>
  <xs:element name="f2" type="xs:int" dfdl:inputValueCalc="{ ../ex:f1 }"/>

 </tdml:defineSchema>

  <tdml:parserTestCase name="test_expr_path_past_root1" root="root" model="s2"
    description="Diagnostic for path past root says where the problem lies.">
    <tdml:document />
    <tdml:errors>
      <tdml:error>Relative path</tdml:error>
      <tdml:error>past root element</tdml:error>
      <tdml:error>ex:f1</tdml:error>
      <tdml:error>../ex:f2</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="if_expression_type_01" root="e2" model="s1"
    description="convert then and else parts of if expression.">
    <tdml:document>
      <tdml:documentPart type="bits">0111</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2 xmlns:ex="http://example.com">
          <count>1</count>
          <arr>3</arr>
        </ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="if_expression_type_02" root="e3" model="s1"
    description="convert then and else parts of if expression.">
    <tdml:document>
      <tdml:documentPart type="bits">01</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e3 xmlns:ex="http://example.com">
          <count>1</count>
          <ovc>1</ovc>
        </ex:e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="if_expression_type_03" root="e3" model="s1"
    description="convert then and else parts of if expression.">
    <tdml:document>
      <tdml:documentPart type="bits">10</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e3 xmlns:ex="http://example.com">
          <count>2</count>
          <ovc>0</ovc>
        </ex:e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="if_expression_type_04" root="e4" model="s1"
    description="convert then and else parts of if expression.">
    <tdml:document>
      <tdml:documentPart type="bits">10</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e4 xmlns:ex="http://example.com">
          <count>2</count>
          <ovc>11</ovc>
        </ex:e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="if_expression_type_05" root="e4" model="s1"
    description="convert then and else parts of if expression.">
    <tdml:document>
      <tdml:documentPart type="bits">01</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e4 xmlns:ex="http://example.com">
          <count>1</count>
          <ovc>12</ovc>
        </ex:e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="if_expression_type_06" root="e5" model="s1"
    description="convert then and else parts of if expression.">
    <tdml:document>
      <tdml:documentPart type="bits">10</tdml:documentPart></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>If-expression branches must have similar types</tdml:error>
      <tdml:error>Double</tdml:error>
      <tdml:error>String</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:defineSchema name="traceComplex" elementFormDefault="unqualified">

    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" />

    <xs:element name="e">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="aComplexElement">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="y" type="xs:int" dfdl:inputValueCalc="{ 0 }" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="f" type="xs:string"
            dfdl:inputValueCalc="{ if (fn:exists(dfdlx:trace(../aComplexElement, 'We can trace a complex element'))) then 'exists' else 'nope' }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>

  <tdml:parserTestCase name="traceComplex" model="traceComplex" root="e"
    description="Test that dfdlx:trace can take as argument a complex element.">
    <tdml:document />
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e>
          <aComplexElement>
            <y>0</y>
          </aComplexElement>
          <f>exists</f>
        </ex:e>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>
 
</tdml:testSuite>
