<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite
 suiteName="expressions3"
 xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
 xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
 xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"
 xmlns:ex="http://example.com"
 xmlns:fn="http://www.w3.org/2005/xpath-functions"
 defaultRoundTrip="true"
 defaultConfig="yesAutoCoercion">

  <tdml:defineConfig name="noAutoCoercion">
    <daf:tunables>
      <daf:allowExpressionResultCoercion>false</daf:allowExpressionResultCoercion>
    </daf:tunables>
  </tdml:defineConfig>
  
  <tdml:defineConfig name="yesAutoCoercion">
    <daf:tunables>
      <daf:allowExpressionResultCoercion>true</daf:allowExpressionResultCoercion>
    </daf:tunables>
  </tdml:defineConfig>

  <tdml:parserTestCase name="test_polymorphic_expr_1" model="s1.dfdl.xsd" root="r"
    description="Polymorphic path expression">
    <tdml:document>1|a|2|b</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Feature not yet implemented</tdml:error>
      <tdml:error>Expression ../foo/bar</tdml:error>
      <tdml:error>inconsistent</tdml:error>
      <!-- 
      Line numbers below are fragile. If s1.dfdl.xsd is edited these will 
      change. They are supposed to be the lines where the two local element 'bar'
      are declared.
       -->
      <tdml:error>element bar in expression ../foo/bar with xs:int type at Location line 76</tdml:error>
      <tdml:error>element bar in expression ../foo/bar with xs:string type at Location line 62</tdml:error>
      <tdml:error>s1.dfdl.xsd</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:defineSchema name="s2a" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"/>

    <xs:group name="g">
      <!-- 
        The path expression below is depending on the ability to 
        compile polymorphically. The expression ../foo/hdr is always an int.
        The expression ../foo/bar is a string, or an integer depending on 
        the context. 
       -->
      <xs:sequence>
      <xs:choice dfdl:choiceDispatchKey="{ 
         xs:string(if (../foo/hdr eq 1) 
           then xs:int( fn:round( xs:double( ../foo/bar) ) )
           else xs:int( fn:round( xs:double( ../foo/bar) ) + 1 ) )}">
        <xs:element name="c1" type="xs:string" dfdl:choiceBranchKey="1" />
        <xs:element name="c2" type="xs:string" dfdl:choiceBranchKey="2" />
      </xs:choice>
      </xs:sequence>
    </xs:group>

    <xs:element name="r">
      <xs:complexType>
        <xs:sequence dfdl:separator="|">
          <xs:element name="e1">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo">
                  <xs:complexType>
                    <xs:sequence dfdl:separator="|">
                      <xs:element name="hdr" type="xs:int"/>
                      <xs:element name="bar" type="xs:float" />
                      <xs:group ref="ex:g" />
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="e2">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo">
                  <xs:complexType>
                    <xs:sequence dfdl:separator="|">
                      <xs:element name="hdr" type="xs:int"/>
                      <xs:element name="bar" type="xs:int" />
                      <xs:group ref="ex:g" />
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
 </tdml:defineSchema>

  <tdml:parserTestCase name="test_polymorphic_expr_2a" model="s2a" root="r"
    description="Polymorphic path expression">
    <tdml:document>1|1|a|2|1|b</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Feature not yet implemented</tdml:error>
      <tdml:error>Expression ../foo/bar</tdml:error>
      <tdml:error>inconsistent</tdml:error>
      <tdml:error>element bar in expression ../foo/bar with xs:int type at Location</tdml:error>
      <tdml:error>element bar in expression ../foo/bar with xs:float type at Location</tdml:error>
    </tdml:errors>   
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="s2b" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"/>

    <xs:group name="g">
      <!-- 
        The path expression below is depending on the ability to 
        compile polymorphically. The expression ../foo/hdr is always an int.
        The expression ../foo/bar is a string, or an integer depending on 
        the context. 
       -->
      <xs:sequence>
      <xs:choice dfdl:choiceDispatchKey="{ 
         xs:string(if (../foo/hdr eq 1) 
           then xs:int( ../foo/bar )
           else xs:int( ../foo/bar + 1 ) )}">
        <xs:element name="c1" type="xs:string" dfdl:choiceBranchKey="1" />
        <xs:element name="c2" type="xs:string" dfdl:choiceBranchKey="2" />
      </xs:choice>
      </xs:sequence>
    </xs:group>

    <xs:element name="r">
      <xs:complexType>
        <xs:sequence dfdl:separator="|">
          <xs:element name="e1">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo">
                  <xs:complexType>
                    <xs:sequence dfdl:separator="|">
                      <xs:element name="hdr" type="xs:int"/>
                      <xs:element name="bar" type="xs:float" />
                      <xs:group ref="ex:g" />
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="e2">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo">
                  <xs:complexType>
                    <xs:sequence dfdl:separator="|">
                      <xs:element name="hdr" type="xs:int"/>
                      <xs:element name="bar" type="xs:int" />
                      <xs:group ref="ex:g" />
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
 </tdml:defineSchema>

  <tdml:parserTestCase name="test_polymorphic_expr_2b" model="s2b" root="r"
    description="Polymorphic path expression">
    <tdml:document>1|1|a|2|1|b</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Feature not yet implemented</tdml:error>
      <tdml:error>Expression ../foo/bar</tdml:error>
      <tdml:error>inconsistent</tdml:error>
      <tdml:error>element bar in expression ../foo/bar with xs:int type at Location</tdml:error>
      <tdml:error>element bar in expression ../foo/bar with xs:float type at Location</tdml:error>
    </tdml:errors> 
  </tdml:parserTestCase>
    
  
  <tdml:defineSchema name="s3" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"/>

    <xs:group name="g">
      <!-- 
        The path expression below is depending on the ability to 
        compile polymorphically. The expression ../foo/hdr is always an int.
        The expression ../foo/bar is a string, or a complex type depending on 
        the context. So this shouldn't compile since you can't do math on 
        a complex type. 
       -->
      <xs:sequence>
      <xs:choice dfdl:choiceDispatchKey="{ 
         xs:string(if (../foo/hdr eq 1) 
           then xs:int( ../foo/bar )
           else xs:int( ../foo/bar + 1 ) )}">
        <xs:element name="c1" type="xs:string" dfdl:choiceBranchKey="1" />
        <xs:element name="c2" type="xs:string" dfdl:choiceBranchKey="2" />
      </xs:choice>
      </xs:sequence>
    </xs:group>

    <xs:element name="r">
      <xs:complexType>
        <xs:sequence dfdl:separator="|">
          <xs:element name="e1">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo">
                  <xs:complexType>
                    <xs:sequence dfdl:separator="|">
                      <xs:element name="hdr" type="xs:int"/>
                      <xs:element name="bar" type="xs:float" />
                      <xs:group ref="ex:g" />
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="e2">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo">
                  <xs:complexType>
                    <xs:sequence dfdl:separator="|">
                      <xs:element name="hdr" type="xs:int"/>
                      <xs:element name="bar">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="quux" type="xs:int" />
                          </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                      <xs:group ref="ex:g" />
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
 </tdml:defineSchema>

  <tdml:parserTestCase name="test_polymorphic_expr_3" model="s3" root="r"
    description="Polymorphic path expression">
    <tdml:document>1|1|a|2|1|b</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Feature not yet implemented</tdml:error>
      <tdml:error>Expression ../foo/bar</tdml:error>
      <tdml:error>inconsistent</tdml:error>
      <tdml:error>element bar in expression ../foo/bar with complex type at Location</tdml:error>
      <tdml:error>element bar in expression ../foo/bar with xs:float type at Location</tdml:error>
    </tdml:errors> 
  </tdml:parserTestCase>
  
  
  <tdml:defineSchema name="s4" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"/>
    <dfdl:defineVariable name="myVar" type="xs:double"/>

  <xs:group name="g">
    <xs:sequence>
      <xs:sequence>
        <xs:annotation>
          <xs:appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:setVariable ref="ex:myVar">{ ./foo }</dfdl:setVariable>
          </xs:appinfo>
        </xs:annotation>
      </xs:sequence>
    </xs:sequence>
  </xs:group>

  <xs:element name="r">
    <xs:complexType>
      <xs:sequence dfdl:separator="|">
        <xs:element name="hdr" type="xs:int" />
        <xs:choice>
          <xs:element name="e1">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo" type="xs:int" />
                <xs:group ref="ex:g" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="e2">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo" type="xs:decimal" />
                <xs:group ref="ex:g" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  </tdml:defineSchema>

  <tdml:parserTestCase name="test_polymorphic_expr_4" model="s4" root="r"
    description="Polymorphic path expression - This test shows that int and 
    decimal polymorphically are converted to decimal, not double, 
    because int is a subtype of decimal. This is shown by getting an error 
    when the decimal will not be auto-coerced to the type of the variable, which 
    is double."
    config="noAutoCoercion">
    <tdml:document></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Feature not yet implemented</tdml:error>
      <tdml:error>Expression foo</tdml:error>
      <tdml:error>inconsistent</tdml:error>
      <tdml:error>element foo in expression foo with xs:int type at Location</tdml:error>
      <tdml:error>element foo in expression foo with xs:decimal type at Location</tdml:error>
      <tdml:error>dfdl:setVariable</tdml:error>
    </tdml:errors> 
  </tdml:parserTestCase>

  <tdml:defineSchema name="s5" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"/>
    <dfdl:defineVariable name="myVar" type="xs:double"/>

  <xs:group name="g">
    <xs:sequence>
      <xs:sequence>
        <xs:annotation>
          <xs:appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:setVariable ref="ex:myVar">{ ./foo }</dfdl:setVariable>
          </xs:appinfo>
        </xs:annotation>
      </xs:sequence>
    </xs:sequence>
  </xs:group>

  <xs:element name="r">
    <xs:complexType>
      <xs:sequence dfdl:separator="|">
        <xs:element name="hdr" type="xs:int" />
        <xs:choice>
          <xs:element name="e1">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo" type="xs:int" />
                <xs:group ref="ex:g" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="e2">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo" type="xs:decimal" />
                <xs:group ref="ex:g" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="e3">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo" type="xs:float" />
                <xs:group ref="ex:g" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  </tdml:defineSchema>

  <tdml:parserTestCase name="test_polymorphic_expr_5" model="s5" root="r"
    description="Polymorphic path expression - This test shows that int, float, and 
    decimal polymorphically are converted to double."
    config="noAutoCoercion">
    <tdml:document>1|1</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Feature not yet implemented</tdml:error>
      <tdml:error>Expression foo</tdml:error>
      <tdml:error>inconsistent</tdml:error>
      <tdml:error>element foo in expression foo with xs:int type at Location</tdml:error>
      <tdml:error>element foo in expression foo with xs:decimal type at Location</tdml:error>
      <tdml:error>element foo in expression foo with xs:float type at Location</tdml:error>
      <tdml:error>dfdl:setVariable</tdml:error>
    </tdml:errors> 
  </tdml:parserTestCase>
  
    <tdml:defineSchema name="s6" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"/>
    <dfdl:defineVariable name="myVar" type="xs:double"/>

  <xs:group name="g">
    <xs:sequence>
      <xs:sequence>
        <xs:annotation>
          <xs:appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:setVariable ref="ex:myVar">{ ./foo }</dfdl:setVariable>
          </xs:appinfo>
        </xs:annotation>
      </xs:sequence>
    </xs:sequence>
  </xs:group>

  <xs:element name="r">
    <xs:complexType>
      <xs:sequence dfdl:separator="|">
        <xs:element name="hdr" type="xs:int" />
        <xs:choice>
          <xs:element name="e1">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo" type="xs:int" />
                <xs:group ref="ex:g" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="e2">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="foo" type="xs:int" maxOccurs="unbounded" />
                <xs:group ref="ex:g" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  </tdml:defineSchema>

  <tdml:parserTestCase name="test_polymorphic_expr_6" model="s6" root="r"
    description="Polymorphic path expression - Mixture of array and non-array"
    config="noAutoCoercion">
    <tdml:document>1|1</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Path step is ambiguous</tdml:error>
      <tdml:error>foo</tdml:error>
      <tdml:error>can be to an array or a non-array</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="arraySchema" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"/>

    <xs:element name="r">
      <xs:complexType>
        <xs:sequence dfdl:separator="|">
          <xs:element name="e1" type="xs:string" minOccurs="3" maxOccurs="3">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/">
                <dfdl:assert>{ if (dfdl:occursIndex() eq 1) then fn:true() else ( .[1] eq '1' ) }</dfdl:assert>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="rx">
      <xs:complexType>
        <xs:sequence dfdl:separator="|">
          <xs:element name="e1" type="xs:string" minOccurs="1" maxOccurs="3">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/">
                <dfdl:assert>{ .[1] eq '42' }</dfdl:assert>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
            
 </tdml:defineSchema>

  <tdml:parserTestCase name="test_array_self_expr1" model="arraySchema" root="r">
    <tdml:document>1|2|3</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:r>
          <e1>1</e1><e1>2</e1><e1>3</e1>
        </ex:r>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:parserTestCase name="test_array_self_expr2" model="arraySchema" root="rx">
    <tdml:document>1</tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Assertion failed</tdml:error>
      <tdml:error>42</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
</tdml:testSuite>
