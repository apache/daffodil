<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite suiteName="SimpleTypes" description="Section 5 - simple types"
  xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
  xmlns:ex="http://example.com" xmlns:tns="http://example.com"
  defaultRoundTrip="true">

  <tdml:defineSchema name="SimpleTypes-Embedded.dfdl.xsd">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormatPortable" lengthKind="implicit" representation="text"
        lengthUnits="bytes" encoding="US-ASCII" initiator="" terminator=""
        separator="" textNumberCheckPolicy="lax" ignoreCase="no" textNumberRep="standard"
        textPadKind="padChar" textTrimKind="padChar"/>
    <xs:element name="double" type="xs:double"/>
    <xs:element name="int" type="xs:int"/>
    <xs:element name="byte" type="xs:byte"/>
    <xs:element name="uByte" type="xs:unsignedByte"/>
    <xs:element name="s" type="xs:long" dfdl:lengthKind="explicit"
      dfdl:length="{ 13 }" />
    <xs:element name="mersenne" type="xs:integer"
      dfdl:lengthKind="explicit" dfdl:length="{ 207 }"
      dfdl:textNumberPattern="000,000" />
    <xs:element name="integer01" type="xs:integer"
      dfdl:lengthKind="explicit" dfdl:length="{ 20 }"
      dfdl:textNumberPattern="00000000000000000000" />
    <xs:element name="integer02" type="xs:integer"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" />
    <xs:element name="integer03" type="xs:integer"
      dfdl:lengthKind="implicit" />
    <xs:element name="int01" type="xs:int" dfdl:lengthKind="explicit"
      dfdl:length="13" />
    <xs:element name="int02" type="xs:int" dfdl:lengthKind="explicit"
      dfdl:length="11" />
    <xs:element name="int03" type="xs:int" dfdl:representation="binary"
      dfdl:binaryNumberRep="binary" />
    <xs:element name="int04" type="xs:int" dfdl:lengthKind="explicit"
      dfdl:length="10" />
    <xs:element name="int05" type="xs:int" dfdl:lengthKind="explicit"
      dfdl:length="4" />
    <xs:element name="l_2" type="xs:long" dfdl:lengthKind="explicit"
      dfdl:length="{ 10 }" />
    <xs:element name="l_3" type="xs:long" dfdl:lengthKind="explicit"
      dfdl:length="{ 20 }" dfdl:textNumberPattern="+0;-0" />
    <xs:element name="l_4" type="xs:long" dfdl:lengthKind="explicit"
      dfdl:length="{ 4 }" />
    <xs:element name="s_1" type="xs:short" dfdl:lengthKind="explicit"
      dfdl:length="{ 5 }" />
    <xs:element name="s_2" type="xs:short" dfdl:lengthKind="explicit"
      dfdl:length="{ 6 }" />
    <xs:element name="b_01" type="xs:byte" dfdl:lengthKind="explicit"
      dfdl:length="{4}" />
    <xs:element name="uI_01" type="xs:unsignedInt"
      dfdl:lengthKind="explicit" dfdl:length="{ 10 }" />
    <xs:element name="uI_02" type="xs:unsignedInt"
      dfdl:lengthKind="explicit" dfdl:length="{ 2 }" />
    <xs:element name="uI_03" type="xs:unsignedInt"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" />
    <xs:element name="uS_01" type="xs:unsignedShort"
      dfdl:lengthKind="explicit" dfdl:length="{ 2 }" />
    <xs:element name="uS_02" type="xs:unsignedShort"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" />
    <xs:element name="uB_01" type="xs:unsignedByte"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" />
    <xs:element name="uL_01" type="xs:unsignedLong"
      dfdl:lengthKind="explicit" dfdl:length="{ 20 }" />
    <xs:element name="uL_02" type="xs:unsignedLong"
      dfdl:lengthKind="explicit" dfdl:length="{ 2 }" />
    <xs:element name="uL_03" type="xs:unsignedLong"
      dfdl:lengthKind="explicit" dfdl:length="{ 1 }" />
    <xs:element name="uL_04" type="xs:unsignedLong"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" />
    <xs:element name="nonNegIntText" type="xs:nonNegativeInteger"
      dfdl:lengthKind="explicit" dfdl:length="{ 21 }" 
      dfdl:textNumberPattern="000000000000000000000"/>
    <xs:element name="nonNegIntText2" type="xs:nonNegativeInteger"
      dfdl:lengthKind="explicit" dfdl:length="{ 1 }" />
    <xs:element name="nonNegIntTextFail" type="xs:nonNegativeInteger"
      dfdl:lengthKind="explicit" dfdl:length="{ 2 }" />
    <xs:element name="nonNegIntTextFail2" type="xs:nonNegativeInteger"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" />
    <xs:element name="nonNegIntTextFail3" type="xs:nonNegativeInteger"
      dfdl:lengthKind="implicit" />
    <xs:element name="decimalText" type="xs:decimal"
      dfdl:lengthKind="explicit" dfdl:length="{ 21 }"
      dfdl:textNumberPattern="0.0000000000000000000" />
    <xs:element name="decimalText2" type="xs:decimal"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" />
    <xs:element name="decimalText3" type="xs:decimal"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" />
    <xs:element name="decimalTextFail" type="xs:decimal"
      dfdl:lengthKind="implicit" />
    <xs:element name="doubleText" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }"/>    
    <xs:element name="doubleTextAB" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }"  dfdl:encoding="ascii" dfdl:lengthUnits="bytes"/>  
    <xs:element name="doubleTextAC" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }"  dfdl:encoding="ascii" dfdl:lengthUnits="characters"/>    
    <xs:element name="doubleTextUB" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }"  dfdl:encoding="utf-8" dfdl:lengthUnits="bytes"/>    
    <xs:element name="doubleTextUC" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }"  dfdl:encoding="utf-8" dfdl:lengthUnits="characters"/>     
    <xs:element name="doubleText5AB" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 5 }"  dfdl:encoding="ascii" dfdl:lengthUnits="bytes"/>  
    <xs:element name="doubleText5AC" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 5 }"  dfdl:encoding="ascii" dfdl:lengthUnits="characters"/>    
    <xs:element name="doubleText5UB" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 5 }"  dfdl:encoding="utf-8" dfdl:lengthUnits="bytes"/>    
    <xs:element name="doubleText5UC" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 5 }"  dfdl:encoding="utf-8" dfdl:lengthUnits="characters"/>   
    <xs:element name="doubleText2" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 18 }"
      dfdl:textNumberPattern="000.00000000000000" />
    <xs:element name="doubleText3" type="xs:double"
      dfdl:lengthKind="explicit" dfdl:length="{ 21 }"
      dfdl:textNumberPattern="000.00000000000000000" />
    <xs:element name="floatText" type="xs:float"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" />
    <xs:element name="floatText2" type="xs:float"
      dfdl:lengthKind="explicit" dfdl:length="{ 21 }"
      dfdl:textNumberPattern="000000000000000000000" />
    <xs:element name="floatTextFail" type="xs:float"
      dfdl:lengthKind="implicit" />

    <xs:element name="nonNegIntBin" type="xs:nonNegativeInteger"
      dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ 16 }" />
    <xs:element name="nonNegIntBin2" type="xs:nonNegativeInteger"
      dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ 3 }" />
    <xs:element name="nonNegIntBin3" type="xs:nonNegativeInteger"
      dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ 120 }"/>
    <xs:element name="nonNegIntBin4" type="xs:nonNegativeInteger"
      dfdl:representation="binary" dfdl:lengthKind="implicit"/>
    <xs:element name="nonNegIntBin5" type="xs:nonNegativeInteger" 
      dfdl:representation="binary" dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ -30 }"/>

    <xs:element name="dateText" type="xs:date" dfdl:calendarPattern="EEEE, MMM d, ''yy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 23 }" />
    <xs:element name="timeText" type="xs:time" dfdl:calendarPattern="h:mm a" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 8 }" />
    <xs:element name="dateTimeText" type="xs:dateTime" dfdl:calendarPattern="yyyy.MM.dd G 'at' HH:mm:ss ZZZZ" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 35 }" />
    <xs:element name="dateTextInvalid" type="xs:date" dfdl:calendarPattern="EEEE, MMM d, ''yy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ xs:string('Wday, July 10, 1996') }" />
    <xs:element name="timeTextInvalid" type="xs:time" dfdl:calendarPattern="h:mm a" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ xs:string('not a time') }" />
    <xs:element name="dateTimeTextInvalid" type="xs:dateTime" dfdl:calendarPattern="yyyy.MM.dd G 'at' HH:mm:ss ZZZZ" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ xs:string('not a date time') }" />

    <xs:element name="limits" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator=":"
          dfdl:separatorSuppressionPolicy="never" dfdl:separatorPosition="infix">
          <xs:element name="unsigned-byte" type="xs:unsignedByte"
            dfdl:lengthKind="explicit" dfdl:length="{ 3 }" />
          <xs:element name="unsigned-short" type="xs:unsignedShort"
            dfdl:lengthKind="explicit" dfdl:length="{ 6 }" />
          <xs:element name="unsigned-int" type="xs:unsignedInt"
            dfdl:lengthKind="explicit" dfdl:length="{ 13 }" />
          <xs:element name="unsigned-long" type="xs:unsignedLong"
            dfdl:lengthKind="explicit" dfdl:length="{ 20 }"
            dfdl:textNumberPattern="00000000000000000000" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="e1" dfdl:lengthKind="explicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="s1" type="xs:int"
            dfdl:lengthKind="explicit" dfdl:length="{ 1 }" />
          <xs:element name="s2" type="xs:int"
            dfdl:lengthKind="explicit" dfdl:length="{ 5 }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="Day" dfdl:length="2" dfdl:lengthKind="explicit" dfdl:textNumberPattern="#0">
        <xs:simpleType>
            <xs:restriction base="xs:unsignedInt">
              <xs:maxInclusive value="31"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:defineSchema name="SimpleTypes-binary">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormatPortable" representation="binary"
      lengthUnits="bytes"
      textPadKind="padChar" textTrimKind="padChar" />

    <xs:element name="integer01" type="xs:integer" />
    <xs:element name="integer02" type="xs:integer"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="32" />
    <xs:element name="integer03" type="xs:integer"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="4" />

    <xs:element name="posint01" type="xs:nonNegativeInteger" />
    <xs:element name="int01" type="xs:int" />
    <xs:element name="int02" type="xs:int" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="65" />
    <xs:element name="l_1" type="xs:long" />
    <xs:element name="s_1" type="xs:short" />
    <xs:element name="b_01" type="xs:byte" />
    <xs:element name="uI_01" type="xs:unsignedInt" />
    <xs:element name="uS_01" type="xs:unsignedShort" />
    <xs:element name="uB_01" type="xs:unsignedByte" />
    <xs:element name="uL_01" type="xs:unsignedLong" />
    <xs:element name="d_01" type="xs:double" />
    <xs:element name="d_02" type="xs:double"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="8" />
    <xs:element name="dec_01" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="0"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="8" />
    <xs:element name="dec_02" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="5"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="8" />
    <xs:element name="dec_03" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="-5"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="8" />
    <xs:element name="dec_04" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="200"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="4" />
    <xs:element name="dec_05" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="-200"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="4" />
    <xs:element name="dec_06" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="201"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="4" />
    <xs:element name="dec_07" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="-201"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="4" />
    <xs:element name="dec_08" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="0"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="12" />
    <xs:element name="dec_implicit" type="xs:decimal" dfdl:binaryDecimalVirtualPoint="0" />
    <xs:element name="hb_01" type="xs:hexBinary" 
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="4" />
    <xs:element name="float_01" type="xs:float" />
    <xs:element name="float_02" type="xs:float"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="4" />
    <xs:element name="float_03" type="xs:float"
    dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="8" />

    <xs:element name="dateTimeBin" type="xs:dateTime" dfdl:lengthKind="explicit" dfdl:length="{ 4 }"
      dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="1977-01-01T00:00:07"/>
    <xs:element name="dateTimeBin2" type="xs:dateTime" dfdl:lengthKind="explicit" dfdl:length="{ 32 }"
      dfdl:lengthUnits="bits" dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="1970-01-01T00:00:00"/>
    <xs:element name="dateTimeBin3" type="xs:dateTime" dfdl:lengthKind="explicit" dfdl:length="{ 5 }"
      dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="1970-01-01T00:00:00"/>
    <xs:element name="dateTimeBin4" type="xs:dateTime" dfdl:lengthKind="implicit" dfdl:lengthUnits="bytes"
      dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="1870-01-01T00:05:00+00:00"/>
    <xs:element name="dateTimeBin5" type="xs:dateTime" dfdl:lengthKind="explicit" dfdl:length="{ 8 }"
      dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="binaryMilliseconds" dfdl:binaryCalendarEpoch="1985-11-21T10:37:04"/>
    <xs:element name="dateTimeBin6" type="xs:dateTime" dfdl:lengthKind="explicit" dfdl:length="{ 8 }"
      dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="binaryMilliseconds" dfdl:binaryCalendarEpoch="2000-06-15T03:25:19"/>
    <xs:element name="dateTimeBin7" type="xs:dateTime" dfdl:lengthKind="implicit" dfdl:lengthUnits="bytes"
      dfdl:binaryCalendarRep="binaryMilliseconds" dfdl:binaryCalendarEpoch="1870-01-01T00:05:00"/>
    <xs:element name="dateTimeBin8" type="xs:dateTime" dfdl:lengthKind="explicit" dfdl:length="{ 4 }"
      dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="2018-01-01T09:13:42+09:00"/>
    <xs:element name="dateTimeBin9" type="xs:dateTime" dfdl:lengthKind="implicit" dfdl:lengthUnits="bytes"
      dfdl:binaryCalendarRep="binaryMilliseconds" dfdl:binaryCalendarEpoch="2000-01-01T00:00:00-04:00"/>
    <xs:element name="dateTimeBin10" type="xs:dateTime" dfdl:lengthKind="implicit" dfdl:lengthUnits="bytes"
      dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="2000-1-1T00:00"/>
    <xs:element name="dateTimeBin11" type="xs:dateTime" dfdl:lengthKind="implicit" dfdl:lengthUnits="bytes"
      dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="01-01-2000T00:00:00"/>
    <xs:element name="dateTimeBin12" type="xs:dateTime" dfdl:lengthKind="delimited" dfdl:terminator=";"
      dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="1977-01-01T00:00:07"/>

    <xs:element name="dateBinBCD" type="xs:date" dfdl:calendarPattern="MMddyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd" />
    <xs:element name="dateBinBCD2" type="xs:date" dfdl:calendarPattern="MMddyyyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="dateBinBCD3" type="xs:date" dfdl:calendarPattern="MM-dd-yy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="dateBinBCD4" type="xs:date" dfdl:calendarPattern="MMddyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 7 }" dfdl:lengthUnits="bits" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="dateBinBCD5" type="xs:date" dfdl:calendarPattern="MMEEyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="dateBinBCD6" type="xs:date" dfdl:calendarPattern="MMddyyeee" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="dateBinBCD7" type="xs:date" dfdl:calendarPattern="eMyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 16 }" dfdl:lengthUnits="bits" dfdl:binaryCalendarRep="bcd"/>

    <xs:element name="timeBinBCD" type="xs:time" dfdl:calendarPattern="HHmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="timeBinBCD2" type="xs:time" dfdl:calendarPattern="HHmmssSSSS" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 5 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="timeBinBCD3" type="xs:time" dfdl:calendarPatternKind="implicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 5 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="timeBinBCD4" type="xs:time" dfdl:calendarPattern="HHmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="implicit" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="timeBinBCD5" type="xs:time" dfdl:calendarPattern="HHmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:binaryCalendarRep="bcd" dfdl:encoding="ISO-8859-1"/>

    <xs:element name="timeBinBCD6">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="length" type="xs:int" dfdl:representation="binary"
            dfdl:lengthKind="explicit" dfdl:length="{ 1 }" dfdl:lengthUnits="bytes" />
          <xs:element name="time" type="xs:time" dfdl:calendarPattern="HHmmss" dfdl:calendarPatternKind="explicit"
            dfdl:lengthKind="explicit" dfdl:length="{ ../ex:length }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="dateTimeBinBCD" type="xs:dateTime" dfdl:calendarPattern="MMddyyyyHHmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 7 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="dateTimeBinBCD2" type="xs:dateTime" dfdl:calendarPattern="MMddyyyyhhmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="implicit" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>
    <xs:element name="dateTimeBinBCD3" type="xs:dateTime" dfdl:calendarPattern="MMddyyyyhhmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 7 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="bcd"/>

    <xs:element name="dateTimeBinBCD4">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="num1" type="xs:decimal" dfdl:encoding="ISO-8859-1" dfdl:representation="binary" dfdl:binaryNumberRep="bcd"
            dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:binaryDecimalVirtualPoint="0"/>
          <xs:element name="datetime" type="xs:dateTime" dfdl:calendarPattern="MMddyyyyHHmmss" dfdl:encoding="ISO-8859-1"
            dfdl:calendarPatternKind="explicit" dfdl:binaryCalendarRep="bcd" dfdl:lengthKind="delimited" dfdl:terminator=";"/>
          <xs:element name="num2" type="xs:decimal" dfdl:encoding="ISO-8859-1" dfdl:representation="binary" dfdl:binaryNumberRep="bcd"
            dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:binaryDecimalVirtualPoint="0"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="dateBinIBM4690Packed" type="xs:date" dfdl:calendarPattern="MMddyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 3 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="ibm4690Packed" />
    <xs:element name="dateBinIBM4690Packed2" type="xs:date" dfdl:calendarPattern="MMddyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 18 }" dfdl:lengthUnits="bits" dfdl:binaryCalendarRep="ibm4690Packed"/>

    <xs:element name="dateTimeBinIBM4690Packed">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="length" type="xs:int" dfdl:representation="binary"
            dfdl:lengthKind="explicit" dfdl:length="{ 1 }" dfdl:lengthUnits="bytes" />
          <xs:element name="datetime" type="xs:dateTime" dfdl:calendarPattern="MMddyyHHmmss" dfdl:calendarPatternKind="explicit"
            dfdl:lengthKind="explicit" dfdl:length="{ ../ex:length }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="ibm4690Packed" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="dateTimeBinIBM4690Packed2" type="xs:dateTime" dfdl:calendarPattern="MMddyyyyHHmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 56 }" dfdl:lengthUnits="bits" dfdl:binaryCalendarRep="ibm4690Packed" />
    <xs:element name="dateTimeBinIBM4690Packed3" type="xs:dateTime" dfdl:calendarPattern="MMddyyyyhhmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="implicit" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="ibm4690Packed"/>

    <xs:element name="timeBinIBM4690Packed">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="num1" type="xs:decimal" dfdl:encoding="ISO-8859-1" dfdl:representation="binary" dfdl:binaryNumberRep="ibm4690Packed"
            dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:binaryDecimalVirtualPoint="0"/>
          <xs:element name="time" type="xs:time" dfdl:calendarPattern="HHmmss" dfdl:encoding="ISO-8859-1"
            dfdl:calendarPatternKind="explicit" dfdl:binaryCalendarRep="ibm4690Packed" dfdl:lengthKind="delimited" dfdl:terminator=";"/>
          <xs:element name="num2" type="xs:decimal" dfdl:encoding="ISO-8859-1" dfdl:representation="binary" dfdl:binaryNumberRep="ibm4690Packed"
            dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:binaryDecimalVirtualPoint="0"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="timeBinIBM4690Packed2" type="xs:time" dfdl:calendarPatternKind="implicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 5 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="ibm4690Packed"/>

    <xs:element name="dateBinPacked" type="xs:date" dfdl:calendarPattern="MMddyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="packed"
      dfdl:binaryPackedSignCodes="C D F C" dfdl:binaryNumberCheckPolicy="strict" dfdl:calendarTimeZone="UTC"/>
    <xs:element name="dateBinPacked2" type="xs:date" dfdl:calendarPattern="MMddyy" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="packed" />

    <xs:element name="dateBinPacked4">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="num1" type="xs:decimal" dfdl:encoding="ISO-8859-1" dfdl:representation="binary" dfdl:binaryNumberRep="packed"
            dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:binaryDecimalVirtualPoint="0" dfdl:binaryPackedSignCodes="C D F C"
            dfdl:binaryNumberCheckPolicy="strict" />
          <xs:element name="date" type="xs:date" dfdl:calendarPattern="MMddyyyy" dfdl:encoding="ISO-8859-1"
            dfdl:calendarPatternKind="explicit" dfdl:binaryCalendarRep="packed" dfdl:lengthKind="delimited" dfdl:terminator=";"
            dfdl:binaryPackedSignCodes="C D F C" dfdl:binaryNumberCheckPolicy="strict" dfdl:calendarTimeZone="UTC" />
          <xs:element name="num2" type="xs:decimal" dfdl:encoding="ISO-8859-1" dfdl:representation="binary" dfdl:binaryNumberRep="packed"
            dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:binaryDecimalVirtualPoint="0" dfdl:binaryPackedSignCodes="C D F C"
            dfdl:binaryNumberCheckPolicy="strict" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="timeBinPacked" type="xs:time" dfdl:calendarPattern="HHmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 4 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="packed"
      dfdl:binaryPackedSignCodes="C D F C" dfdl:binaryNumberCheckPolicy="strict" dfdl:calendarTimeZone="UTC"/>
    <xs:element name="timeBinPacked2">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="length" type="xs:int" dfdl:representation="binary"
            dfdl:lengthKind="explicit" dfdl:length="{ 1 }" dfdl:lengthUnits="bytes" />
          <xs:element name="time" type="xs:time" dfdl:calendarPattern="HHmmss" dfdl:calendarPatternKind="explicit"
            dfdl:lengthKind="explicit" dfdl:length="{ ../ex:length }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="packed"
            dfdl:binaryPackedSignCodes="C D F C"  dfdl:binaryNumberCheckPolicy="strict" dfdl:calendarTimeZone="UTC" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="dateTimeBinPacked" type="xs:dateTime" dfdl:calendarPattern="MMddyyyyHHmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 8 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="packed"
      dfdl:binaryPackedSignCodes="C D F C" dfdl:binaryNumberCheckPolicy="strict"/>
    <xs:element name="dateTimeBinPacked2" type="xs:dateTime" dfdl:calendarPattern="MMddyyyyHHmmss" dfdl:calendarPatternKind="explicit"
      dfdl:lengthKind="explicit" dfdl:length="{ 7 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="packed"
      dfdl:binaryPackedSignCodes="C D F C" dfdl:binaryNumberCheckPolicy="lax" dfdl:calendarTimeZone="UTC-05:00"/>

    <xs:element name="dateBinInvalid" type="xs:date" dfdl:calendarPattern="yyyy.MM.dd" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="explicit"
      dfdl:length="{ 4 }" dfdl:lengthUnits="bytes" dfdl:binaryCalendarRep="binarySeconds" dfdl:binaryCalendarEpoch="1970-01-01T00:00:00+00:00"/>

  </tdml:defineSchema>
  
  <tdml:parserTestCase name="TestUnsignedInt" root="Day"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Verification that user's test works for DFDL-677">

    <tdml:document><![CDATA[15]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <Day xsi:type="xs:unsignedInt">15</Day>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="Long1" root="s"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-long - DFDL-5-012R">

    <tdml:document><![CDATA[2,000,000,000]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <s xsi:type="xs:long">2000000000</s>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="BigInteger1" root="mersenne"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-integer - DFDL-5-011R"
    roundTrip="true">

    <tdml:document><![CDATA[686,479,766,013,060,971,498,190,079,908,139,321,726,943,530,014,330,540,939,446,345,918,554,318,339,765,605,212,255,964,066,145,455,497,729,631,139,148,085,803,712,198,799,971,664,381,257,402,829,111,505,715]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <mersenne xsi:type="xs:integer">686479766013060971498190079908139321726943530014330540939446345918554318339765605212255964066145455497729631139148085803712198799971664381257402829111505715</mersenne>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="Integer01" root="integer01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-integer - DFDL-5-011R"
    roundTrip="true">

    <tdml:document><![CDATA[55555555555555555555]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <integer01 xsi:type="xs:integer">55555555555555555555</integer01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="integer2" root="integer02"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-integer - DFDL-5-011R">

    <tdml:document><![CDATA[-123]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <integer02 xsi:type="xs:integer">-123</integer02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="integer_fail" root="integer02"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-integer - DFDL-5-011R">

    <tdml:document><![CDATA[1.23]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:integer</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="integer_fail2" root="integer03"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-integer - DFDL-5-011R">

    <tdml:document><![CDATA[123]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Integer</tdml:error><tdml:error>lengthKind='implicit'</tdml:error><tdml:error>representation='text'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="Int01" root="int01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-int - DFDL-5-013R">

    <tdml:document><![CDATA[2,147,483,647]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <int01 xsi:type="xs:int">2147483647</int01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="int_error" root="int02"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-int - DFDL-5-013R">

    <tdml:document><![CDATA[-2147483649]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>int</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>-2147483649</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="int_error_03" root="int04"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-int - DFDL-5-013R">

    <tdml:document><![CDATA[2147483648]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>int</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>2147483648</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="warning_exercise" root="int03"
    model="SimpleTypes-Embedded.dfdl.xsd"
    description="A warning message should be generated - use of binaryNumperRep 'binary' with representation 'text'- DFDL-2-012R">

    <tdml:document>
      <tdml:documentPart type="byte">00000025</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <int03 xsi:type="xs:int">37</int03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:warnings>
      <tdml:warning /><!-- don't care what message is -->
    </tdml:warnings>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="UnsignedNumbers1" root="limits"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsigned integer types - DFDL-5-014R"
    roundTrip="true">

    <tdml:document><![CDATA[255:65,535:4,294,967,295:18446744073709551615]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <limits>
          <unsigned-byte>255</unsigned-byte>
          <unsigned-short>65535</unsigned-short>
          <unsigned-int>4294967295</unsigned-int>
          <unsigned-long>18446744073709551615</unsigned-long>
        </limits>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedLong_01" root="uL_01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsignedLong - DFDL-5-017R">

    <tdml:document><![CDATA[18446744073709551616]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedLong_02" root="uL_02"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsignedLong - DFDL-5-017R">

    <tdml:document><![CDATA[-1]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>unsignedLong</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>-1</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedLong_03" root="uL_03"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsignedLong - DFDL-5-017R">

    <tdml:document>a</tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:unsignedLong</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="Long2" root="l_2" roundTrip="twoPass"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-long - DFDL-5-012R">

    <tdml:document><![CDATA[1         ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <l_2>1</l_2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="Long3" root="l_3"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-long - DFDL-5-012R">

    <tdml:document><![CDATA[-9223372036854775809]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="Long4" root="l_3"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-long - DFDL-5-012R">

    <tdml:document><![CDATA[+9223372036854775808]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="int_error_02" root="int05"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-int - DFDL-5-012R">

    <tdml:document><![CDATA[5.01]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:int</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>5.01</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="short_01" root="s_1"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-short - DFDL-5-014R">

    <tdml:document><![CDATA[70000]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>short</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>70000</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="short_02" root="s_2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-short - DFDL-5-014R">

    <tdml:document><![CDATA[-32769]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedInt_01" root="uI_01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsignedInt - DFDL-5-018R">

    <tdml:document><![CDATA[7018631476]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>unsignedInt</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>7018631476</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedInt_02" root="uI_02"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsignedInt - DFDL-5-018R">
    <tdml:document><![CDATA[-3]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: negativeUnsignedInt
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uI_03
       Purpose: This test attempts to parse a negative number as an unsignedInt and should fail
-->

  <tdml:parserTestCase name="negativeUnsignedInt"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Section 05 - Simple Types - unsignedInt - DFDL-5-018R">
    <tdml:document><![CDATA[-999]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>unsignedInt</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>-999</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="characterDuringValidUnsignedInt"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid unsigned int - DFDL-5-018R">
    <tdml:document><![CDATA[9a99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:unsignedInt</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="unsignedInt_unparseError"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid unsigned int - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:uI_03>9a99</ex:uI_03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:unsignedInt</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededUnsignedInt"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid unsigned int - DFDL-5-018R">
    <tdml:document><![CDATA[9999 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededUnsignedInt"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid unsigned int - DFDL-5-018R">
    <tdml:document><![CDATA[ 9999]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededUnsignedInt"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a invalid unsigned int - DFDL-5-018R">
    <tdml:document><![CDATA[99 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>99 9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidUnsignedInt
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uI_03
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidUnsignedInt"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid unsigned int - DFDL-5-018R">
    <tdml:document><![CDATA[999 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <uI_03>999</uI_03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidUnsignedInt
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uI_03
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidUnsignedInt"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid unsigned int - DFDL-5-018R">
    <tdml:document><![CDATA[ 999]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <uI_03>999</uI_03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidUnsignedInt
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uI_03
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidUnsignedInt"
    root="uI_03" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid unsigned int - DFDL-5-018R">
    <tdml:document><![CDATA[9 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- int int05 length 4 -->
  <tdml:parserTestCase name="characterDuringValidInt"
    root="int05" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid int - DFDL-5-013R">
    <tdml:document><![CDATA[9a99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:int</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="int_unparseError"
    root="int05" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid int - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:int05>9a99</ex:int05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:int</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededInt"
    root="int05" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid int - DFDL-5-013R">
    <tdml:document><![CDATA[9999 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededInt"
    root="int05" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid int - DFDL-5-013R">
    <tdml:document><![CDATA[ 9999]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededInt"
    root="int05" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a invalid int - DFDL-5-013R">
    <tdml:document><![CDATA[99 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>99 9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidInt
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: int05
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidInt"
    root="int05" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid int - DFDL-5-013R">
    <tdml:document><![CDATA[999 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <int05>999</int05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidInt
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: int05
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidInt"
    root="int05" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid int - DFDL-5-013R">
    <tdml:document><![CDATA[ 999]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <int05>999</int05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidInt
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: int05
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidInt"
    root="int05" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid int - DFDL-5-013R">
    <tdml:document><![CDATA[9 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- integer integer02 length 4 -->
  <tdml:parserTestCase name="characterDuringValidInteger"
    root="integer02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid integer - DFDL-5-011R">
    <tdml:document><![CDATA[9a99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:integer</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="integer_unparseError"
    root="integer02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid integer - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:integer02>9a99</ex:integer02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:integer</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededInteger"
    root="integer02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid integer - DFDL-5-011R">
    <tdml:document><![CDATA[9999 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededInteger"
    root="integer02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid integer - DFDL-5-011R">
    <tdml:document><![CDATA[ 9999]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededInteger"
    root="integer02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a invalid integer - DFDL-5-011R">
    <tdml:document><![CDATA[99 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>99 9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidInteger
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: integer02
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidInteger"
    root="integer02" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid integer - DFDL-5-011R">
    <tdml:document><![CDATA[999 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <integer02>999</integer02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidInteger
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: integer02
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidInteger"
    root="integer02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid integer - DFDL-5-011R">
    <tdml:document><![CDATA[ 999]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <integer02>999</integer02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidInteger
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: integer02
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidInteger"
    root="integer02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid integer - DFDL-5-011R">
    <tdml:document><![CDATA[9 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>


  <!-- long l_4 length 4 -->
  <tdml:parserTestCase name="characterDuringValidLong"
    root="l_4" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid long - DFDL-5-012R">
    <tdml:document><![CDATA[9a99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:long</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="long_unparseError"
    root="l_4" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid long - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:l_4>9a99</ex:l_4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:long</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededLong"
    root="l_4" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid long - DFDL-5-012R">
    <tdml:document><![CDATA[9999 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededLong"
    root="l_4" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid long - DFDL-5-012R">
    <tdml:document><![CDATA[ 9999]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededLong"
    root="l_4" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during an invalid long - DFDL-5-012R">
    <tdml:document><![CDATA[99 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>99 9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidLong
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: l_4
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidLong"
    root="l_4" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid long - DFDL-5-012R">
    <tdml:document><![CDATA[999 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <l_4>999</l_4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidLong
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: l_4
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidLong"
    root="l_4" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid long - DFDL-5-012R">
    <tdml:document><![CDATA[ 999]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <l_4>999</l_4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidLong
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: l_4
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidLong"
    root="l_4" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid long - DFDL-5-012R">
    <tdml:document><![CDATA[9 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- short s_1 length 5 -->
  <tdml:parserTestCase name="characterDuringValidShort"
    root="s_1" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid short - DFDL-5-014R">
    <tdml:document><![CDATA[9a991]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:short</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a991</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="short_unparseError"
    root="s_1" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid short - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:s_1>9a99</ex:s_1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:short</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededShort"
    root="s_1" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid short - DFDL-5-014R">
    <tdml:document><![CDATA[11111 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededShort"
    root="s_1" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid short - DFDL-5-014R">
    <tdml:document><![CDATA[ 11111]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededShort"
    root="s_1" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid invalid short - DFDL-5-014R">
    <tdml:document><![CDATA[11 111]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidShort
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: s_1
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidShort"
    root="s_1" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid short - DFDL-5-014R">
    <tdml:document><![CDATA[9999 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <s_1>9999</s_1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidShort
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: s_1
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidShort"
    root="s_1" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid short - DFDL-5-014R"
    roundTrip="twoPass">
    <tdml:document><![CDATA[ 9999]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
       <s_1>9999</s_1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidShort
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: s_1
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidShort"
    root="s_1" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid short - DFDL-5-014R">
    <tdml:document><![CDATA[99 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>99 9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- byte b_01 length 4 -->
  <tdml:parserTestCase name="characterDuringValidByte"
    root="b_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid byte - DFDL-5-015R">
    <tdml:document><![CDATA[1a27]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:byte</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>1a27</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="byte_unparseError"
    root="b_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid byte - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:b_01>9a99</ex:b_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:byte</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededByte"
    root="b_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid byte - DFDL-5-015R">
    <tdml:document><![CDATA[0012 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededByte"
    root="b_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid byte - DFDL-5-015R">
    <tdml:document><![CDATA[ 0012]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededByte"
    root="b_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during an invalid byte - DFDL-5-015R">
    <tdml:document><![CDATA[00 12]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>00 1</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidByte
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: b_01
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidByte"
    root="b_01" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid byte - DFDL-5-015R">
    <tdml:document><![CDATA[127 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <b_01>127</b_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidByte
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: b_01
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidByte"
    root="b_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid byte - DFDL-5-015R">
    <tdml:document><![CDATA[ 127]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <b_01>127</b_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidByte
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: b_01
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidByte"
    root="b_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid byte - DFDL-5-015R">
    <tdml:document><![CDATA[12 7]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: negativeUnsignedLong
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uL_04
       Purpose: This test attempts to parse a negative number as an unsignedLong and should fail
-->

  <tdml:parserTestCase name="negativeUnsignedLong"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Section 5 - Simple Types - unsignedLong - DFDL-5-017R">
    <tdml:document><![CDATA[-123]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>unsignedLong</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>-123</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="characterDuringValidUnsignedLong"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid unsigned long - DFDL-5-017R">
    <tdml:document><![CDATA[9a99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:unsignedLong</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="unsignedLong_unparseError"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid unsigned long - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:uL_04>9a99</ex:uL_04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:unsignedLong</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededUnsignedLong"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid insigned long - DFDL-5-017R">
    <tdml:document><![CDATA[9999 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededUnsignedLong"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid unsigned long - DFDL-5-017R">
    <tdml:document><![CDATA[ 9999]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededUnsignedLong"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a invalid unsigned long - DFDL-5-017R">
    <tdml:document><![CDATA[99 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>99 9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidUnsignedLong
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uL_04
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidUnsignedLong"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid unsigned long - DFDL-5-017R">
    <tdml:document><![CDATA[999 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uL_04>999</uL_04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidUnsignedLong
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uL_04
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidUnsignedLong"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid unsigned long - DFDL-5-017R">
    <tdml:document><![CDATA[ 999]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uL_04>999</uL_04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidUnsignedLong
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uL_04
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidUnsignedLong"
    root="uL_04" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid unsigned long - DFDL-5-017R">
    <tdml:document><![CDATA[9 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: negativeUnsignedShort
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uS_02
       Purpose: This test attempts to parse a negative number as an unsignedShort and should fail
-->

  <tdml:parserTestCase name="negativeUnsignedShort"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Section 5 - Simple Types - unsignedShort - DFDL-5-019R">
    <tdml:document><![CDATA[-999]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>unsignedShort</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>-999</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="characterDuringValidUnsignedShort"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid unsigned short - DFDL-5-019R">
    <tdml:document><![CDATA[9a99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:unsignedShort</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="unsignedShort_unparseError"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid unsigned short - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:uS_02>9a99</ex:uS_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:unsignedShort</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededUnsignedShort"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid unsigned short - DFDL-5-019R">
    <tdml:document><![CDATA[9999 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededUnsignedShort"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid unsigned short - DFDL-5-019R">
    <tdml:document><![CDATA[ 9999]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededUnsignedShort"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a invalid unsigned short - DFDL-5-019R">
    <tdml:document><![CDATA[99 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>99 9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidUnsignedShort
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uS_02
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidUnsignedShort"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid unsigned short - DFDL-5-019R">
    <tdml:document><![CDATA[999 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uS_02>999</uS_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidUnsignedShort
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uS_02
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidUnsignedShort"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid unsigned short - DFDL-5-019R">
    <tdml:document><![CDATA[ 999]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uS_02>999</uS_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidUnsignedShort
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uS_02
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidUnsignedShort"
    root="uS_02" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid unsigned short - DFDL-5-019R">
    <tdml:document><![CDATA[9 99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: negativeUnsignedByte
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uB_01
       Purpose: This test attempts to parse a negative number as an unsignedByte and should fail
-->

  <tdml:parserTestCase name="negativeUnsignedByte"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Section 5 - Simple Types - unsignedByte - DFDL-5-020R">
    <tdml:document><![CDATA[-99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>unsignedByte</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>-99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="characterDuringValidUnsignedByte"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a non numeric character during a valid unsigned byte - DFDL-5-020R">
    <tdml:document><![CDATA[9a9]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:unsignedByte</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="unsignedByte_unparseError"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid unsigned byte - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:uB_01>9a99</ex:uB_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:unsignedByte</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="whiteSpaceAfterLengthExceededUnsignedByte"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character after an invalid unsigned byte - DFDL-5-020R">
    <tdml:document><![CDATA[127 ]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceBeforeLengthExceededUnsignedByte"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before an invalid unsigned uB_01 - DFDL-5-020R">
    <tdml:document><![CDATA[ 127]]></tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="whiteSpaceDuringLengthExceededUnsignedByte"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid unsigned byte - DFDL-5-020R">
    <tdml:document><![CDATA[1 27]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>1 2</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceAfterValidUnsignedByte
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uB_01
       Purpose: This test demonstrates that trailing whitespace is removed if textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceAfterValidUnsignedByte"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd" roundTrip="twoPass"
    description="Test parsing when encountering a whitespace character after a valid Unsigned byte - DFDL-5-020R">
    <tdml:document><![CDATA[99 ]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uB_01>99</uB_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceBeforeValidUnsignedByte
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uB_01
       Purpose: This test demonstrates that leading whitespace is removed when textNumberCheckPolicy is set to "lax"
-->

  <tdml:parserTestCase name="whiteSpaceBeforeValidUnsignedByte"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character before a valid Unsigned byte - DFDL-5-020R">
    <tdml:document><![CDATA[ 99]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uB_01>99</uB_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: whiteSpaceDuringValidUnsignedByte
        Schema: SimpleTypes-Embedded.dfdl.xsd
          Root: uB_01
       Purpose: This test demonstrates that whitespace is not allowed within numeric values, even with textNumberCheckPolicy="lax"
-->

  <tdml:parserTestCase name="whiteSpaceDuringValidUnsignedByte"
    root="uB_01" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test parsing when encountering a whitespace character during a valid unsigned byte - DFDL-5-020R">
    <tdml:document><![CDATA[9 9]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedShort_01" root="uS_01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsignedShort - DFDL-5-019R">

    <tdml:document><![CDATA[-1]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>unsignedShort</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>-1</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedInt_binary"
    root="uI_01" model="SimpleTypes-binary"
    description="Section 5 Schema types-unsignedInt - DFDL-5-018R">
    <tdml:document>
      <tdml:documentPart type="bits">00000000000000000000000000001000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uI_01>8</uI_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_binary"
    root="dec_01" model="SimpleTypes-binary"
    description="Section 5 Schema types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">0000000000000001</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dec_01>1</dec_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedInt_binary2"
    root="uI_01" model="SimpleTypes-binary"
    description="Section 5 Schema types-unsignedInt - DFDL-5-018R">
    <tdml:document>
      <tdml:documentPart type="bits">10000000000000000000000000001000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uI_01>2147483656</uI_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedShort_binary"
    root="uS_01" model="SimpleTypes-binary"
    description="Section 5 Schema types-unsignedShort - DFDL-5-019R">
    <tdml:document>
      <tdml:documentPart type="bits">0000000000110111</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uS_01>55</uS_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedShort_binary2"
    root="uS_01" model="SimpleTypes-binary"
    description="Section 5 Schema types-unsignedShort - DFDL-5-019R">

    <tdml:document>
      <tdml:documentPart type="bits">1111111111111111</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uS_01>65535</uS_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="signedLong_binary"
    root="l_1" model="SimpleTypes-binary" description="Section 5 Schema types-signedLong - DFDL-5-012R">

    <tdml:document>
      <tdml:documentPart type="bits">0000000000000000000000000000000010000000000000000000000011100101</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <l_1>2147483877</l_1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="signedLong_binary2"
    root="l_1" model="SimpleTypes-binary" description="Section 5 Schema types-signedLong - DFDL-5-012R">

    <tdml:document>
      <tdml:documentPart type="bits">1111111111111111111111111111111111111111111111111111111111001001</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <l_1>-55</l_1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="signedShort_binary"
    root="s_1" model="SimpleTypes-binary" description="Section 5 Schema types-signedShort - DFDL-5-014R">

    <tdml:document>
      <tdml:documentPart type="bits">1111111111001001</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <s_1>-55</s_1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="signedShort_binary2"
    root="s_1" model="SimpleTypes-binary" description="Section 5 Schema types-signedShort - DFDL-5-014R">

    <tdml:document>
      <tdml:documentPart type="bits">0000000111001010</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <s_1>458</s_1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedLong_binary"
    root="uL_01" model="SimpleTypes-binary"
    description="Section 5 Schema types-unsignedShort - DFDL-5-017R">

    <tdml:document>
      <tdml:documentPart type="bits">0000000000000000000000000000000000000000000000000000000000000001</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uL_01>1</uL_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedLong_binary2"
    root="uL_01" model="SimpleTypes-binary"
    description="Section 5 Schema types-unsignedShort - DFDL-5-017R">

    <tdml:document>
      <tdml:documentPart type="bits">0000000000000000000000000000000000000000000000000000000000110111</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uL_01>55</uL_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: integer_binary
       Schema: SimpleTypes-binary
      Purpose: This document contains a binary (byte) representation of an integer
  -->

  <tdml:parserTestCase name="integer_binary"
    root="integer02" model="SimpleTypes-binary"
    description="Section 5 Schema types- integer - DFDL-5-011R">

    <tdml:document>
      <tdml:documentPart type="byte">0000000000000000000000000000000000000000000000010000000000000000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <integer02>18446744073709551616</integer02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: integer_binary_02
       Schema: SimpleTypes-binary
      Purpose: This document contains a binary (byte) representation of an integer
  -->

  <tdml:parserTestCase name="integer_binary_02"
    root="integer02" model="SimpleTypes-binary"
    description="Section 5 Schema types- integer - DFDL-5-011R">

    <tdml:document>
      <tdml:documentPart type="byte">FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <integer02>-18446744073709551616</integer02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: integer_binary_03
       Schema: SimpleTypes-binary
      Purpose: This document contains a binary (bit) representation of an integer
  -->

  <tdml:parserTestCase name="integer_binary_03"
    root="integer03" model="SimpleTypes-binary"
    description="Section 5 Schema types- integer - DFDL-5-011R">

    <tdml:document>
      <tdml:documentPart type="bits">0101</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <integer03>5</integer03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: integer_binary_04
       Schema: SimpleTypes-binary
      Purpose: This document contains a binary (bit) representation of an integer
  -->

  <tdml:parserTestCase name="integer_binary_04"
    root="integer03" model="SimpleTypes-binary"
    description="Section 5 Schema types- integer - DFDL-5-011R">

    <tdml:document>
      <tdml:documentPart type="bits">1011</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <integer03>-5</integer03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedByte_01" root="uB_01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsignedByte - DFDL-5-020R">

    <tdml:document><![CDATA[256]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="unsignedByte_02" root="uB_01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-unsignedByte - DFDL-5-020R">

    <tdml:document><![CDATA[-30]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:parserTestCase name="nonNegativeInteger_text" root="nonNegIntText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
	  <tdml:documentPart type="text" replaceDFDLEntities="true"><![CDATA[184467440737095516158]]></tdml:documentPart>
	</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nonNegIntText>184467440737095516158</nonNegIntText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="nonNegativeInteger_text2" root="nonNegIntText2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R">

    <tdml:document><![CDATA[0]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nonNegIntText2>0</nonNegIntText2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="nonNegativeInteger_text_fail" root="nonNegIntTextFail"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R">

    <tdml:document><![CDATA[-1]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:parserTestCase name="nonNegativeInteger_text_fail2" root="nonNegIntTextFail2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R">

    <tdml:document><![CDATA[1.5]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:nonNegativeInteger</tdml:error>
      <tdml:error>1.5</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="nonNegativeInteger_text_fail3" root="nonNegIntTextFail3"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R">

    <tdml:document><![CDATA[0]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>nonNegativeInteger</tdml:error><tdml:error>lengthKind='implicit'</tdml:error><tdml:error>representation='text'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="nonNegativeInteger_unparseError"
    root="nonNegIntText" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid nonNegativeInteger - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:nonNegIntText>9a99</ex:nonNegIntText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:nonNegativeInteger</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

<!--
    Test name: nonNegativeInteger_bin
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This test demonstrates the binary (byte) representation of a nonNegativeInteger 
-->
  
  <tdml:parserTestCase name="nonNegativeInteger_bin" root="nonNegIntBin"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R">
    

    <tdml:document><tdml:documentPart type="byte">00 00 00 00 00 00 00 00 19 99 99 99 99 99 99 99</tdml:documentPart></tdml:document>
    <!--
    current digit (0): 9
    to add to our total (9*(16^0)): 9
    new total (0+9): 9

    current digit (1): 9
    to add to our total (9*(16^1)): 144
    new total (9+144): 153

    current digit (2): 9
    to add to our total (9*(16^2)): 2304
    new total (153+2304): 2457

    current digit (3): 9
    to add to our total (9*(16^3)): 36864
    new total (2457+36864): 39321

    current digit (4): 9
    to add to our total (9*(16^4)): 589824
    new total (39321+589824): 629145

    current digit (5): 9
    to add to our total (9*(16^5)): 9437184
    new total (629145+9437184): 10066329

    current digit (6): 9
    to add to our total (9*(16^6)): 150994944
    new total (10066329+150994944): 161061273

    current digit (7): 9
    to add to our total (9*(16^7)): 2415919104
    new total (161061273+2415919104): 2576980377

    current digit (8): 9
    to add to our total (9*(16^8)): 38654705664
    new total (2576980377+38654705664): 41231686041

    current digit (9): 9
    to add to our total (9*(16^9)): 618475290624
    new total (41231686041+618475290624): 659706976665

    current digit (10): 9
    to add to our total (9*(16^10)): 9895604649984
    new total (659706976665+9895604649984): 10555311626649

    current digit (11): 9
    to add to our total (9*(16^11)): 158329674399744
    new total (10555311626649+158329674399744): 168884986026393

    current digit (12): 9
    to add to our total (9*(16^12)): 2533274790395904
    new total (168884986026393+2533274790395904): 2702159776422297

    current digit (13): 9
    to add to our total (9*(16^13)): 40532396646334464
    new total (2702159776422297+40532396646334464): 43234556422756761

    current digit (14): 9
    to add to our total (9*(16^14)): 648518346341351424
    new total (43234556422756761+648518346341351424): 691752902764108185

    current digit (15): 1
    to add to our total (1*(16^15)): 1152921504606846976
    new total (691752902764108185+1152921504606846976): 1844674407370955161

    final total: 1844674407370955161

    -->
    
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nonNegIntBin>1844674407370955161</nonNegIntBin>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
<!--
    Test name: nonNegativeInteger_bin2
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This test demonstrates the binary (byte) representation of a nonNegativeInteger 
-->
  
  <tdml:parserTestCase name="nonNegativeInteger_bin2" root="nonNegIntBin2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R">

    <tdml:document><tdml:documentPart type="byte">aa 87 0d</tdml:documentPart></tdml:document>
    <!--
               a      a     8    7  0  d
         1048576  65536  4096  256 16  1

              10     10     8    7  0 13
         1048576  65536  4096  256 16  1

        10485760 655360 32768 1792  0 13 = 11175693
               
    -->
    
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nonNegIntBin2>11175693</nonNegIntBin2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
<!--
    Test name: nonNegativeInteger_bin3
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This test demonstrates the binary (byte) representation of an incredibly large (120-byte) nonNegativeInteger 
-->
  
  <tdml:parserTestCase name="nonNegativeInteger_bin3" root="nonNegIntBin3"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R"
    roundTrip="true">

    <tdml:document><tdml:documentPart type="byte">ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff ff ff fb ff</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nonNegIntBin3>9745311687936079042843746757026091197042946705165743876959785908244667854052986275254933377841396794395998120145029104503341270419780205915373182931007470944525469396117371327135150410607606360284466138738258885090248076626632045692502435376365495969243226354423446700666685349234716179455</nonNegIntBin3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
<!--
    Test name: nonNegativeInteger_bin4
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This test demonstrates that binary representations of nonNegativeIntegers cannot have lengthKind "implicit" 
-->
  
  <tdml:parserTestCase name="nonNegativeInteger_bin4" root="nonNegIntBin4"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 12 - Implicit Length Values - nonNegativeInteger - DFDL-12-060R">

    <tdml:document><tdml:documentPart type="byte">ff ff fb ff ff ff fb</tdml:documentPart></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Length of binary data 'nonNegativeInteger' cannot be determined implicitly.</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
<!--
    Test name: nonNegativeInteger_bin5
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This test demonstrates the binary (bit) representation of a nonNegativeInteger 
-->
  
  <tdml:parserTestCase name="nonNegativeInteger_bin5" root="nonNegIntBin2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R">

    <tdml:document><tdml:documentPart type="bits">10101010 10000111 00001101</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nonNegIntBin2>11175693</nonNegIntBin2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
<!--
    Test name: nonNegativeInteger_bin6
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This test demonstrates the nonNegativeInteger simple type
-->
  
  <tdml:parserTestCase name="nonNegativeInteger_bin6" root="nonNegIntBin5"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-nonNegativeInteger - DFDL-5-016R">

    <tdml:document><tdml:documentPart type="byte"></tdml:documentPart></tdml:document>
    <tdml:errors>
      <tdml:error>Error</tdml:error>
      <tdml:error>Cannot convert</tdml:error>
      <tdml:error>-30</tdml:error>
      <tdml:error>NonNegativeInteger</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:parserTestCase name="decimal_text" root="decimalText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-decimal - DFDL-5-010R"
    roundTrip="true">

    <tdml:document><![CDATA[1.8446744073709551615]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <decimalText>1.8446744073709551615</decimalText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_text2" root="decimalText2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-decimal - DFDL-5-010R"
    roundTrip="false">
    <!-- cannot round trip as the 0.55 would be truncated into length 3 characters when unparsing,
         We don't truncate numbers in DFDL. -->
    <tdml:document><![CDATA[.55]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <decimalText2>0.55</decimalText2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_text3" root="decimalText3"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-decimal - DFDL-5-010R">

    <tdml:document><![CDATA[-1.5]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <decimalText3>-1.5</decimalText3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_text_fail" root="decimalTextFail"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-decimal - DFDL-5-016R">

    <tdml:document><![CDATA[1.5]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>decimal</tdml:error><tdml:error>lengthKind='implicit'</tdml:error><tdml:error>representation='text'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="characterDuringValidDecimal" root="decimalText2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Test parsing when encountering a non numeric character during a valid decimal - DFDL-5-016R">

    <tdml:document><![CDATA[9a9]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:decimal</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a9</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="decimal_unparseError"
    root="decimalText2" model="SimpleTypes-Embedded.dfdl.xsd"
    description="Test unparsing when encountering a non numeric character during a valid decimal - DFDL-5-018R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:decimalText2>9a99</ex:decimalText2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:decimal</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="dateText" root="dateText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-date - DFDL-5-016R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[Wednesday, July 10, '96]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateText xsi:type="xs:date">1996-07-10+00:00</dateText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTextInvalid" root="dateTextInvalid"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-date - DFDL-5-016R"
    roundTrip="twoPass">

    <tdml:document></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Failed to parse xs:date</tdml:error>
      <tdml:error>Wday</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeText" root="timeText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-time - DFDL-5-016R">

    <tdml:document><![CDATA[12:08 PM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeText xsi:type="xs:time">12:08:00+00:00</timeText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeTextInvalid" root="timeTextInvalid"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-date - DFDL-5-016R"
    roundTrip="twoPass">

    <tdml:document></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Failed to parse xs:time</tdml:error>
      <tdml:error>not a time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeText" root="dateTimeText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document><![CDATA[1996.07.10 AD at 15:08:56 GMT-05:00]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeText>1996-07-10T15:08:56-05:00</dateTimeText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeTextInvalid" root="dateTimeTextInvalid"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-date - DFDL-5-016R"
    roundTrip="twoPass">

    <tdml:document></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Failed to parse xs:dateTime</tdml:error>
      <tdml:error>not a date time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binarySeconds' -->
  <tdml:parserTestCase name="dateTimeBin" root="dateTimeBin"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00111110</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin>1977-01-01T00:01:09</dateTimeBin>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin2" root="dateTimeBin2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00111101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: lengthUnits must be 'bytes' when binaryCalendarRep='binarySeconds'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin3" root="dateTimeBin3"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00111101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: binary xs:dateTime must be 32 bits when binaryCalendarRep='binarySeconds'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binarySeconds' with implicit length -->
  <tdml:parserTestCase name="dateTimeBin4" root="dateTimeBin4"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">11111111 11111110 10101110 10000000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin4>1869-12-31T00:05:00+00:00</dateTimeBin4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' -->
  <tdml:parserTestCase name="dateTimeBin5" root="dateTimeBin5"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin5>1985-11-21T10:37:04.001000</dateTimeBin5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' -->
  <tdml:parserTestCase name="dateTimeBin6" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00000000 11111111 11111111 11111111 11111111</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin6>2000-08-03T20:28:06.295000</dateTimeBin6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin7" root="dateTimeBin7"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">11111111 11111111 11111111 11111111 11111010 11011001 10100100 00000000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin7>1869-12-31T00:05:00</dateTimeBin7>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' -->
  <tdml:parserTestCase name="dateTimeBin8" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000001 00000010 01001110 11010001 10100111 00001000 00000000</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Tunable Limit Exceeded Error</tdml:error>
      <tdml:error>not within the limits of</tdml:error>
      <tdml:error>minValidYear</tdml:error>
      <tdml:error>maxValidYear</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' -->
  <tdml:parserTestCase name="dateTimeBin9" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 11100101 10011000 00001111 10110100 10001110 11100111</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin6>9999-12-31T23:59:59.999000</dateTimeBin6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' -->
  <tdml:parserTestCase name="dateTimeBin10" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 11100101 10011000 00001111 10101000 11010110 11101000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin6>9999-12-31T23:47:12</dateTimeBin6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin11" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>milliseconds from the binaryCalendarEpoch is out of range of valid values</tdml:error>
      <tdml:error>millis value less than lower bounds for a Calendar</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' with expected result equal
    to the maximum date allowed, but still out of bounds for maxValidYear tunable  -->
  <tdml:parserTestCase name="dateTimeBin12" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000010 10001101 01000110 11111011 11111100 10101110 01100010 11101000</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Tunable Limit Exceeded Error:</tdml:error>
      <tdml:error>not within the limits of</tdml:error>
      <tdml:error>minValidYear</tdml:error>
      <tdml:error>maxValidYear</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' - expecting an error for being 1 milisecond
    greater than the maximum date allowed -->
  <tdml:parserTestCase name="dateTimeBin13" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">00000010 10001101 01000110 11111011 11111100 10101110 01100010 11101001</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>millis value greater than upper bounds for a Calendar</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' with expected result equal
    to the minimum date allowed, but still out of bounds for minValidYear tunable -->
  <tdml:parserTestCase name="dateTimeBin14" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">11111101 01110001 00110111 10110011 11111100 10101110 01100010 11101000</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Tunable Limit Exceeded Error:</tdml:error>
      <tdml:error>not within the limits of</tdml:error>
      <tdml:error>minValidYear</tdml:error>
      <tdml:error>maxValidYear</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!-- xs:dateTime with binaryCalendarRep='binaryMillieconds' - expecting an error for being 1 milisecond
    less than the minimum date allowed -->
  <tdml:parserTestCase name="dateTimeBin15" root="dateTimeBin6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">11111101 01110001 00110111 10110011 11111100 10101110 01100010 11100111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>millis value less than lower bounds for a Calendar</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin16" root="dateTimeBin8"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00000001</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin8>2018-01-01T09:13:43+09:00</dateTimeBin8>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin17" root="dateTimeBin9"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBin9>2000-01-01T00:00:00.001000-04:00</dateTimeBin9>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin18" root="dateTimeBin10"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00111101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: Failed to parse binaryCalendarEpoch - Format must match the pattern 'uuuu-MM-dd'T'HH:mm:ss' or 'uuuu-MM-dd'T'HH:mm:ssZZZZ'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin19" root="dateTimeBin11"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00111101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: Failed to parse binaryCalendarEpoch: DAY_OF_MONTH=2000, valid range=1..31</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin20" root="dateTimeBin12"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00111101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: lengthKind='delimited' only supported for packed binary formats.</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin21" root="dateTimeBin"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R">

    <tdml:document>
      <tdml:documentPart type="bits">0000000 00000000 00000000 00111110</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Insufficient bits</tdml:error>
      <tdml:error>Needed 32</tdml:error>
      <tdml:error>31 available</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBin22" root="dateTimeBin5"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">0000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Insufficient bits</tdml:error>
      <tdml:error>Needed 64</tdml:error>
      <tdml:error>63 available</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD" root="dateBinBCD"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">12 14 23</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateBinBCD>2023-12-14</dateBinBCD>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD2" root="dateBinBCD2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">12 14 20 23</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateBinBCD2>2023-12-14</dateBinBCD2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD3" root="dateBinBCD"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">12 0F 23</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Invalid low nibble</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD4" root="dateBinBCD3"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">08 17 48</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Character '-' not allowed in dfdl:calendarPattern for xs:date with a binaryCalendarRep of 'bcd'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD5" root="dateBinBCD4"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">0000000</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>The given length (7 bits) must be a multiple of 4 when using binaryCalendarRep='bcd'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD6" root="dateBinBCD"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="bits">0001 0010 0010 0111 1001 1001</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateBinBCD>1999-12-27</dateBinBCD>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD7" root="dateBinBCD5"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">08 17 48</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Character 'E' not allowed in dfdl:calendarPattern for xs:date with a binaryCalendarRep of 'bcd'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD8" root="dateBinBCD6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">08 17 48</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdl:calendarPattern must only contain characters that result in the presentation of digits for xs:date with a binaryCalendarRep of 'bcd'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinBCD9" root="dateBinBCD7"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">38 18</tdml:documentPart>
    </tdml:document>
   <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateBinBCD7>2018-08-07</dateBinBCD7>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinBCD" root="timeBinBCD"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">18 56 03</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeBinBCD>18:56:03</timeBinBCD>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinBCD2" root="timeBinBCD2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="byte">01 45 00 99 87</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeBinBCD2>01:45:00.998000</timeBinBCD2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinBCD3" root="timeBinBCD3"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">01 45 00 99 87</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>calendarPatternKind must be 'explicit' when binaryCalendarRep='bcd'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinBCD4" root="timeBinBCD4"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">18 56 03</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Length of binary data 'Time' cannot be determined implicitly</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinBCD5" root="timeBinBCD5"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">18 56 03 3B</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeBinBCD5>18:56:03</timeBinBCD5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinBCD6" root="timeBinBCD6"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">03 18 56 03</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeBinBCD6>
          <length>3</length>
          <time>18:56:03</time>
        </timeBinBCD6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinBCD" root="dateTimeBinBCD"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">06 14 20 04 18 56 03</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBinBCD>2004-06-14T18:56:03</dateTimeBinBCD>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinBCD2" root="dateTimeBinBCD2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">01 45 00 99 87</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Length of binary data 'DateTime' with binaryCalendarRep='bcd' cannot be determined implicitly</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinBCD3" root="dateTimeBinBCD3"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="false">

    <tdml:document>
      <tdml:documentPart type="byte">06 14 20 04 18 56 03</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBinBCD3>2004-06-14T18:56:03</dateTimeBinBCD3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinBCD4" root="dateTimeBinBCD4"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">03 3B 06 14 20 04 18 56 03 3B 19 3B</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBinBCD4>
          <num1>3</num1>
          <datetime>2004-06-14T18:56:03</datetime>
          <num2>19</num2>
        </dateTimeBinBCD4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinIBM4690Packed" root="dateBinIBM4690Packed"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">12 14 23</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateBinIBM4690Packed>2023-12-14</dateBinIBM4690Packed>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinIBM4690Packed2" root="dateBinIBM4690Packed2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">0000 0000 00000 0000 00</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>The given length (18 bits) must be a multiple of 4 when using binaryCalendarRep='ibm4690Packed'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinIBM4690Packed3" root="dateBinIBM4690Packed"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">D2 14 23</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Expected unsigned data but parsed a negative number</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinIBM4690Packed" root="dateTimeBinIBM4690Packed"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">06 11 30 07 04 15 08</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBinIBM4690Packed>
          <length>6</length>
          <datetime>2007-11-30T04:15:08</datetime>
        </dateTimeBinIBM4690Packed>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinIBM4690Packed2" root="dateTimeBinIBM4690Packed2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="byte">03 20 18 56 09 51 38</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBinIBM4690Packed2>1856-03-20T09:51:38</dateTimeBinIBM4690Packed2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinIBM4690Packed3" root="dateTimeBinIBM4690Packed3"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">01 45 00 99 87</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Length of binary data 'DateTime' with binaryCalendarRep='ibm4690Packed' cannot be determined implicitly</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinIBM4690Packed" root="timeBinIBM4690Packed"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">27 3B 10 32 49 3B 19 3B</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeBinIBM4690Packed>
          <num1>27</num1>
          <time>10:32:49</time>
          <num2>19</num2>
        </timeBinIBM4690Packed>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinIBM4690Packed2" root="timeBinIBM4690Packed2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="byte">01 45 00 99 87</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>calendarPatternKind must be 'explicit' when binaryCalendarRep='ibm4690Packed'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinPacked" root="dateBinPacked"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">01 21 42 3C</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateBinPacked>2023-12-14+00:00</dateBinPacked>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinPacked2" root="dateBinPacked2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">01 21 42 3C</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Property binaryPackedSignCodes is not defined</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinPacked4" root="dateBinPacked4"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">01 4D 3B 10 11 97 8C 3B 06 7C 3B</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateBinPacked4>
          <num1>-14</num1>
          <date>1978-01-01+00:00</date>
          <num2>67</num2>
        </dateBinPacked4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinPacked" root="timeBinPacked"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">00 61 32 7C</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeBinPacked>06:13:27+00:00</timeBinPacked>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="timeBinPacked2" root="timeBinPacked2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">04 00 41 50 8C</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeBinPacked2>
          <length>4</length>
          <time>04:15:08+00:00</time>
        </timeBinPacked2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinPacked" root="dateTimeBinPacked"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">01 22 51 64 51 93 65 0C</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBinPacked xsi:type="xs:dateTime">1645-12-25T19:36:50+00:00</dateTimeBinPacked>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinPacked2" root="dateTimeBinPacked"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="true">

    <tdml:document>
      <tdml:documentPart type="byte">01 22 51 64 51 93 65 0D</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Expected unsigned data but parsed a negative number</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateTimeBinPacked3" root="dateTimeBinPacked2"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="byte">41 53 93 10 62 04 5A</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeBinPacked2>3931-04-15T06:20:45-05:00</dateTimeBinPacked2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="dateBinInvalid" root="dateBinInvalid"
    model="SimpleTypes-binary" description="Section 5 Schema types-dateTime - DFDL-5-016R" >

    <tdml:document>
      <tdml:documentPart type="bits">0000 0000 0011 1101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: binaryCalendarRep='binarySeconds' is not allowed with type Date</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="byte_01" root="b_01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types - byte - DFDL-5-015R">

    <tdml:document><![CDATA[ 128]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="byte_02" root="b_01"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types - byte - DFDL-5-015R">

    <tdml:document><![CDATA[-129]]></tdml:document>
    <tdml:errors>
      <tdml:error>Out of Range</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: double_binary_01
    Schema: SimpleTypes-binary
    Purpose: This document does not have the appropriate number of bits for an implicitly-sized double (64) and should fail parsing 
  -->

  <tdml:parserTestCase name="double_binary_01" root="d_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-double - DFDL-5-009R">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[1010101]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Insufficient bits</tdml:error>
      <tdml:error>64</tdml:error>
      <tdml:error>7</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: double_binary_02
    Schema: SimpleTypes-binary
    Purpose: This document has the appropriate number of bits for an implicitly-sized double (64) and should be parsed accordingly
  -->

  <tdml:parserTestCase name="double_binary_02" root="d_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-double - DFDL-5-009R">
    <tdml:document>
      <tdml:documentPart type="bits">0100000000010100000000000000000000000000000000000000000000000000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <d_01>5.0</d_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

   <tdml:parserTestCase name="decimal_binary_01" root="dec_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00000000075BCD15</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dec_01>123456789</dec_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_binary_02" root="dec_02"
      model="SimpleTypes-binary" description="Section 5 Schema types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00000000075BCD15</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dec_02>1234.56789</dec_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_binary_03" root="dec_03"
      model="SimpleTypes-binary" description="Section 5 Schema types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00000000075BCD15</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dec_03 xsi:type="xs:double">1.23456789E+13</dec_03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_binary_04" root="dec_04"
      model="SimpleTypes-binary" description="Section 5 Simple types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00 00 00 01</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dec_04 xsi:type="xs:double">1E-200</dec_04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_binary_05" root="dec_05"
      model="SimpleTypes-binary" description="Section 5 Simple types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00 00 00 01</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dec_05 xsi:type="xs:double">1E+200</dec_05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

   <tdml:parserTestCase name="decimal_binary_06" root="dec_08"
      model="SimpleTypes-binary" description="Section 5 Simple types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00 01 05 6E 0F 36 A6 44 3D E2 DF 79</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dec_08>1234567890123456789012345</dec_08>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_binary_fail_01" root="dec_06"
      model="SimpleTypes-binary" description="Section 5 Simple types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00 00 00 01</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Tunable Limit Exceeded Error: Property binaryDecimalVirtualPoint 201 is greater than limit 200</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_binary_fail_02" root="dec_07"
      model="SimpleTypes-binary" description="Section 5 Simple types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00 00 00 01</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Tunable Limit Exceeded Error: Property binaryDecimalVirtualPoint -201 is less than limit -200</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="decimal_binary_fail_03" root="dec_01"
      model="SimpleTypes-binary" description="Section 5 Simple types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[1010101]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Insufficient bits</tdml:error>
      <tdml:error>64</tdml:error>
      <tdml:error>7</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

   <tdml:parserTestCase name="decimal_binary_fail_04" root="dec_implicit"
      model="SimpleTypes-binary" description="Section 5 Simple types-decimal - DFDL-5-010R">
    <tdml:document>
      <tdml:documentPart type="byte">00 00 00 01</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: Length of binary data 'decimal' cannot be determined implicitly.</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: double_binary_03
    Schema: SimpleTypes-binary
    Purpose: This document has the appropriate number of bytes for an implicitly-sized double (8) and should be parsed accordingly
  -->
  
  <tdml:parserTestCase name="double_binary_03" root="d_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-double - DFDL-5-009R">
    <tdml:document>
      <tdml:documentPart type="byte">4014000000000000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <d_01>5.0</d_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: double_binary_04
    Schema: SimpleTypes-binary
    Purpose: This document has the appropriate number of bits for an implicitly-sized double (64) but does not actually
             have a numerical value. 
  -->
  
  <tdml:parserTestCase name="double_binary_04" root="d_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-double - DFDL-5-009R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="bits">1111111111111111111111111111111111111111111111111111111111111111</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <d_01>NaN</d_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: double_binary_05
    Schema: SimpleTypes-binary
    Purpose: This document has more than the appropriate number of bits for an implicitly-sized double (64) and should fail parsing 
  -->
  
  <tdml:parserTestCase name="double_binary_05" root="d_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-double - DFDL-5-009R">
    <tdml:document>
      <tdml:documentPart type="bits">100111111111111110000000011111111111111111111111111111111111111111111111111111111111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: double_binary_06
    Schema: SimpleTypes-binary
    Purpose: This document has the appropriate number of bytes for the explicit length and should be parsed accordingly
  -->

  <tdml:parserTestCase name="double_binary_06" root="d_02"
      model="SimpleTypes-binary" description="Section 5 Schema types-double - DFDL-5-009R">
    <tdml:document>
      <tdml:documentPart type="byte">4375EE2A320FF454</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <d_02>9.8765432109876544E16</d_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: double_binary_07
    Schema: SimpleTypes-binary
    Purpose: This document contains a negative number
  -->

  <tdml:parserTestCase name="double_binary_07" root="d_02"
      model="SimpleTypes-binary" description="Section 5 Schema types-double - DFDL-5-009R">
    <tdml:document>
      <tdml:documentPart type="byte">C014000000000000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <d_02>-5.0</d_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: double_07
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This document uses a schema with the textual representation of a double and an implicit length, which is not allowed. 
  -->

  <tdml:parserTestCase name="double_07" root="double"
      model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R">
    <tdml:document>
      <tdml:documentPart type="text">400</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Type</tdml:error>
      <tdml:error>double</tdml:error>
      <tdml:error>lengthKind</tdml:error>
      <tdml:error>implicit</tdml:error>
      <tdml:error>representation</tdml:error>
      <tdml:error>text</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="double_text" root="doubleText2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="true">

    <tdml:document><![CDATA[123.45678901234567]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doubleText2>123.45678901234567</doubleText2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="double_text2_parse_ab" root="doubleTextAB"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <!--  test doesn't round trip because the fixed length is 4, and so .555 
          becomes 0.555 which should fail to unparse since that won't fit in 4 characters
          and we don't truncate numbers. -->
    <tdml:document><![CDATA[.555]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleTextAB>0.555</ex:doubleTextAB>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase> 
  
  <tdml:parserTestCase name="double_text2_parse_ac" root="doubleTextAC"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <!--  test doesn't round trip because the fixed length is 4, and so .555 
          becomes 0.555 which should fail to unparse since that won't fit in 4 characters
          and we don't truncate numbers. -->
    <tdml:document><![CDATA[.555]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleTextAC>0.555</ex:doubleTextAC>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase> 
  
  <tdml:parserTestCase name="double_text2_parse_ub" root="doubleTextUB"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <!--  test doesn't round trip because the fixed length is 4, and so .555 
          becomes 0.555 which should fail to unparse since that won't fit in 4 characters
          and we don't truncate numbers. -->
    <tdml:document><![CDATA[.555]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleTextUB>0.555</ex:doubleTextUB>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase> 
   
    <tdml:parserTestCase name="double_text2_parse_uc" root="doubleTextUC"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <!--  test doesn't round trip because the fixed length is 4, and so .555 
          becomes 0.555 which should fail to unparse since that won't fit in 4 characters
          and we don't truncate numbers. -->
    <tdml:document><![CDATA[.555]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleTextUC>0.555</ex:doubleTextUC>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase> 
  
  <tdml:unparserTestCase name="double_text2_unparse_ab" root="doubleText5AB"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleText5AB>0.555</ex:doubleText5AB>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>0.555</tdml:document>
  </tdml:unparserTestCase>
  
  <tdml:unparserTestCase name="double_text2_unparse_ac" root="doubleText5AC"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleText5AC>0.555</ex:doubleText5AC>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>0.555</tdml:document>
  </tdml:unparserTestCase>
  
  <tdml:unparserTestCase name="double_text2_unparse_ub" root="doubleText5UB"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleText5UB>0.555</ex:doubleText5UB>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>0.555</tdml:document>
  </tdml:unparserTestCase>
  
  <tdml:unparserTestCase name="double_text2_unparse_uc" root="doubleText5UC"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleText5UC>0.555</ex:doubleText5UC>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>0.555</tdml:document>
  </tdml:unparserTestCase>
  
  <tdml:unparserTestCase name="double_text2_unparse_fail_ab" root="doubleTextAB"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleTextAB>0.555</ex:doubleTextAB>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>truncate</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>
  
  <tdml:unparserTestCase name="double_text2_unparse_fail_ac" root="doubleTextAC"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleTextAC>0.555</ex:doubleTextAC>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>truncate</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>
  
  <tdml:unparserTestCase name="double_text2_unparse_fail_ub" root="doubleTextUB"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleTextUB>0.555</ex:doubleTextUB>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>truncate</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>
  
  <tdml:unparserTestCase name="double_text2_unparse_fail_uc" root="doubleTextUC"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="false">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleTextUC>0.555</ex:doubleTextUC>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>truncate</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="double_text3" root="doubleText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R">

    <tdml:document><![CDATA[-1.5]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doubleText>-1.5</doubleText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="double_text4" root="doubleText3"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-double - DFDL-5-009R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[123.45678901234567899]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doubleText3>123.45678901234568</doubleText3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  <tdml:parserTestCase name="characterDuringValidDouble" root="doubleText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Test parsing when encountering a non numeric character during a valid double - DFDL-5-009R">

    <tdml:document><![CDATA[9a99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:double</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="double_unparseError" root="doubleText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Test unparsing when encountering a non numeric character during a valid double - DFDL-5-009R">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doubleText>9a99</ex:doubleText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:double</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="float_text" root="floatText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Simple type-float - DFDL-5-008R"
    roundTrip="false">
    <!-- cannot round trip as the 0.555 would get truncated to 0.55 on unparsing, and 
    we don't truncate numbers in DFDL. -->
    <tdml:document><![CDATA[.555]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <floatText>0.555</floatText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="float_text2" root="floatText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Simple type-float - DFDL-5-008R">

    <tdml:document><![CDATA[-2.7]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <floatText>-2.7</floatText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="float_text3" root="floatText2"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Simple type-float - DFDL-5-008R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[123456789012345678901]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <floatText2>1.2345679E20</floatText2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="float_text_fail" root="floatTextFail"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Simple type-float - DFDL-5-008R">

    <tdml:document><![CDATA[1.5]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>float</tdml:error><tdml:error>lengthKind='implicit'</tdml:error><tdml:error>representation='text'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="characterDuringValidFloat" root="floatText"
    model="SimpleTypes-Embedded.dfdl.xsd" description="Test parsing when encountering a non numeric character during a valid float - DFDL-5-008R">

    <tdml:document><![CDATA[9a99]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:float</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>9a99</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="float_unparseError" root="floatText" roundTrip="false"
      model="SimpleTypes-Embedded.dfdl.xsd" description="Test unparsing when encountering a non numeric character during a valid float">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:floatText>9a99</ex:floatText>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:float</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <!--
    Test name: float_binary_01
    Schema: SimpleTypes-binary
    Purpose: This document has the appropriate number of bits for an implicitly-sized float (32) and should be parsed accordingly
  -->

  <tdml:parserTestCase name="float_binary_01" root="float_01"
      model="SimpleTypes-binary" description="Section 5 Simple types-float - DFDL-5-008R">
    <tdml:document>
      <tdml:documentPart type="bits">01000000 10100000 00000000 00000000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <float_01>5.0</float_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: float_binary_02
    Schema: SimpleTypes-binary
    Purpose: This document has the appropriate number of bytes for an implicitly-sized float (4) and should be parsed accordingly
  -->

  <tdml:parserTestCase name="float_binary_02" root="float_01"
      model="SimpleTypes-binary" description="Section 5 Simple types-float - DFDL-5-008R">
    <tdml:document>
      <tdml:documentPart type="byte">40A00000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <float_01>5.0</float_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: float_binary_03
    Schema: SimpleTypes-binary
    Purpose: This document has the appropriate number of bits for an implicitly-sized float (32) but does not actually have a numerical value. 
  -->

  <tdml:parserTestCase name="float_binary_03" root="float_01"
      model="SimpleTypes-binary" description="Section 5 Simple types-float - DFDL-5-008R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="bits">11111111111111111111111111111111</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <float_01>NaN</float_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: float_binary_04
    Schema: SimpleTypes-binary
    Purpose: This document has the appropriate number of bytes for the explicit length and should be parsed accordingly
  -->

  <tdml:parserTestCase name="float_binary_04" root="float_02"
      model="SimpleTypes-binary" description="Section 5 Simple types-float - DFDL-5-008R">
    <tdml:document>
      <tdml:documentPart type="byte">60D629D4</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <float_02>1.2345679E20</float_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: float_binary_05
    Schema: SimpleTypes-binary
    Purpose: This document contains a negative number
  -->

  <tdml:parserTestCase name="float_binary_05" root="float_02"
      model="SimpleTypes-binary" description="Section 5 Simple types-float - DFDL-5-008R">
    <tdml:document>
      <tdml:documentPart type="byte">C0A00000</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <float_02>-5.0</float_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: float_binary_fail_01
    Schema: SimpleTypes-binary
    Purpose: This document does not have the appropriate number of bits for an implicitly-sized float (32) and should fail parsing 
  -->

  <tdml:parserTestCase name="float_binary_fail_01" root="float_01"
      model="SimpleTypes-binary" description="Section 5 Simple types-float - DFDL-5-008R">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[1010101]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Insufficient bits</tdml:error>
      <tdml:error>32</tdml:error>
      <tdml:error>7</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: float_binary_fail_02
    Schema: SimpleTypes-binary
    Purpose: This document has more than the appropriate number of bits for an implicitly-sized float (32) and should fail parsing 
  -->

  <tdml:parserTestCase name="float_binary_fail_02" root="float_01"
      model="SimpleTypes-binary" description="Section 5 Simple types-float - DFDL-5-008R">
    <tdml:document>
      <tdml:documentPart type="bits">10011111111111111000000001111111111111111111111111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: float_binary_fail_03
    Schema: SimpleTypes-binary
    Purpose: This document has an invalid explicit length and should fail
  -->

  <tdml:parserTestCase name="float_binary_fail_03" root="float_03"
      model="SimpleTypes-binary" description="Section 5 Simple types-float - DFDL-5-008R">
    <tdml:document>
      <tdml:documentPart type="byte">4375EE2A00000000</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>binary xs:float must be 32 bits. Length in bits was 64</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: byte_binary_01
    Schema: SimpleTypes-binary
    Purpose: This document demonstrates the implicit length of a byte (8 bits), represented by bits 
  -->
  
  <tdml:parserTestCase name="byte_binary_01" root="b_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="bits">00001101</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <b_01>13</b_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: byte_binary_02
    Schema: SimpleTypes-binary
    Purpose: This document has more bits than the implicit length of a byte and should fail
  -->
  
  <tdml:parserTestCase name="byte_binary_02" root="b_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="bits">00001101111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: byte_binary_03
    Schema: SimpleTypes-binary
    Purpose: This document has less bits than the implicit length of a byte and should fail
  -->
  
  <tdml:parserTestCase name="byte_binary_03" root="b_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="bits">11111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Insufficient bits</tdml:error>
      <tdml:error>8</tdml:error>
      <tdml:error>5</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: byte_binary_04
    Schema: SimpleTypes-binary
    Purpose: This document contains a text representation of 8 bits, which is the correct implicit length of a byte and should be parsed accordingly
  -->
  
  <tdml:parserTestCase name="byte_binary_04" root="b_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="text">a</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <b_01>97</b_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: byte_binary_05
    Schema: SimpleTypes-binary
    Purpose: This document contains a byte representation of 8 bits, which is the correct implicit length of a byte and should be parsed accordingly
             0x28 = 00101000 = 40
  -->
  
  <tdml:parserTestCase name="byte_binary_05" root="b_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="byte">28</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <b_01>40</b_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: byte_implicit
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This document attempts to parse a textual representation of byte with implicit length and should fail
  -->
  
  <tdml:parserTestCase name="byte_implicit" root="byte"
      model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="bits">11010101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Type</tdml:error>
      <tdml:error>byte</tdml:error>
      <tdml:error>lengthKind</tdml:error>
      <tdml:error>implicit</tdml:error>
      <tdml:error>representation</tdml:error>
      <tdml:error>text</tdml:error>    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: ubyte_binary_01
    Schema: SimpleTypes-binary
    Purpose: This document demonstrates the implicit length of an unsigned byte (8 bits), represented by bits 
  -->
  
  <tdml:parserTestCase name="ubyte_binary_01" root="uB_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="bits">00001101</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uB_01>13</uB_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: ubyte_binary_02
    Schema: SimpleTypes-binary
    Purpose: This document has more bits than the implicit length of a byte and should fail
  -->
  
  <tdml:parserTestCase name="ubyte_binary_02" root="uB_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="bits">00001101111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: ubyte_binary_03
    Schema: SimpleTypes-binary
    Purpose: This document has less bits than the implicit length of a byte and should fail
  -->
  
  <tdml:parserTestCase name="ubyte_binary_03" root="uB_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="bits">11111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Insufficient bits</tdml:error>
      <tdml:error>8</tdml:error>
      <tdml:error>5</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: ubyte_binary_04
    Schema: SimpleTypes-binary
    Purpose: This document contains a text representation of 8 bits, which is the correct implicit length of a byte and should be parsed accordingly
  -->
  
  <tdml:parserTestCase name="ubyte_binary_04" root="uB_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="text">a</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uB_01>97</uB_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: ubyte_binary_05
    Schema: SimpleTypes-binary
    Purpose: This document contains a byte representation of 8 bits, which is the correct implicit length of a byte and should be parsed accordingly
             0x28 = 00101000 = 40
  -->
  
  <tdml:parserTestCase name="ubyte_binary_05" root="uB_01"
      model="SimpleTypes-binary" description="Section 5 Schema types-byte - DFDL-5-015R">
    <tdml:document>
      <tdml:documentPart type="byte">28</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <uB_01>40</uB_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: ubyte_implicit
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This document attempts to parse a textual representation of an unsignedByte with implicit length and should fail
  -->
  
  <tdml:parserTestCase name="ubyte_implicit" root="uByte"
      model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types- unsignedByte - DFDL-5-020R">
    <tdml:document>
      <tdml:documentPart type="bits">11010101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Type</tdml:error>
      <tdml:error>unsignedByte</tdml:error>
      <tdml:error>lengthKind</tdml:error>
      <tdml:error>implicit</tdml:error>
      <tdml:error>representation</tdml:error>
      <tdml:error>text</tdml:error>    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: int_binary_01
    Schema: SimpleTypes-binary
    Purpose: This document demonstrates the implicit length of an int (32 bits), represented by bits 
  -->
  
  <tdml:parserTestCase name="int_binary_01" root="int01"
      model="SimpleTypes-binary" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00001101</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <int01>13</int01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: int_binary_02
    Schema: SimpleTypes-binary
    Purpose: This document has more bits than the implicit length of an int and should fail
  -->
  
  <tdml:parserTestCase name="int_binary_02" root="int01"
      model="SimpleTypes-binary" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:document>
      <tdml:documentPart type="bits">00000000 00000000 00000000 00001101111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: int_binary_03
    Schema: SimpleTypes-binary
    Purpose: This document has less bits than the implicit length of an int and should fail
  -->
  
  <tdml:parserTestCase name="int_binary_03" root="int01"
      model="SimpleTypes-binary" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:document>
      <tdml:documentPart type="bits">11111</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Insufficient bits</tdml:error>
      <tdml:error>32</tdml:error>
      <tdml:error>5</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: int_binary_04
    Schema: SimpleTypes-binary
    Purpose: This document contains a text representation of 32 bits, which is the correct implicit length of an int and should be parsed accordingly
  -->
  
  <tdml:parserTestCase name="int_binary_04" root="int01"
      model="SimpleTypes-binary" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:document>
      <tdml:documentPart type="text">000a</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <int01>808464481</int01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: int_binary_05
    Schema: SimpleTypes-binary
    Purpose: This document contains a byte representation of 32 bits, which is the correct implicit length of an int and should be parsed accordingly
  -->
  
  <tdml:parserTestCase name="int_binary_05" root="int01"
      model="SimpleTypes-binary" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:document>
      <tdml:documentPart type="byte">00110028</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <int01>1114152</int01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

   <!--
    Test name: binaryInt_unparseError
    Schema: SimpleTypes-binary
    Purpose: Unparse a binary int with a value that is too large to be an xs:int
  -->
  
  <tdml:unparserTestCase name="binaryInt_unparseError" root="int02" roundTrip="false"
      model="SimpleTypes-binary" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:int02>7089904312036126320</ex:int02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a valid xs:int</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <!--
    Test name: int_implicit
    Schema: SimpleTypes-Embedded.dfdl.xsd
    Purpose: This document uses a schema with the textual representation of an int and an implicit length, which is not allowed. 
  -->
  
  <tdml:parserTestCase name="int_implicit" root="int"
      model="SimpleTypes-Embedded.dfdl.xsd" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:document>
      <tdml:documentPart type="text">1000</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Type</tdml:error>
      <tdml:error>int</tdml:error>
      <tdml:error>lengthKind</tdml:error>
      <tdml:error>implicit</tdml:error>
      <tdml:error>representation</tdml:error>
      <tdml:error>text</tdml:error>    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: integer_binary_01
       Schema: SimpleTypes-binary
      Purpose: This document contains a binary representation of an integer using implicit length, which is not allowed
  -->
  
  <tdml:parserTestCase name="integer_binary_01" root="integer01"
      model="SimpleTypes-binary" description="Section 5 Schema types - integer - DFDL-5-011R">
    <tdml:document>
      <tdml:documentPart type="bits">01010101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Length of binary data 'integer' cannot be determined implicitly</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: nonNegInt_binary_01
       Schema: SimpleTypes-binary
      Purpose: This document contains a binary representation of an integer using implicit length, which is not allowed
  -->
  
  <tdml:parserTestCase name="nonNegInt_binary_01" root="posint01"
      model="SimpleTypes-binary" description="Section 5 Schema types - non negative integer - DFDL-5-016R">
    <tdml:document>
      <tdml:documentPart type="bits">01010101</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Length of binary data</tdml:error>
      <tdml:error>cannot be determined implicitly</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_01
    Schema: SimpleTypes-binary
    Purpose: This document demonstrates the use of the hexBinary simple type 
  -->

  <tdml:parserTestCase name="hexBinary_01" root="hb_01"
      model="SimpleTypes-binary" description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[a1b1c1d1]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hb_01>A1B1C1D1</hb_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
 
  <!--
    Test name: hexBinary_rep
    Schema: HexBinary
    Purpose: This document demonstrates that when a type is hexBinary, the representation is assumed to be
             binary, and the actual 'representation' property is ignored.
  -->

  <tdml:parserTestCase name="hexBinary_rep" root="hB_rep"
      model="HexBinary" description="Section 13 Simple Types - hexBinary - DFDL-13-018R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[a1b1c1d1]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_rep>A1B1C1D1</hB_rep>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

   <!--
    Test name: hexBinary_fromString
    Schema: HexBinary
     Purpose: This test demonstrates that a string of valid hexBinary characters can be implicitly converted to
     hexBinary.
  -->

  <tdml:parserTestCase name="hexBinary_fromString" root="hB_fromString"
      model="HexBinary" description="Section 13 Simple Types - hexBinary - DFDL-13-018R" roundTrip="true">
    <tdml:document><tdml:documentPart type="byte"></tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_fromString>DEADBEEF</hB_fromString>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

   <!--
    Test name: hexBinary_unparseError
    Schema: SimpleTypes-binary
    Purpose: Attempt to unparse an invalid hexBinary value
  -->

  <tdml:unparserTestCase name="hexBinary_unparseError" root="hB_fromString" roundTrip="false"
      model="HexBinary" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:hB_fromString>DEADBEE</ex:hB_fromString>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>even number of characters</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:defineSchema name="SimpleTypes-padding">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" representation="text"
      lengthUnits="characters" encoding="utf-8" byteOrder="bigEndian" 
      textStringPadCharacter="X" textStringJustification="left" textTrimKind="padChar" textPadKind="padChar"
      textNumberJustification="left" textNumberPadCharacter="#" />

    <xs:element name="string" dfdl:lengthKind="explicit" dfdl:length="29" type="xs:string" />
    <xs:element name="string2" dfdl:lengthKind="delimited" type="xs:string" />

    <xs:element name="string3" dfdl:textStringPadCharacter="%NAK;" dfdl:lengthKind="delimited" type="xs:string" />
    <xs:element name="string4" dfdl:textStringPadCharacter="%HT;" dfdl:lengthKind="delimited" type="xs:string" />
    
    <xs:element name="string5">
      <xs:complexType>
        <xs:sequence dfdl:separator="/">
          <xs:element name="first" type="ex:padded" />
          <xs:element name="second" type="xs:string" dfdl:textStringPadCharacter="_" dfdl:textStringJustification="center" dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="string6">
      <xs:complexType>
        <xs:sequence dfdl:separator="-">
          <xs:element name="first" type="ex:padded2" />
          <xs:element name="second" type="xs:string" dfdl:textStringPadCharacter="_" dfdl:textStringJustification="left" dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:simpleType name="padded" dfdl:textStringJustification="center" dfdl:textStringPadCharacter="-" dfdl:lengthKind="delimited">
      <xs:restriction base="xs:string" />
    </xs:simpleType>
    
    <xs:simpleType name="padded2" dfdl:textStringJustification="right" dfdl:textStringPadCharacter="_" dfdl:lengthKind="delimited">
      <xs:restriction base="xs:string" />
    </xs:simpleType>

    <xs:element name="string7" dfdl:lengthUnits="bytes" dfdl:textStringPadCharacter="%HT;%CR;" dfdl:lengthKind="delimited" type="xs:string" />
    <xs:element name="string8" dfdl:lengthUnits="characters" dfdl:textStringPadCharacter="o0" dfdl:lengthKind="delimited" type="xs:string" />
    
    <xs:element name="string9" dfdl:textTrimKind="none" dfdl:lengthKind="delimited" type="xs:string" />
    
    <xs:element name="int1" dfdl:lengthKind="explicit" dfdl:length="7" type="xs:int"
    dfdl:textNumberPattern="0000000" />
    <xs:element name="int2" dfdl:lengthKind="delimited" type="xs:int" />
    
    <xs:element name="intseq">
      <xs:complexType>
        <xs:sequence dfdl:separator=".">
          <xs:element name="int3" type="xs:int" dfdl:textNumberPadCharacter="=" dfdl:textNumberJustification="left" dfdl:lengthKind="delimited" />
          <xs:element name="int4" type="xs:int" dfdl:textNumberPadCharacter="-" dfdl:textNumberJustification="left" dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="numseq">
      <xs:complexType>
        <xs:sequence dfdl:separator="~">
          <xs:element name="one" type="xs:int" dfdl:textNumberPadCharacter="." dfdl:textNumberJustification="right" dfdl:lengthKind="delimited" />
          <xs:element name="two" type="xs:unsignedShort" dfdl:textNumberPadCharacter="-" dfdl:textNumberJustification="center" dfdl:lengthKind="delimited" />
          <xs:element name="three" type="xs:float" dfdl:textNumberPadCharacter="." dfdl:textNumberJustification="left" dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:simpleType name="int5" dfdl:textNumberJustification="right" dfdl:textNumberPadCharacter="_" dfdl:lengthKind="delimited">
      <xs:restriction base="xs:int" />
    </xs:simpleType>
    
    <xs:element name="int6" type="tns:int5" />
    
    <dfdl:defineEscapeScheme name="table1">
      <dfdl:escapeScheme escapeCharacter='/'
        escapeKind="escapeCharacter" escapeEscapeCharacter="[" extraEscapedCharacters="" generateEscapeBlock="whenNeeded"/>
    </dfdl:defineEscapeScheme>
        
    <xs:element name="string10" type="xs:string" dfdl:lengthKind="delimited" dfdl:textStringJustification="center"
      dfdl:textStringPadCharacter="\" dfdl:escapeSchemeRef="ex:table1" />
          
    <xs:element name="nil" nillable="true" dfdl:nilKind="literalValue" dfdl:nilValue="o" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="7"
      dfdl:textStringPadCharacter="/" dfdl:textStringJustification="center" />
    
    <xs:element name="nil2" nillable="true" dfdl:nilKind="literalValue" dfdl:nilValue="o" type="xs:string" dfdl:lengthKind="delimited"
      dfdl:textStringPadCharacter="/" dfdl:textStringJustification="center" />
    
    <xs:element name="seq">
      <xs:complexType>
        <xs:sequence dfdl:separator=".">
          <xs:element name="string11" dfdl:textTrimKind="padChar" dfdl:textStringJustification="left" dfdl:textStringPadCharacter="o"
            dfdl:lengthKind="delimited" type="xs:string" />
          <xs:element name="string12" dfdl:textTrimKind="padChar" dfdl:textStringJustification="right" dfdl:textStringPadCharacter="o"
            dfdl:lengthKind="delimited" type="xs:string" />
          <xs:element name="string13" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center" dfdl:textStringPadCharacter="o"
            dfdl:lengthKind="delimited" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>    

    <!-- intentional invalid " " for textStringPadCharacter -->
    <xs:element name="string11" dfdl:lengthKind="delimited" type="xs:string">
      <xs:annotation>
        <xs:appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:element>
            <dfdl:property name="textStringPadCharacter"><![CDATA[ ]]></dfdl:property>
          </dfdl:element>
        </xs:appinfo>
      </xs:annotation>
    </xs:element>
    <!-- intentional invalid "%" for textStringPadCharacter -->
    <xs:element name="string12" dfdl:textStringPadCharacter="%" dfdl:lengthKind="delimited" type="xs:string" />

  </tdml:defineSchema>
  
  <!--
    Test name: literalChar_padding
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of a string literal for a text string pad character
  -->

  <tdml:parserTestCase name="literalChar_padding" root="string"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R"
      >
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[remove padding pleaseXXXXXXXX]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <string>remove padding please</string>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: literalChar_padding2
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of a string literal for a text string pad character
  -->

  <tdml:parserTestCase name="literalChar_padding2" root="string2"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[remove padding pleaseXXXXXXXX]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <string2>remove padding please</string2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: charEntity_padding1
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of a character entity for a text string pad character
  -->

  <tdml:parserTestCase name="charEntity_padding1" root="string3"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[72 65 6D 6F 76 65 20 70 61 64 64 69 6E 67 20 70 6C 65 61 73 65 15 15 15 15 15]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <string3>remove padding please</string3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: charEntity_padding2
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of a character entity for a text string pad character
  -->

  <tdml:parserTestCase name="charEntity_padding2" root="string4"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[72 65 6D 6F 76 65 20 70 61 64 64 69 6E 67 20 70 6C 65 61 73 65 09 09 09 09]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <string4>remove padding please</string4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: charEntity_padding3
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates that it is a schema definition error if more than one byte value entity
             is specified for the textStringPadCharacter when lengthUnits="bytes"

  -->

  <tdml:parserTestCase name="charEntity_padding3" root="string7"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[72 65 6D 6F 76 65 20 70 61 64 64 69 6E 67 20 70 6C 65 61 73 65 09 0D 09 0D]]></tdml:documentPart>
    </tdml:document>
      <tdml:errors>
        <tdml:error>Schema Definition Error</tdml:error>
        <tdml:error>Length of string must be exactly 1 character</tdml:error>
      </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: literalChar_padding3
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of a string literal for a text string pad character
        within a simpleType contained in a sequence (center justified)
  -->

  <tdml:parserTestCase name="literalChar_padding3" root="string5"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[---------first---------/________second________]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <string5>
          <first>first</first>
          <second>second</second>
        </string5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: literalChar_padding4
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of a string literal for a text string pad character
        within a simpleType contained in a sequence (left and right justified)
  -->

  <tdml:parserTestCase name="literalChar_padding4" root="string6"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[_______________first-second________]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <string6>
          <first>first</first>
          <second>second</second>
        </string6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: literalChar_padding5
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of a string literal for a text string pad character
        within a simpleType contained in a sequence (left and right justified)
  -->

  <tdml:parserTestCase name="literalChar_padding5" root="string8"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[stringo0o0o0o0o0o0]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Length of string must be exactly 1 character</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: literalChar_padding6
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of textTrimKind = none to prevent trimming
  -->

  <tdml:parserTestCase name="literalChar_padding6" root="string9"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[remove padding pleaseXXXXXXXX]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <string9>remove padding pleaseXXXXXXXX</string9>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: number_padding
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of padding with numbers
  -->

  <tdml:parserTestCase name="number_padding" root="int1"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textNumberPadCharacter DFDL-13-047R"
    roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[12345##]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <int1>12345</int1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: number_padding2
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of padding with numbers
  -->

  <tdml:parserTestCase name="number_padding2" root="int2"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textNumberPadCharacter DFDL-13-047R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[12345############################]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <int2>12345</int2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: number_padding3
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of padding with numbers
  -->

  <tdml:parserTestCase name="number_padding3" root="intseq"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textNumberPadCharacter DFDL-13-047R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[123====.456-----]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <intseq>
          <int3>123</int3>
          <int4>456</int4>
        </intseq>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: number_padding4
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of padding with multiple number types and justifications
  -->

  <tdml:parserTestCase name="number_padding4" root="numseq"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textNumberPadCharacter DFDL-13-047R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[......55~-----6800-----~49.......]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <numseq>
          <one>55</one>
          <two>6800</two>
          <three>49.0</three>
        </numseq>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: number_padding5
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of padding with numbers
  -->

  <tdml:parserTestCase name="number_padding5" root="int6"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textNumberPadCharacter DFDL-13-047R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[______5]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
          <int6>5</int6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: padding_escape
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of padding with escape characters
  -->

  <tdml:parserTestCase name="padding_escape" root="string10"
      model="SimpleTypes-padding" description="Section 7 - On parsing, the escape scheme is applied after padding characters are trimmed DFDL-7-089R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text">\\\word/\\\</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
          <string10>word</string10>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: padding_nil
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of padding with nils
  -->

  <tdml:parserTestCase name="padding_nil" root="nil"
      model="SimpleTypes-padding" description="Spec errata - On parsing the element value is nil if
      the trimmed data matches one of the literal strings in the list">
    <tdml:document>
      <tdml:documentPart type="text">///o///</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
          <nil xsi:nil="true"></nil>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: padding_nil2
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of padding with nils
  -->

  <tdml:parserTestCase name="padding_nil2" root="nil2"
      model="SimpleTypes-padding" description="Spec errata - On parsing the element value is nil if
      the trimmed data matches one of the literal strings in the list"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text">///o///</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
          <nil2 xsi:nil="true"></nil2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: padding_empty
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates that padding cannot be the empty string
  -->

  <tdml:parserTestCase name="padding_empty" root="string11"
      model="SimpleTypes-padding" description="DFDL-13-042R">
    <tdml:document>
      <tdml:documentPart type="text">word</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>textStringPadCharacter</tdml:error>
      <tdml:error>whitespace</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>


  <!--
    Test name: justification_1
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates how padding is trimmed when a pad character is found within the string
  -->

  <tdml:parserTestCase name="justification_1" root="seq"
      model="SimpleTypes-padding" description="Section 5 - Simple Types - textStringJustification DFDL-13-041R"
      roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text">oregano.oregano.oregano</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <seq>
          <string11>oregan</string11>
          <string12>regano</string12>
          <string13>regan</string13>
        </seq>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: percentPadding
    Schema: SimpleTypes-padding
    Purpose: This document demonstrates the use of a percent sign for textStringPadCharacter and throws an error.
  -->

  <tdml:parserTestCase name="percentPadding" root="string12"
      model="SimpleTypes-padding" description="Section 13 Simple Types - textStringPadCharacter DFDL-13-042R"
      >
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[remove padding please%%%%%%%%%%]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Invalid DFDL Entity (%) found</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="dateTimeSchemaTNR">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="tns:GeneralFormat" initiator="" terminator="" leadingSkip="0" 
                trailingSkip="0"  textBidi="no" floating="no"   encoding="utf-8" 
                byteOrder="bigEndian" alignment="1" alignmentUnits="bytes" fillByte="f" 
                occursCountKind="implicit" 
                truncateSpecifiedLengthString="no" ignoreCase="no"
                representation="text"  textPadKind="none"
                textTrimKind="none"  lengthKind="delimited" escapeSchemeRef=""
                textOutputMinLength="30" lengthUnits="bytes"
                textStringJustification="left"  textStringPadCharacter="%SP;"
                textCalendarJustification="left"  textCalendarPadCharacter="%SP;"
                nilValueDelimiterPolicy="both"  emptyValueDelimiterPolicy="none" 
                documentFinalTerminatorCanBeMissing="no" initiatedContent="no"
                sequenceKind="ordered" 
                separatorSuppressionPolicy="never" 
                calendarPatternKind="implicit" calendarPattern="yyyymmddhhmmss" calendarCheckPolicy="lax" 
                calendarTimeZone="UTC" calendarObserveDST="yes" 
                calendarFirstDayOfWeek="Wednesday" calendarDaysInFirstWeek="7" calendarCenturyStart="50" 
                calendarLanguage="it-IT"
                />

    <xs:element name="date" type="xs:date" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="delimited" />

  </tdml:defineSchema>
  
  <tdml:defineSchema name="dateTimeSchema">
  
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" />

<!--
     xs:date      yyyy-MM-dd
     xs:dateTime  yyyy-MM-dd'T'HH:mm:ss
     xs:time      HH:mm:ssZZZ
-->
    
    <xs:element name="dateImp" type="xs:date" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="delimited" />
    <xs:element name="date01" type="xs:date" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="'Today is the 'dd'th day of 'MMMM', year 'yyyy"
                dfdl:lengthKind="explicit" dfdl:length="43" />
    <xs:element name="date01b" type="xs:date" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="'Today is the 'dd'th day of 'MMM', year 'Y"
                dfdl:lengthKind="explicit" dfdl:length="38" />
    <xs:element name="date02" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="explicit" dfdl:length="10" />
    <xs:element name="date03" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="explicit" dfdl:length="11"
    			dfdl:textTrimKind="padChar" dfdl:textPadKind="padChar" />
    <xs:element name="date04" type="xs:date" dfdl:calendarCheckPolicy="strict" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="explicit" dfdl:length="10" />
    <xs:element name="date05" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="explicit"
                dfdl:calendarPattern="'day 'e' of the week, month 'MM' year 'yyyy" 
                dfdl:calendarFirstDayOfWeek="Monday" dfdl:lengthKind="delimited" />
    <xs:element name="date06" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="explicit"
                dfdl:calendarPattern="'day 'e' of the week, month 'MM' year 'yyyy" 
                dfdl:calendarFirstDayOfWeek="Sunday" dfdl:lengthKind="delimited" />
    <xs:element name="date07" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="explicit"
                dfdl:calendarPattern="EEEE', 'MM yyyy" dfdl:lengthKind="delimited" />
    <xs:element name="date08" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="explicit"
                dfdl:calendarPattern="...MM...dd...yyyy" dfdl:lengthKind="delimited" />
    <xs:element name="date09" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="implicit" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="center" dfdl:textCalendarPadCharacter="." dfdl:lengthKind="delimited" />
    <xs:element name="date10" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="implicit" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="left" dfdl:textCalendarPadCharacter="x" dfdl:lengthKind="delimited" />
    <xs:element name="date11" type="xs:date" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="implicit" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="right" dfdl:textCalendarPadCharacter="d" dfdl:lengthKind="delimited" />

    <xs:element name="date12" type="ex:explicDate" dfdl:calendarPattern="dd MM yyyy, HH:mm:ss"/>
    <xs:element name="date13" type="ex:explicDate" dfdl:calendarPattern="MM-dd-yyyy G"/>
    <xs:element name="date14" type="ex:explicDate" dfdl:calendarPattern="Q yyyy"/>
    <xs:element name="date15" type="ex:explicDate" dfdl:calendarPattern="D yyyy"/>
    <xs:element name="date16" type="ex:explicDate" dfdl:calendarPattern="F MM yyyy"/>
    <xs:element name="date17" type="ex:explicDate7" dfdl:calendarPattern="w yyyy"/>
    <xs:element name="date18" type="ex:explicDate" dfdl:calendarPattern="w yyyy" dfdl:calendarDaysInFirstWeek="5"/>
    <xs:element name="date19" type="ex:explicDate7" dfdl:calendarPattern="W MM yyyy"/>
    <xs:element name="date20" type="ex:explicDate" dfdl:calendarPattern="W MM yyyy" dfdl:calendarDaysInFirstWeek="2"/>

    <xs:element name="date21">
      <xs:complexType>
           <xs:choice>
             <xs:element name="superfull" type="ex:explicDate" dfdl:calendarPattern="'It is day 'dd' of 'MMM, yyyy" />
             <xs:element name="short" type="ex:explicDate" dfdl:calendarPattern="MM-dd-yyyy"/>
             <xs:element name="full" type="ex:explicDate" dfdl:calendarPattern="MMM dd, yyyy"/>
           </xs:choice>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="date22" type="ex:explicDate" dfdl:calendarPattern="MM dd yy" dfdl:calendarCenturyStart="20"/>
    <xs:element name="date23" type="ex:explicDate" dfdl:calendarPattern="MM dd yy" dfdl:calendarCenturyStart="48"/>
    
    <xs:element name="date24" type="ex:explicDate" dfdl:encoding="UTF-8" dfdl:calendarPattern="EEEE MMM yyyy" dfdl:calendarLanguage="de-1996"/>
    <xs:element name="date25" type="ex:explicDate" dfdl:calendarPattern="EEEE MMM yyyy" dfdl:calendarLanguage="es-MX"/>
    <xs:element name="date26" type="ex:explicDate" dfdl:calendarPattern="EEEE MMM yyyy" dfdl:calendarLanguage="en-GB"/>
    
    <xs:element name="date27" type="ex:explicDate" dfdl:calendarPattern="yyyy"/>
    <xs:element name="date28" type="ex:explicDate" dfdl:calendarPattern=""/>
    <xs:element name="date29" type="ex:explicDate" dfdl:calendarPattern="MM"/>

    <xs:element name="date30" type="ex:explicDate" dfdl:calendarPattern="dd...00MM.....yyyy*()*()*()"/>

    <xs:element name="date31" type="ex:explicDate" dfdl:calendarPattern="dd MM yyyy, mm:ss"/>
    
    <xs:element name="date32" type="ex:explicDate" dfdl:encoding="UTF-8" dfdl:calendarPattern="EEEE MMM yyyy" dfdl:calendarLanguage="ru-RU"/>
  
    <xs:element name="date34">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="date" type="xs:date" dfdl:lengthKind="delimited" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="yyyy-MM-dd" dfdl:calendarTimeZone="UTC-05:00"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:simpleType name="explicDate" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="delimited">
      <xs:restriction base="xs:date"/>
    </xs:simpleType>
    
    <xs:simpleType name="explicDate7" dfdl:calendarDaysInFirstWeek="7">
      <xs:restriction base="ex:explicDate"/>
    </xs:simpleType>
    
    <xs:simpleType name="strictExplicTime" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="delimited" dfdl:calendarCheckPolicy="strict">
      <xs:restriction base="xs:time"/>
    </xs:simpleType>

    <xs:element name="timeImp" type="xs:time" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="delimited"/>
    <xs:element name="time01" type="xs:time" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="delimited" />
    <xs:element name="time02" type="xs:time" dfdl:calendarCheckPolicy="strict" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="delimited" />

    <xs:element name="time03" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss.SSSS"/>
    <xs:element name="time04" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm.zzz"/>
    <xs:element name="time04b" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm.zzzz"/>
    <xs:element name="time05" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm.v"/> 
    <xs:element name="time05b" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm.vvvv"/> 
    <xs:element name="time06" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm.VVVV"/>
    <xs:element name="time07" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm.V"/>

    <xs:element name="time08" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss" dfdl:calendarTimeZone="UTC+1"/>
    <xs:element name="time09" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss" dfdl:calendarTimeZone="UTC+1:30"/>

    <xs:element name="time10" type="xs:time" dfdl:calendarCheckPolicy="strict" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="HH:mm:ss" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="center" dfdl:textCalendarPadCharacter="." dfdl:lengthKind="delimited" />
    <xs:element name="time11" type="xs:time" dfdl:calendarCheckPolicy="strict" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="HH:mm:ss" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="right" dfdl:textCalendarPadCharacter=":" dfdl:lengthKind="delimited" />

    <xs:element name="time12" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss.SSS"/>
    <xs:element name="time13" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss.SSSSSS"/>
    <xs:element name="time14" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss.SSSSSSSSSSSSSSSSSSSSS"/>
    <xs:element name="time15" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss.SSSSSSSSSSSSSSSSSSSSSS"/>
    <xs:element name="time16" type="ex:strictExplicTime" dfdl:calendarPattern="HH:mm"/>
    <xs:element name="time17" type="ex:strictExplicTime" dfdl:calendarPattern="HH:mmaa"/>
    <xs:element name="time17b" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mmaa"/>
    <xs:element name="time18" type="ex:strictExplicTime" dfdl:calendarPattern="KK:mmaa"/>
    <xs:element name="time19" type="ex:strictExplicTime" dfdl:calendarPattern="kk:mm"/>
    <xs:element name="time20" type="ex:strictExplicTime" dfdl:calendarPattern='hh@mm$%^&amp;*()s'/>
    <xs:element name="time21" type="ex:strictExplicTime" dfdl:calendarPattern="hh@mm$%^!@#.,/.''}{}{*()s"/>
    <xs:element name="time22" type="ex:strictExplicTime" dfdl:calendarPattern="mm"/>
    <xs:element name="time23" type="ex:strictExplicTime" dfdl:calendarPattern=""/>
    <xs:element name="time24" type="ex:strictExplicTime" dfdl:calendarPattern="."/>
    <xs:element name="time25" type="ex:strictExplicTime" dfdl:calendarPattern="yyyy-dd hh:mm"/>
    <xs:element name="time26" type="ex:strictExplicTime" dfdl:calendarPattern="bb hh:mm"/>
    <xs:element name="time27" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm.Z"/>
    <xs:element name="time28" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm.zzz" dfdl:calendarTimeZone="UTC+1:30"/>
    <xs:element name="time29" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss.SSSSSSSSS"/>
    <xs:element name="time30" type="ex:strictExplicTime" dfdl:calendarPattern="hh:mm:ss.SSSSSSSSSS"/>
  
    <xs:element name="time32">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="time" type="xs:time" dfdl:lengthKind="delimited" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="HH:mm:ss" dfdl:calendarTimeZone="UTC-05:00" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="dateTimeImp" type="xs:dateTime" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="delimited" />
    <xs:element name="dateTime01" type="xs:dateTime" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="'It is 'hh:mmaa' on the 'dd'st of 'MMM', year 'yyyy"
                dfdl:lengthKind="explicit" dfdl:length="44" 
                dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar"/>
    <xs:element name="dateTime02" type="xs:dateTime" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="implicit" dfdl:lengthKind="explicit" dfdl:length="19" />
    <xs:element name="dateTime03" type="xs:dateTime" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="delimited"
        dfdl:calendarPattern="'Twas a sunny 'EEEE' at 'hh' O''clock. The year was 'yyyy', and it was the hottest 'MMM' we had ever experienced.'" />
    <xs:element name="dateTime04" type="xs:dateTime" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="delimited"
        dfdl:calendarPattern="HH:mm:ss MMM-dd-yyyy" />
    <xs:element name="dateTime05" type="xs:dateTime" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="delimited" dfdl:calendarPattern="W MM yyyy" 
        dfdl:calendarFirstDayOfWeek="Tuesday" dfdl:calendarDaysInFirstWeek="5"/>
    <xs:element name="dateTime06" type="xs:dateTime" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="delimited" dfdl:calendarPattern="W MM yyyy" 
        dfdl:calendarFirstDayOfWeek="Thursday" dfdl:calendarDaysInFirstWeek="7"/>
    <xs:element name="dateTime07" type="xs:dateTime" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="delimited" dfdl:calendarPattern="W MM yyyy" 
        dfdl:calendarFirstDayOfWeek="Thursday" dfdl:calendarDaysInFirstWeek="2"/>
    <xs:element name="dateTime08" type="xs:dateTime" dfdl:calendarPatternKind="explicit" dfdl:lengthKind="delimited" dfdl:calendarPattern="W MM yyyy hh:mm:ssaa" 
        dfdl:calendarFirstDayOfWeek="Sunday" dfdl:calendarDaysInFirstWeek="7"/>
    <xs:element name="dateTime09" type="xs:dateTime" dfdl:calendarCheckPolicy="strict" dfdl:calendarPatternKind="explicit" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="center" dfdl:textCalendarPadCharacter="." dfdl:lengthKind="delimited" dfdl:calendarPattern="MM.dd.yyyy hh:mm:ssaa"/>
    <xs:element name="dateTime10" type="xs:dateTime" dfdl:calendarCheckPolicy="strict" dfdl:calendarPatternKind="explicit" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="left" dfdl:textCalendarPadCharacter=":" dfdl:lengthKind="delimited" dfdl:calendarPattern="MM.dd.yyyy hh:mm:ssaa"/>
    <xs:element name="dateTime11" type="xs:dateTime" dfdl:calendarCheckPolicy="strict" dfdl:calendarPatternKind="explicit" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="center" dfdl:textCalendarPadCharacter="%HT;" dfdl:lengthKind="delimited" dfdl:calendarPattern="MM.dd.yyyy hh:mm:ssaa"/>
    <xs:element name="dateTime12" type="xs:dateTime" dfdl:calendarCheckPolicy="lax" dfdl:calendarPatternKind="explicit" dfdl:textTrimKind="padChar"
                dfdl:textCalendarJustification="right" dfdl:textCalendarPadCharacter="%HT;" dfdl:lengthKind="delimited" dfdl:calendarPattern="MM.dd.yyyy hh:mm:ssaa"/>
    <xs:element name="dateTime13" type="xs:dateTime" dfdl:lengthKind="delimited" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="dd-MM-yyyy hh:mm:ss.SSSSSSSSSS"/>
   
    <xs:element name="dateTime15"><!-- EST Time Zone -->
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="dateTime" type="xs:dateTime" dfdl:lengthKind="delimited" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="yyyy-MM-dd HH:mm:ss" dfdl:calendarTimeZone="UTC-05:00"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
  </tdml:defineSchema>
  
  <!-- 
  This schema exists to isolate all schema parts that use calendarTimeZone="".
  
  This is DFDL standard, but not portable to IBM. If this is present in a schema on any element, 
  then IBM DFDL will produce an SDE, and no test using elements from that schema
  can be run. 
  
  By isolating it here, tests that use this feature can be setup to only run on 
  daffodil, and all other tests can run portably.
   -->
  <tdml:defineSchema name="tzEmptySchema">
  
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" />
    
    <xs:element name="date33">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="date" type="xs:date" dfdl:lengthKind="delimited" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="yyyy-MM-dd" dfdl:calendarTimeZone=""/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
      <xs:element name="time31">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="time" type="xs:time" dfdl:lengthKind="delimited" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="HH:mm:ss" 
            dfdl:calendarTimeZone="" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
     <xs:element name="dateTime14"><!-- No Time Zone -->
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="dateTime" type="xs:dateTime" dfdl:lengthKind="delimited" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="yyyy-MM-dd HH:mm:ss" dfdl:calendarTimeZone=""/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
  </tdml:defineSchema>
  <!--
     Test Name: dateTime_calendarTimeZone_EmptyString
        Schema: dateTimeSchema
          Root: dateTime14
       Purpose: This test demonstrates the xs:dateTime object can be constructed without
                a time zone.
                
                calendarTimeZone="", no time zone present in result.
  -->
  
  <tdml:parserTestCase name="dateTime_calendarTimeZone_EmptyString" root="dateTime14"
    model="tzEmptySchema" description="Section 13 Simple Types - xs:dateTime calendarTimeZone Empty String - DFDL-13-XXXR"
    roundTrip="true"
    implementations="daffodil">

    <tdml:document><![CDATA[1995-03-24 01:30:00]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime14><dateTime>1995-03-24T01:30:00</dateTime></dateTime14>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
     Test Name: dateTime_calendarTimeZone_EST
        Schema: dateTimeSchema
          Root: dateTime15
       Purpose: This test demonstrates the xs:dateTime object can be constructed without
                a time zone.
                
                calendarTimeZone="UTC-05:00", -05:00 present in result.
-->
  
  <tdml:parserTestCase name="dateTime_calendarTimeZone_EST" root="dateTime15"
    model="dateTimeSchema" description="Section 13 Simple Types - xs:dateTime calendarTimeZone EST - DFDL-13-XXXR">

    <tdml:document><![CDATA[1995-03-24 01:30:00]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime15><dateTime>1995-03-24T01:30:00-05:00</dateTime></dateTime15>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateImplicitPattern
        Schema: dateTimeSchema
          Root: dateImp
       Purpose: This test demonstrates the date data type with the implicit calendar Pattern.
                The data matches this pattern and should be parsed correctly.
-->
  
  <tdml:parserTestCase name="dateImplicitPattern" root="dateImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[1995-03-24]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateImp>1995-03-24</dateImp>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateImplicitPatternFail
        Schema: dateTimeSchema
          Root: dateImp
       Purpose: This test demonstrates the date data type with the implicit calendar Pattern.
                The data does NOT match this pattern and should fail parsing.
-->
  
  <tdml:parserTestCase name="dateImplicitPatternFail" root="dateImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[1998-3-Mar]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error:</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>xs:date</tdml:error>
      <tdml:error>1998-3-Mar</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: timeImplicitPattern
        Schema: dateTimeSchema
          Root: timeImp
       Purpose: This test demonstrates the time data type with the implicit calendar Pattern.
                The data matches this pattern and should be parsed correctly.
-->
  
  <tdml:parserTestCase name="timeImplicitPattern" root="timeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[12:43:20+00:00]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <timeImp>12:43:20+00:00</timeImp>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeImplicitPatternFail
        Schema: dateTimeSchema
          Root: timeImp
       Purpose: This test demonstrates the time data type with the implicit calendar Pattern.
                The data does NOT match this pattern and should fail parsing.
-->
  
  <tdml:parserTestCase name="timeImplicitPatternFail" root="timeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[12:43.45 PM]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>xs:time</tdml:error>
      <tdml:error>12:43.45 PM</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeImplicitPattern
        Schema: dateTimeSchema
          Root: dateTimeImp
       Purpose: This test demonstrates the dateTime data type with the implicit calendar Pattern.
                The data matches this pattern and should be parsed correctly.
-->
  
  <tdml:parserTestCase name="dateTimeImplicitPattern" root="dateTimeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[2013-03-24T03:45:30]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTimeImp>2013-03-24T03:45:30</dateTimeImp>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>


<!--
     Test Name: dateTimeImplicitPatternFail
        Schema: dateTimeSchema
          Root: dateTimeImp
       Purpose: This test demonstrates the dateTime data type with the implicit calendar Pattern.
                The data does NOT match this pattern and should fail parsing.
-->
  
  <tdml:parserTestCase name="dateTimeImplicitPatternFail" root="dateTimeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[2013.03.24 03:45:30]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error:</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>xs:dateTime</tdml:error>
      <tdml:error>2013.03.24 03:45:30</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeImplicitPatternFail2
        Schema: dateTimeSchema
          Root: dateTimeImp
       Purpose: This test demonstrates the dateTime data type with the implicit calendar Pattern.
                The data does NOT match this pattern and should fail parsing.
-->
  
  <tdml:parserTestCase name="dateTimeImplicitPatternFail2" root="dateTimeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[2013-03-24T03:45:30-00:00]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error:</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>xs:dateTime</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeImplicitPatternFail3
        Schema: dateTimeSchema
          Root: dateTimeImp
       Purpose: This test demonstrates the dateTime data type with the implicit calendar Pattern.
                The data does NOT match this pattern and should fail parsing.
-->
  
  <tdml:parserTestCase name="dateTimeImplicitPatternFail3" root="dateTimeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[2013-03-24T03:45:30 Pacific Standard Time]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error:</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>xs:dateTime</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeImplicitPatternFail4
        Schema: dateTimeSchema
          Root: dateTimeImp
       Purpose: This test demonstrates the dateTime data type with the implicit calendar Pattern.
                The data does NOT match this pattern and should fail parsing.
-->
  
  <tdml:parserTestCase name="dateTimeImplicitPatternFail4" root="dateTimeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[2013-03-24T03:45:30GMT]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error:</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>xs:dateTime</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeImplicitPatternFail5
        Schema: dateTimeSchema
          Root: dateTimeImp
       Purpose: This test demonstrates a dateTime data type with a year that is out of range.
-->

  <tdml:parserTestCase name="dateTimeImplicitPatternFail5" root="dateTimeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[99999999-03-24T03:45:30]]></tdml:document>
    <tdml:errors>
      <tdml:error>Tunable Limit Exceeded Error:</tdml:error>
      <tdml:error>not within the limits of</tdml:error>
      <tdml:error>minValidYear</tdml:error>
      <tdml:error>maxValidYear</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeImplicitPatternFail6
        Schema: dateTimeSchema
          Root: dateTimeImp
       Purpose: This test demonstrates a dateTime data type with a year that is out of range.
-->

  <tdml:parserTestCase name="dateTimeImplicitPatternFail6" root="dateTimeImp"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document><![CDATA[10000-03-24T03:45:30]]></tdml:document>
    <tdml:errors>
      <tdml:error>Tunable Limit Exceeded Error:</tdml:error>
      <tdml:error>not within the limits of</tdml:error>
      <tdml:error>minValidYear</tdml:error>
      <tdml:error>maxValidYear</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>


<!--
     Test Name: datePattern01
        Schema: dateTimeSchema
          Root: date01
       Purpose: This test demonstrates the date data type with an explicit calendar Pattern.
-->
  
  <tdml:parserTestCase name="datePattern01" root="date01"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="true">

    <tdml:document><![CDATA[Today is the 25th day of January, year 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date01>2013-01-25</date01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern01b
        Schema: dateTimeSchema
          Root: date01b
       Purpose: This test demonstrates the date data type with an explicit calendar Pattern.
-->
  
  <tdml:parserTestCase name="datePattern01b" root="date01b"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[Today is the 25th day of Jan, year 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date01b>2013-01-25</date01b>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern02
        Schema: dateTimeSchema
          Root: date12
       Purpose: This test demonstrates what happens when you use time formatting markers in a date object
-->
  
  <tdml:parserTestCase name="datePattern02" root="date12"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[24 03 1988, 03:45:55]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Character 'H' not allowed in dfdl:calendarPattern for xs:date</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern02b
        Schema: dateTimeSchema
          Root: date1
       Purpose: This test demonstrates what happens when you use time formatting markers in a date object
-->
  
  <tdml:parserTestCase name="datePattern02b" root="date31"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[24 03 1988, 45:55]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Character 'm' not allowed in dfdl:calendarPattern for xs:date</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: timePattern01
        Schema: dateTimeSchema
          Root: time25
       Purpose: This test demonstrates what happens when you use date formatting markers in a time object
-->
  
  <tdml:parserTestCase name="timePattern01" root="time25"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[1999-03 12:34]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Character 'y' not allowed in dfdl:calendarPattern for xs:time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: timePattern01b
        Schema: dateTimeSchema
          Root: time26
       Purpose: This test demonstrates what happens when you use invalid formatting markers in a time object
-->
  
  <tdml:parserTestCase name="timePattern01b" root="time26"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[19 12:34]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Character 'b' not allowed in dfdl:calendarPattern for xs:time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern03
        Schema: dateTimeSchema
          Root: date13
       Purpose: This test demonstrates date formatting markers, primarily with the 'G' (era) symbol
-->
  
  <tdml:parserTestCase name="datePattern03" root="date13"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[02-13-2013 BC]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date13>-2012-02-13</date13>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern04
        Schema: dateTimeSchema
          Root: date14
       Purpose: This test demonstrates date formatting markers, primarily with the 'Q' (quarter) symbol
-->
  
  <tdml:parserTestCase name="datePattern04" root="date14"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[Q2 2012]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Character 'Q' not allowed in dfdl:calendarPattern for xs:date</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern05
        Schema: dateTimeSchema
          Root: date15
       Purpose: This test demonstrates date formatting markers, primarily with the 'D' (day in year) symbol (leap year)
-->
  
  <tdml:parserTestCase name="datePattern05" root="date15"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[100 2012]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date15>2012-04-09</date15>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern06
        Schema: dateTimeSchema
          Root: date15
       Purpose: This test demonstrates date formatting markers, primarily with the 'D' (day in year) symbol (non leap year)
-->
  
  <tdml:parserTestCase name="datePattern06" root="date15"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[100 2011]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date15>2011-04-10</date15>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern07
        Schema: dateTimeSchema
          Root: date16
       Purpose: This test demonstrates date formatting markers, primarily with the 'F' (week in month) symbol
-->
  
  <tdml:parserTestCase name="datePattern07" root="date16"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R">

    <tdml:document><![CDATA[2 02 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date16>2013-02-10</date16>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern08
        Schema: dateTimeSchema
          Root: date30
       Purpose: This test demonstrates the use of symbols in date formatting with a byte representation
-->
  
  <tdml:parserTestCase name="datePattern08" root="date30"
    model="dateTimeSchema" description="Section 13 Simple Types - symbols in date formatting - DFDL-13-164R">

    <tdml:document>
      <tdml:documentPart type="byte">33302e2e2e303030342e2e2e2e2e313939382a28292a28292a2829</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date30>1998-04-30</date30>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: datePattern08b
        Schema: dateTimeSchema
          Root: date30
       Purpose: This test demonstrates the use of symbols in date formatting
-->
  
  <tdml:parserTestCase name="datePattern08b" root="date30"
    model="dateTimeSchema" description="Section 13 Simple Types - symbols in date formatting - DFDL-13-164R">

    <tdml:document>
      <tdml:documentPart type="text">30...0004.....1998*()*()*()</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date30>1998-04-30</date30>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateEpochFillIn
        Schema: dateTimeSchema
          Root: date27
       Purpose: This test demonstrates that if a formatting character is not provided, the time is filled in with the epoch time.
-->
  
  <tdml:parserTestCase name="dateEpochFillIn" root="date27"
    model="dateTimeSchema" description="Section 13 Simple Types - epoch fill in - DFDL-13-164R">

    <tdml:document><![CDATA[2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date27>2013-01-01</date27>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateEpochFillIn2
        Schema: dateTimeSchema
          Root: date28
       Purpose: This test demonstrates that if a formatting character is not provided, the time is filled in with the epoch time.
-->
  
  <tdml:parserTestCase name="dateEpochFillIn2" root="date28"
    model="dateTimeSchema" description="Section 13 Simple Types - epoch fill in - DFDL-13-164R">

    <tdml:document><![CDATA[]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date28>1970-01-01</date28>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateEpochFillIn3
        Schema: dateTimeSchema
          Root: date29
       Purpose: This test demonstrates that if a formatting character is not provided, the time is filled in with the epoch time.
-->
  
  <tdml:parserTestCase name="dateEpochFillIn3" root="date29"
    model="dateTimeSchema" description="Section 13 Simple Types - epoch fill in - DFDL-13-164R">

    <tdml:document><![CDATA[08]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date29>1970-08-01</date29>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: datePatternChoice
        Schema: dateTimeSchema
          Root: date21
       Purpose: This test demonstrates the use of a choice whose elements are determined by formatting
-->
  
  <tdml:parserTestCase name="datePatternChoice" root="date21"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[It is day 25 of March, 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date21>
          <superfull>2013-03-25</superfull>
        </date21>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarCenturyStart
        Schema: dateTimeSchema
          Root: date22
       Purpose: This test demonstrates the calendarCenturyStart property. The specified start is 20, so the year
                range is 1920 - 2019. In this case our year is 45. In order for it to fall in our range it
                translates to 1945. 
-->
  
  <tdml:parserTestCase name="dateCalendarCenturyStart" root="date22"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCentury - DFDL-13-144R">

    <tdml:document><![CDATA[03 22 45]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date22>1945-03-22</date22>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarCenturyStart2
        Schema: dateTimeSchema
          Root: date23
       Purpose: This test demonstrates the calendarCenturyStart property. The specified start is 48, so the year
                range is 1948 - 2047. In this case our year is 45. In order for it to fall in our range it
                translates to 2045. 
-->
  
  <tdml:parserTestCase name="dateCalendarCenturyStart2" root="date23"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCenturyStart - DFDL-13-144R">

    <tdml:document><![CDATA[03 22 45]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date23>2045-03-22</date23>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarLanguage
        Schema: dateTimeSchema
          Root: date24
       Purpose: This test demonstrates the calendarLanguage property with the language set to German.
-->
  
  <tdml:parserTestCase name="dateCalendarLanguage" root="date24"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarLanguage - DFDL-13-145R">

    <tdml:document><![CDATA[Freitag März 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date24>2013-03-01</date24>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarLanguage2
        Schema: dateTimeSchema
          Root: date25
       Purpose: This test demonstrates the calendarLanguage property with the language set to Spanish.
-->
  
  <tdml:parserTestCase name="dateCalendarLanguage2" root="date25"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarLanguage - DFDL-13-145R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[Lunes Noviembre 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date25>2013-11-04</date25>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarLanguage3
        Schema: dateTimeSchema
          Root: date26
       Purpose: This test demonstrates the calendarLanguage property with the language set to English.
-->
  
  <tdml:parserTestCase name="dateCalendarLanguage3" root="date26"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarLanguage - DFDL-13-145R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[Monday November 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date26>2013-11-04</date26>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarLanguage4
        Schema: dateTimeSchema
          Root: date32
       Purpose: This test demonstrates the calendarLanguage property with the language set to Russian.
-->
  
  <tdml:parserTestCase name="dateCalendarLanguage4" root="date32"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarLanguage - DFDL-13-145R">

    <tdml:document><![CDATA[пятница мар. 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date32>2013-03-01</date32>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarDaysInFirstWeek
        Schema: dateTimeSchema
          Root: date17
       Purpose: This test demonstrates the calendarDaysInFirstWeek property. Since the first week of 2013 is specified, 
                and the calendarDaysInFirstWeek is set to 7, the first full week of 2013 will be selected. In this case
                it starts on January 6th.
-->
  
  <tdml:parserTestCase name="dateCalendarDaysInFirstWeek" root="date17"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[01 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date17>2013-01-06</date17>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarDaysInFirstWeek2
        Schema: dateTimeSchema
          Root: date18
       Purpose: This test demonstrates the calendarDaysInFirstWeek property. Since the first week of 2013 is specified, 
                and the calendarDaysInFirstWeek is set to 5, the first day of the week that contains the first day of the
                year will be selected. In this case it is December 30th, 2012
-->
  
  <tdml:parserTestCase name="dateCalendarDaysInFirstWeek2" root="date18"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[01 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date18>2012-12-30</date18>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarDaysInFirstWeek3
        Schema: dateTimeSchema
          Root: date17
       Purpose: This test demonstrates the calendarDaysInFirstWeek property. calendarDaysInFirstWeek is set to 7,
                and in 2012 the first day of the year started the first full week, so we should get January 1st.
-->
  
  <tdml:parserTestCase name="dateCalendarDaysInFirstWeek3" root="date17"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R">

    <tdml:document><![CDATA[01 2012]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date17>2012-01-01+00:00</date17>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarDaysInFirstWeek4
        Schema: dateTimeSchema
          Root: date19
       Purpose: This test demonstrates the calendarDaysInFirstWeek property. calendarDaysInFirstWeek is set to 5,
                which is more than the number of days in the first week of March, so the second week is selected,
                which starts on the 3rd.
-->
  
  <tdml:parserTestCase name="dateCalendarDaysInFirstWeek4" root="date19"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[01 03 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date19>2013-03-03</date19>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarDaysInFirstWeek5
        Schema: dateTimeSchema
          Root: date20
       Purpose: This test demonstrates the calendarDaysInFirstWeek property. calendarDaysInFirstWeek is set to 2,
                which is the number of days in the first week of March, so the first day of the first week is selected,
                which is Feb 24th.
-->
  
  <tdml:parserTestCase name="dateCalendarDaysInFirstWeek5" root="date20"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R">

    <tdml:document><![CDATA[01 03 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date20>2013-02-24+00:00</date20>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimePattern01
        Schema: dateTimeSchema
          Root: dateTime01
       Purpose: This test demonstrates the dateTime data type with an explicit calendar Pattern.
-->
  
  <tdml:parserTestCase name="dateTimePattern01" root="dateTime01"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[It is 11:53AM on the 1st of April, year 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime01>2013-04-01T11:53:00</dateTime01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeLaxCheckPolicy01
        Schema: dateTimeSchema
          Root: time01
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
-->
  
  <tdml:parserTestCase name="timeLaxCheckPolicy01" root="time01"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[05:62:30+00:00]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time01>06:02:30+00:00</time01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeLaxCheckPolicy02
        Schema: dateTimeSchema
          Root: time01
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
-->
  
  <tdml:parserTestCase name="timeLaxCheckPolicy02" root="time01"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[28:62:30-00:00]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time01>05:02:30+00:00</time01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeLaxCheckPolicy03
        Schema: dateTimeSchema
          Root: time01
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
-->
  
  <tdml:parserTestCase name="timeLaxCheckPolicy03" root="time01"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[28:62:90+00:00]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time01>05:03:30+00:00</time01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeLaxCheckPolicy01
        Schema: dateTimeSchema
          Root: dateTime02
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
-->
  
  <tdml:parserTestCase name="dateTimeLaxCheckPolicy01" root="dateTime02"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[2013-01-31T23:62:30]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime02>2013-02-01T00:02:30</dateTime02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateLaxCheckPolicy01
        Schema: dateTimeSchema
          Root: date02
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
-->
  
  <tdml:parserTestCase name="dateLaxCheckPolicy01" root="date02"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[2000-12-45]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date02>2001-01-14</date02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateLaxCheckPolicy02
        Schema: dateTimeSchema
          Root: date03
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
                (fun with leap years)
-->
  
  <tdml:parserTestCase name="dateLaxCheckPolicy02" root="date03"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[2000-01-366]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date03>2000-12-31</date03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateLaxCheckPolicy03
        Schema: dateTimeSchema
          Root: date03
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
                (counter to fun with leap years)
-->
  
  <tdml:parserTestCase name="dateLaxCheckPolicy03" root="date03"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[2001-01-366]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date03>2002-01-01</date03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateLaxCheckPolicy04
        Schema: dateTimeSchema
          Root: date02
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
                (fun with leap years)
-->
  
  <tdml:parserTestCase name="dateLaxCheckPolicy04" root="date02"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R">

    <tdml:document><![CDATA[2000-02-29]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date02>2000-02-29</date02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateLaxCheckPolicy05
        Schema: dateTimeSchema
          Root: date02
       Purpose: This test demonstrates a lax calendarCheckPolicy. Any invalid values should be converted to the appropriate value
                (counter to fun with leap years)
-->
  
  <tdml:parserTestCase name="dateLaxCheckPolicy05" root="date02"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[2001-02-29]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date02>2001-03-01</date02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateStrictCheckPolicy01
        Schema: dateTimeSchema
          Root: date04
       Purpose: This test demonstrates a strict calendarCheckPolicy. Any invalid values should result in a parse error.
-->
  
  <tdml:parserTestCase name="dateStrictCheckPolicy01" root="date04"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R">

    <tdml:document><![CDATA[2001-03-35]]></tdml:document>
    <tdml:errors>
      <tdml:error/>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: timeStrictCheckPolicy01
        Schema: dateTimeSchema
          Root: time02
       Purpose: This test demonstrates a strict calendarCheckPolicy. Any invalid values should result in a parse error.
-->
  
  <tdml:parserTestCase name="timeStrictCheckPolicy01" root="time02"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R">

    <tdml:document><![CDATA[13:99:50-0800]]></tdml:document>
    <tdml:errors>
      <tdml:error/>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: timeStrictCheckPolicy02
        Schema: dateTimeSchema
          Root: time02
       Purpose: This test demonstrates a strict calendarCheckPolicy. Any invalid values should result in a parse error.
-->
  
  <tdml:parserTestCase name="timeStrictCheckPolicy02" root="time02"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarCheckPolicy - DFDL-13-139R">

    <tdml:document><![CDATA[13:30:70GMT]]></tdml:document>
    <tdml:errors>
      <tdml:error>Failed to parse '13:30:70GMT'</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarFirstDayOfWeek01
        Schema: dateTimeSchema
          Root: date05
       Purpose: This test demonstrates the calendarFirstDayOfWeek property. The element specifies 
                the month, year, and day of the week. The day of the week is specified with a number, so the 
                calendarFirstDayOfWeek determines the actual value of this number. Because the day of the month is not specified, 
                the first day of the month that falls on that day of the week is used.
-->
  
  <tdml:parserTestCase name="dateCalendarFirstDayOfWeek01" root="date05"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarFirstDayOfWeek - DFDL-13-142R"
    roundTrip="false">

    <tdml:document><![CDATA[day 1 of the week, month 02 year 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date05>2013-02-04</date05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarFirstDayOfWeek02
        Schema: dateTimeSchema
          Root: date05
       Purpose: This test demonstrates the calendarFirstDayOfWeek property. The element specifies 
                the month, year, and day of the week. The day of the week is specified with a number, so the 
                calendarFirstDayOfWeek determines the actual value of this number. Because the day of the month is not specified, 
                the first day of the month that falls on that day of the week is used.
-->
  
  <tdml:parserTestCase name="dateCalendarFirstDayOfWeek02" root="date05"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarFirstDayOfWeek - DFDL-13-142R"
    roundTrip="false">

    <tdml:document><![CDATA[day 2 of the week, month 02 year 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date05>2013-02-05</date05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarFirstDayOfWeek03
        Schema: dateTimeSchema
          Root: date06
       Purpose: This test demonstrates the calendarFirstDayOfWeek property. The element specifies 
                the month, year, and day of the week. The day of the week is specified with a number, so the 
                calendarFirstDayOfWeek determines the actual value of this number. Because the day of the month is not specified, 
                the first day of the month that falls on that day of the week is used.
-->
  
  <tdml:parserTestCase name="dateCalendarFirstDayOfWeek03" root="date06"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarFirstDayOfWeek - DFDL-13-142R">

    <tdml:document><![CDATA[day 1 of the week, month 02 year 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date06>2013-02-03+00:00</date06>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCalendarFirstDayOfWeek04
        Schema: dateTimeSchema
          Root: date06
       Purpose: This test demonstrates the calendarFirstDayOfWeek property. The element specifies 
                the month, year, and day of the week. The day of the week is specified with a number, so the 
                calendarFirstDayOfWeek determines the actual value of this number. Because the day of the month is not specified, 
                the first day of the month that falls on that day of the week is used.
-->
  
  <tdml:parserTestCase name="dateCalendarFirstDayOfWeek04" root="date06"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarFirstDayOfWeek - DFDL-13-142R">

    <tdml:document><![CDATA[day 2 of the week, month 02 year 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date06>2013-02-04+00:00</date06>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats
        Schema: dateTimeSchema
          Root: time04
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats" root="time04"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43.EST]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time04>08:43:00-05:00</time04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats2
        Schema: dateTimeSchema
          Root: time04b
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats2" root="time04b"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43.Eastern Standard Time]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time04b>08:43:00-05:00</time04b>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats3
        Schema: dateTimeSchema
          Root: time05
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats3" root="time05"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43.PT]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time05>08:43:00-08:00</time05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting
        Schema: dateTimeSchema
          Root: time16
       Purpose: This test demonstrates different formatting for time, particularly 'HH' to represent hour in day (0~23)
-->
  
  <tdml:parserTestCase name="timeFormatting" root="time16"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R">

    <tdml:document><![CDATA[22:43]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time16>22:43:00</time16>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting2
        Schema: dateTimeSchema
          Root: time17
       Purpose: This is a test to see what will happen if you specify a military-style hour (HH) AND an AM/PM marker
                If AM, the hour defaults to 00 (midnight), and if PM, the hour defaults to 12 (noon)
-->
  
  <tdml:parserTestCase name="timeFormatting2" root="time17"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[03:43PM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time17>12:43:00</time17>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting2c
        Schema: dateTimeSchema
          Root: time17
       Purpose: This is a test to see what will happen if you specify a military-style hour (HH) AND an AM/PM marker
                If AM, the hour defaults to 00 (midnight), and if PM, the hour defaults to 12 (noon)
-->
  
  <tdml:parserTestCase name="timeFormatting2c" root="time17"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[23:43AM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time17>00:43:00</time17>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting2b
        Schema: dateTimeSchema
          Root: time17b
       Purpose: This test demonstrates different formatting for time, primarily the use of 'aa' to denote an am/pm marker
-->
  
  <tdml:parserTestCase name="timeFormatting2b" root="time17b"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R">

    <tdml:document><![CDATA[03:43AM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time17b>03:43:00</time17b>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting3
        Schema: dateTimeSchema
          Root: time17b
       Purpose: This test demonstrates different formatting for time, primarily the use of 'aa' to denote an am/pm marker
-->
  
  <tdml:parserTestCase name="timeFormatting3" root="time17b"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R">

    <tdml:document><![CDATA[03:43PM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time17b>15:43:00</time17b>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting4
        Schema: dateTimeSchema
          Root: time18
       Purpose: This test demonstrates different formatting for time, primarily the use of 'KK' to denote the hour in am/pm (0~11)
-->
  
  <tdml:parserTestCase name="timeFormatting4" root="time18"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R">

    <tdml:document><![CDATA[00:43PM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time18>12:43:00</time18>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting5
        Schema: dateTimeSchema
          Root: time18
       Purpose: This test demonstrates different formatting for time, primarily the use of 'KK' to denote the hour in am/pm (0~11)
                In this case, the hour specified is 12, which is invalid for 'KK'
-->
  
  <tdml:parserTestCase name="timeFormatting5" root="time18"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R">

    <tdml:document><![CDATA[12:30AM]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>xs:time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting6
        Schema: dateTimeSchema
          Root: time16
       Purpose: This test demonstrates different formatting for time, primarily the use of 'hh' to denote the hour in am/pm (1~12)
                In this case, the hour specified is 0, which is invalid for 'hh'
-->
  
  <tdml:parserTestCase name="timeFormatting6" root="time16"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R">

    <tdml:document><![CDATA[00:30AM]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
      <tdml:error>xs:time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: timeFormatting7
        Schema: dateTimeSchema
          Root: time19
       Purpose: This test demonstrates different formatting for time, primarily the use of 'kk' to denote the hour (0~24)
-->
  
  <tdml:parserTestCase name="timeFormatting7" root="time19"
    model="dateTimeSchema" description="Section 13 Simple Types - pattern derived from ICU SimpleDatetimeFormat - DFDL-13-147R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[00:43]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time19>00:43:00</time19>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats4
        Schema: dateTimeSchema
          Root: time05b
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats4" root="time05b"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43.Pacific Standard Time]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time05b>08:43:00-08:00</time05b>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats5
        Schema: dateTimeSchema
          Root: time06
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats5" root="time06"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43.Los Angeles Time]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time06>08:43:00-08:00</time06>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats6
        Schema: dateTimeSchema
          Root: time07
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats6" root="time07"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="false">

    <tdml:document><![CDATA[08:43.uslax]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time07>08:43:00-08:00</time07>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats7
        Schema: dateTimeSchema
          Root: time05b
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats7" root="time05b"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43.Eastern Standard Time]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time05b>08:43:00-05:00</time05b>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats8
        Schema: dateTimeSchema
          Root: time27
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats8" root="time27"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="true">

    <tdml:document><![CDATA[08:43.-0800]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time27>08:43:00-08:00</time27>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeZoneFormats9
        Schema: dateTimeSchema
          Root: time27
       Purpose: This test demonstrates different formatting for timezone
-->
  
  <tdml:parserTestCase name="timeZoneFormats9" root="time27"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPattern - DFDL-13-146R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43.GMT+00:00]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time27>08:43:00+00:00</time27>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeCalendarTimeZone
        Schema: dateTimeSchema
          Root: time08
       Purpose: This test demonstrates the calendarTimeZone property
-->
  
  <tdml:parserTestCase name="timeCalendarTimeZone" root="time08"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarTimeZone - DFDL-13-140R">

    <tdml:document><![CDATA[08:43:40]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time08>08:43:40+01:00</time08>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeCalendarTimeZone2
        Schema: dateTimeSchema
          Root: time09
       Purpose: This test demonstrates the calendarTimeZone property
-->
  
  <tdml:parserTestCase name="timeCalendarTimeZone2" root="time09"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarTimeZone - DFDL-13-140R">

    <tdml:document><![CDATA[08:43:40]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time09>08:43:40+01:30</time09>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeCalendarTimeZone3
        Schema: dateTimeSchema
          Root: time28
       Purpose: This test demonstrates the calendarTimeZone property when a timezone is already present in the data
-->
  
  <tdml:parserTestCase name="timeCalendarTimeZone3" root="time28"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarTimeZone - DFDL-13-140R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43.EST]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time28>08:43:00-05:00</time28>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeFractionalSeconds01
        Schema: dateTimeSchema
          Root: time03
       Purpose: This test demonstrates the use of fractional seconds; the seconds should be truncated
-->
  
  <tdml:parserTestCase name="timeFractionalSeconds01" root="time03"
    model="dateTimeSchema" description="Section 13 Simple Types - fractional seconds - DFDL-13-150R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[08:43:30.9678]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time03>08:43:30.967000</time03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateCountDeterminesFormat
        Schema: dateTimeSchema
          Root: date07
       Purpose: This test demonstrates that the count of formatting letters determines the format. 
-->
  
  <tdml:parserTestCase name="dateCountDeterminesFormat" root="date07"
    model="dateTimeSchema" description="Section 13 Simple Types - count determines format - DFDL-13-153R" roundTrip="false">

    <tdml:document><![CDATA[Mon, 01 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date07>2013-01-07</date07>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateNonAlphaChars01
        Schema: dateTimeSchema
          Root: date08
       Purpose: This test demonstrates that any non-alphabetic characters will be treated as quoted text. 
-->
  
  <tdml:parserTestCase name="dateNonAlphaChars01" root="date08"
    model="dateTimeSchema" description="Section 13 Simple Types - Non alpha-chars - DFDL-13-159R">

    <tdml:document><![CDATA[...03...24...1988]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date08>1988-03-24</date08>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTrim01
        Schema: dateTimeSchema
          Root: date09
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties 
-->
  
  <tdml:parserTestCase name="dateTrim01" root="date09"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[....2013-03-24....]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date09>2013-03-24</date09>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTrim02
        Schema: dateTimeSchema
          Root: date10
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties 
-->
  
  <tdml:parserTestCase name="dateTrim02" root="date10"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[2013-03-24xxxx]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date10>2013-03-24</date10>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTrim03
        Schema: dateTimeSchema
          Root: date11
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties 
-->
  
  <tdml:parserTestCase name="dateTrim03" root="date11"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[dddddddddddddddddddddddddddddd2013-03-24]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date11>2013-03-24</date11>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  


<!--
     Test Name: timeTrim01
        Schema: dateTimeSchema
          Root: time10
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties on a time object
-->
  
  <tdml:parserTestCase name="timeTrim01" root="time10"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[....12:30:30....]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time10>12:30:30</time10>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeTrim02
        Schema: dateTimeSchema
          Root: time11
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties on a time object
-->
  
  <tdml:parserTestCase name="timeTrim02" root="time11"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[::::::12:30:30]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time11>12:30:30</time11>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: millisecondAccuracy
        Schema: dateTimeSchema
          Root: time12
       Purpose: This test demonstrates that DFDL implements at least millisecond accuracy.
-->
  
  <tdml:parserTestCase name="millisecondAccuracy" root="time12"
    model="dateTimeSchema" description="Section 13 Simple Types - at least millisecond accuracy - DFDL-13-152R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[3:30:38.001]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time12>03:30:38.001000</time12>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: millisecondAccuracy2
        Schema: dateTimeSchema
          Root: time13
       Purpose: This test demonstrates that DFDL implements at least millisecond accuracy.
-->
  
  <tdml:parserTestCase name="millisecondAccuracy2" root="time13"
    model="dateTimeSchema" description="Section 13 Simple Types - at least millisecond accuracy - DFDL-13-152R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[3:30:38.001435]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time13>03:30:38.001000</time13>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: millisecondAccuracy3
        Schema: dateTimeSchema
          Root: time14
       Purpose: This test demonstrates that DFDL implements at least millisecond accuracy.
-->
  
  <tdml:parserTestCase name="millisecondAccuracy3" root="time14"
    model="dateTimeSchema" description="Section 13 Simple Types - at least millisecond accuracy - DFDL-13-152R">

    <tdml:document><![CDATA[3:30:38.002345276891000084763]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: More than 9 fractional seconds unsupported in dfdl:calendarPattern for xs:time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: millisecondAccuracy4
        Schema: dateTimeSchema
          Root: time15
       Purpose: This test demonstrates that DFDL implements at least millisecond accuracy.
-->
  
  <tdml:parserTestCase name="millisecondAccuracy4" root="time15"
    model="dateTimeSchema" description="Section 13 Simple Types - at least millisecond accuracy - DFDL-13-152R">

    <tdml:document><![CDATA[3:30:38.0023452768910087634837]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: More than 9 fractional seconds unsupported in dfdl:calendarPattern for xs:time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: millisecondAccuracy5
        Schema: dateTimeSchema
          Root: time29
       Purpose: This test demonstrates that DFDL implements at least millisecond accuracy.
-->
  
  <tdml:parserTestCase name="millisecondAccuracy5" root="time29"
    model="dateTimeSchema" description="Section 13 Simple Types - at least millisecond accuracy - DFDL-13-152R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[3:30:38.002345276]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time29>03:30:38.002000</time29>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: millisecondAccuracy6
        Schema: dateTimeSchema
          Root: time30
       Purpose: This test demonstrates that DFDL implements at least millisecond accuracy.
-->
  
  <tdml:parserTestCase name="millisecondAccuracy6" root="time30"
    model="dateTimeSchema" description="Section 13 Simple Types - at least millisecond accuracy - DFDL-13-152R">

    <tdml:document><![CDATA[3:30:38.0023452768]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: More than 9 fractional seconds unsupported in dfdl:calendarPattern for xs:time</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
    <!--
    Test name: time_calendarTimeZone_EmptyString
       Schema: dateTimeSchema
         Root: time31
      Purpose: This test demonstrates the ability to construct a xs:time object
               without a time zone specified.
               
               calendarTimeZone="", no time zone expected in the result
  -->

  <tdml:parserTestCase name="time_calendarTimeZone_EmptyString" root="time31" model="tzEmptySchema"
    description="Section 13 - Simple Types - xs:time calendarTimeZone Empty String  - DFDL-13-XXXR"
    roundTrip="true"
    implementations="daffodil">

    <tdml:document>
      <tdml:documentPart type="text">12:49:00</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time31>
          <time>12:49:00</time>
        </time31>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: time_calendarTimeZone_EST
       Schema: constructorSchema
         Root: time32
      Purpose: This test demonstrates the ability to construct a xs:time object
               with a time zone specified.
               
               calendarTimeZone="UTC-05:00", -05:00 expected in result.
  -->

  <tdml:parserTestCase name="time_calendarTimeZone_EST" root="time32" model="dateTimeSchema"
    description="Section 13 - Simple Types - xs:time calendarTimeZone EST  - DFDL-13-XXXR">

    <tdml:document>
      <tdml:documentPart type="text">12:49:00</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time32>
          <time>12:49:00-05:00</time>
        </time32>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: date_calendarTimeZone_EmptyString
       Schema: dateTimeSchema
         Root: date33
      Purpose: This test demonstrates the ability to construct a xs:date object
               with a time zone specified.
               
               calendarTimeZone="", expect no time zone in result
  -->

  <tdml:parserTestCase name="date_calendarTimeZone_EmptyString" root="date33" model="tzEmptySchema"
    description="Section 13 - Simple Types - xs:date calendarTimeZone Empty String  - DFDL-13-XXXR"
    implementations="daffodil">

    <tdml:document>
      <tdml:documentPart type="text">1991-03-04</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date33>
          <date>1991-03-04</date>
        </date33>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: date_calendarTimeZone_EST
       Schema: dateTimeSchema
         Root: date34
      Purpose: This test demonstrates the use of the xs:date constructor function and its ability to
               construct a date from a string.
               
               calendarTimeZone="UTC-05:00", expect -05:00 in result
  -->

  <tdml:parserTestCase name="date_calendarTimeZone_EST" root="date34" model="dateTimeSchema"
    description="Section 13 - Simple Types - xs:date calendarTimeZone EST  - DFDL-13-XXXR">

    <tdml:document>
      <tdml:documentPart type="text">1991-03-04</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date34>
          <date>1991-03-04-05:00</date>
        </date34>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
<!--
     Test Name: millisecondAccuracy7
        Schema: dateTimeSchema
          Root: dateTime13
       Purpose: This test demonstrates that DFDL implements at least millisecond accuracy for dateTime.
-->
  
  <tdml:parserTestCase name="millisecondAccuracy7" root="dateTime13"
    model="dateTimeSchema" description="Section 13 Simple Types - at least millisecond accuracy - DFDL-13-152R">

    <tdml:document><![CDATA[03-03-2013 3:30:38.0023452768]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: More than 9 fractional seconds unsupported in dfdl:calendarPattern for xs:dateTime</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test Name: timeSymbols
        Schema: dateTimeSchema
          Root: time20
       Purpose: This test demonstrates that if dfdl:representation is text, any characters in the pattern
                that are not in the ranges of ['a'..'z'] and ['A'..'Z'] will be treated as quoted text.
-->
  
  <tdml:parserTestCase name="timeSymbols" root="time20"
    model="dateTimeSchema" description="Section 13 Simple Types - Symbols with text representation - DFDL-13-164R">

    <tdml:document><![CDATA[03@54$%^&*()5]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time20>03:54:05</time20>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: timeSymbols2
        Schema: dateTimeSchema
          Root: time21
       Purpose: This test demonstrates that if dfdl:representation is text, any characters in the pattern
                that are not in the ranges of ['a'..'z'] and ['A'..'Z'] will be treated as quoted text.
-->
  
  <tdml:parserTestCase name="timeSymbols2" root="time21"
    model="dateTimeSchema" description="Section 13 Simple Types - Symbols with text representation - DFDL-13-164R">

    <tdml:document><![CDATA[03@54$%^!@#.,/.'}{}{*()5]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time21>03:54:05</time21>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: epochFillIn
        Schema: dateTimeSchema
          Root: time22
       Purpose: This test demonstrates that for any pattern that omits components,
                the values for the omitted components are supplied from the Unix epoch 1970-01-01T00:00:00.000
-->
  
  <tdml:parserTestCase name="epochFillIn" root="time22"
    model="dateTimeSchema" description="Section 13 Simple Types - Patterns with ommitted components - DFDL-13-164R">

    <tdml:document><![CDATA[28]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time22>00:28:00</time22>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: epochFillIn2
        Schema: dateTimeSchema
          Root: time23
       Purpose: This test demonstrates that for any pattern that omits components,
                the values for the omitted components are supplied from the Unix epoch 1970-01-01T00:00:00.000
-->
  
  <tdml:parserTestCase name="epochFillIn2" root="time23"
    model="dateTimeSchema" description="Section 13 Simple Types - Patterns with ommitted components - DFDL-13-164R">

    <tdml:document><![CDATA[]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time23>00:00:00</time23>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: epochFillIn3
        Schema: dateTimeSchema
          Root: time24
       Purpose: This test demonstrates that for any pattern that omits components,
                the values for the omitted components are supplied from the Unix epoch 1970-01-01T00:00:00.000
-->
  
  <tdml:parserTestCase name="epochFillIn3" root="time24"
    model="dateTimeSchema" description="Section 13 Simple Types - Patterns with ommitted components - DFDL-13-164R">

    <tdml:document><![CDATA[.]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <time24>00:00:00</time24>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimePattern02
        Schema: dateTimeSchema
          Root: dateTime03
       Purpose: This test demonstrates the dateTime data type with an explicit calendar Pattern.
                The data matches this pattern and should be parsed correctly. Note that it deduces the day of the month based on
                the year, month, and day of the week.
-->
  
  <tdml:parserTestCase name="dateTimePattern02" root="dateTime03"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[Twas a sunny Wednesday at 11 O'clock. The year was 2008, and it was the hottest December we had ever experienced.]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime03>2008-12-03T11:00:00+00:00</dateTime03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimePattern03
        Schema: dateTimeSchema
          Root: dateTime03
       Purpose: This test demonstrates the dateTime data type with an explicit calendar Pattern.
                The data matches this pattern and should be parsed correctly. The test also demonstrates the use of
                a lax calendarCheckPolicy
-->
  
  <tdml:parserTestCase name="dateTimePattern03" root="dateTime04"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[27:30:30 February-29-2012]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime04>2012-03-01T03:30:30</dateTime04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeCalendarDaysInFirstWeek
        Schema: dateTimeSchema
          Root: dateTime05
       Purpose: This test demonstrates the calendarDaysInFirstWeek property when combined with the calendarFirstDayOfWeek property.
                Since the first week of Feb, 2013 is specified, the calendarFirstDayOfWeek is set to Tuesday, and calendarDaysInFirstWeek
                is set to 5, the first full week of Feb will be selected (starting on Tuesday). In this case that will be Feb 5th.
-->
  
  <tdml:parserTestCase name="dateTimeCalendarDaysInFirstWeek" root="dateTime05"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[01 02 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime05>2013-02-05T00:00:00</dateTime05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeCalendarDaysInFirstWeek2
        Schema: dateTimeSchema
          Root: dateTime06
       Purpose: This test demonstrates the calendarDaysInFirstWeek property when combined with the calendarFirstDayOfWeek property.
                Since the first week of Feb, 2013 is specified, the calendarFirstDayOfWeek is set to Thursday, and calendarDaysInFirstWeek
                is set to 7, the first full week of Feb will be selected (starting on Thursday). In this case that will be Feb 7th.
-->
  
  <tdml:parserTestCase name="dateTimeCalendarDaysInFirstWeek2" root="dateTime06"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[01 02 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime06>2013-02-07T00:00:00</dateTime06>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeCalendarDaysInFirstWeek3
        Schema: dateTimeSchema
          Root: dateTime07
       Purpose: This test demonstrates the calendarDaysInFirstWeek property when combined with the calendarFirstDayOfWeek property.
                Since the first week of Feb, 2013 is specified, the calendarFirstDayOfWeek is set to Thursday, and calendarDaysInFirstWeek
                is set to 2, the first week that contains 2 Feb days that starts on Thursday will be selected. In this case that will be Jan 31th.
-->
  
  <tdml:parserTestCase name="dateTimeCalendarDaysInFirstWeek3" root="dateTime07"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[01 02 2013]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime07>2013-01-31T00:00:00</dateTime07>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeCalendarDaysInFirstWeek4
        Schema: dateTimeSchema
          Root: dateTime08
       Purpose: This test demonstrates the calendarDaysInFirstWeek property when combined with the calendarFirstDayOfWeek property.
                Since the first week of Feb, 2013 is specified, the calendarFirstDayOfWeek is set to Sunday, and calendarDaysInFirstWeek
                is set to 7, the first week that contains 7 Feb days that starts on Sunday will be selected. In this case that will be Feb 3rd.
-->
  
  <tdml:parserTestCase name="dateTimeCalendarDaysInFirstWeek4" root="dateTime08"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[01 02 2013 12:43:30PM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime08>2013-02-03T12:43:30</dateTime08>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeCalendarDaysInFirstWeek5
        Schema: dateTimeSchema
          Root: dateTime08
       Purpose: This test demonstrates the calendarDaysInFirstWeek property when combined with the calendarFirstDayOfWeek property.
                Since the first week of Jan, 2013 is specified, the calendarFirstDayOfWeek is set to Sunday, and calendarDaysInFirstWeek
                is set to 7, the first week that contains 7 Jan days that starts on Sunday will be selected. In this case that will be Jan 6th.
-->
  
  <tdml:parserTestCase name="dateTimeCalendarDaysInFirstWeek5" root="dateTime08"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[01 01 2013 12:43:30PM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime08>2013-01-06T12:43:30</dateTime08>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeCalendarDaysInFirstWeek6
        Schema: dateTimeSchema
          Root: dateTime08
       Purpose: This test demonstrates the calendarDaysInFirstWeek property when combined with the calendarFirstDayOfWeek property.
                Since the second week of Jan, 2013 is specified, the calendarFirstDayOfWeek is set to Sunday, and calendarDaysInFirstWeek
                is set to 7, the second week that contains 7 Jan days that starts on Sunday will be selected. In this case that will be Jan 13th.
-->
  
  <tdml:parserTestCase name="dateTimeCalendarDaysInFirstWeek6" root="dateTime08"
    model="dateTimeSchema" description="Section 13 Simple Types - calendarDaysInFirstWeek - DFDL-13-143R"
    roundTrip="false">

    <tdml:document><![CDATA[02 01 2013 12:43:30PM]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime08>2013-01-13T12:43:30</dateTime08>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeTrim01
        Schema: dateTimeSchema
          Root: dateTime09
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties on a dateTime object
-->
  
  <tdml:parserTestCase name="dateTimeTrim01" root="dateTime09"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[.....03.04.1999 04:31:44PM.....]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime09>1999-03-04T16:31:44</dateTime09>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeTrim02
        Schema: dateTimeSchema
          Root: dateTime10
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties on a dateTime object
-->
  
  <tdml:parserTestCase name="dateTimeTrim02" root="dateTime10"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document><![CDATA[03.04.1999 04:31:44PM:::::::::::::::::::::::::::::::::::::::::]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime10>1999-03-04T16:31:44</dateTime10>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeTrim03
        Schema: dateTimeSchema
          Root: dateTime11
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties on a dateTime object
                The pad character is a DFDL entity and the document uses a byte representation.

-->
  
  <tdml:parserTestCase name="dateTimeTrim03" root="dateTime11"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[09 09 09 09 30 33 2e 30 34 2e 31 39 39 39 20 30 34 3a 33 31 3a 34 34 50 4d 09 09 09 09]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime11>1999-03-04T16:31:44</dateTime11>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: dateTimeTrim04
        Schema: dateTimeSchema
          Root: dateTime12
       Purpose: This test demonstrates the use of the textCalendarJustification and textCalendarPadCharacter properties on a dateTime object
                The pad character is a DFDL entity and the document uses a byte representation.

-->
  
  <tdml:parserTestCase name="dateTimeTrim04" root="dateTime12"
    model="dateTimeSchema" description="Section 13 Simple Types - textCalendarJustification - DFDL-13-165R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[09 09 09 09 30 33 2e 30 34 2e 31 39 39 39 20 30 34 3a 36 31 3a 34 34 50 4d]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <dateTime12>1999-03-04T17:01:44</dateTime12>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

   <!--
    Test name: calendar_unparseError
    Schema: dateTimeSchema
    Purpose: Attempt to unparse an invalid calendar
  -->

  <tdml:unparserTestCase name="calendar_unparseError" root="date" roundTrip="false"
      model="dateTimeSchemaTNR" description="Section 5 Schema types - int - DFDL-5-013R">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:date>Not a calendar</ex:date>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>not a calendar</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

<!--
     Test Name: dateTextNumberRep
        Schema: dateTimeSchemaTNR
          Root: date
       Purpose: This test demonstrates that textNumberRep is not required for an xs:date

-->
  
  <tdml:parserTestCase name="dateTextNumberRep" root="date"
    model="dateTimeSchemaTNR" description="Section 13 Simple Types - calendarPatternKind - DFDL-13-138R">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[1987-04-30]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <date>1987-04-30+00:00</date>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  
  
  <tdml:defineSchema name="HexBinary">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"
      lengthUnits="bytes" encoding="UTF-8" separator="" initiator=""
      terminator="" occursCountKind="parsed" ignoreCase="no"
      textNumberRep="standard" representation="binary" initiatedContent="no"  />

    <xs:element name="hb_root01">
      <xs:complexType>
        <xs:sequence dfdl:initiatedContent="no"
          dfdl:separatorPosition="postfix" dfdl:separator=", ."
          dfdl:separatorSuppressionPolicy="anyEmpty" >
          <xs:element name="text" type="xs:hexBinary" maxOccurs="unbounded"
            minOccurs="0" dfdl:encoding="ISO-8859-1" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="hb_root02">
      <xs:complexType>
        <xs:sequence dfdl:initiatedContent="no"
          dfdl:separatorPosition="infix" dfdl:separator=","
          dfdl:separatorSuppressionPolicy="anyEmpty" >
          <xs:element name="text" type="xs:hexBinary" maxOccurs="unbounded"
            minOccurs="0" dfdl:encoding="ISO-8859-1" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="hb_root03">
      <xs:complexType>
        <xs:sequence dfdl:initiatedContent="no"
          dfdl:separatorPosition="infix" dfdl:separator="%#r2C;"
          dfdl:separatorSuppressionPolicy="anyEmpty" >
          <xs:element name="text" type="xs:hexBinary" maxOccurs="unbounded"
            minOccurs="0" dfdl:encoding="ISO-8859-1" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

        <xs:element name="hb_root04">
            <xs:complexType>
                <xs:sequence dfdl:initiatedContent="no"
                    dfdl:separatorPosition="infix" dfdl:separator="%#r2C;"
                    dfdl:separatorSuppressionPolicy="anyEmpty">
                    <xs:element name="text" type="ex:stHexBinary_01" maxOccurs="unbounded"
                        minOccurs="0" dfdl:lengthKind="implicit" dfdl:encoding="ISO-8859-1">
                        <xs:annotation>
                            <xs:appinfo source="http://www.ogf.org/dfdl/">
                                <dfdl:assert test="{ dfdl:checkConstraints(.) }"
                                    message="Assertion failed for dfdl:checkConstraints(.)" />
                            </xs:appinfo>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:complexType>
        </xs:element>
    
    <xs:element name="hB_root05">
            <xs:complexType>
        <xs:sequence>
          <xs:element name="str" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="10" dfdl:lengthUnits="characters"/>
          <xs:element name="hex" type="xs:hexBinary" dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ xs:hexBinary(../ex:str) }" dfdl:encoding="ISO-8859-1" />
                </xs:sequence>
            </xs:complexType>
        </xs:element>

    <xs:element name="hb_root06">
      <xs:complexType>
        <xs:sequence dfdl:initiatedContent="no"
          dfdl:separatorPosition="postfix" dfdl:separator=", ."
          dfdl:separatorSuppressionPolicy="anyEmpty" >
          <xs:element name="text" type="xs:hexBinary" maxOccurs="unbounded"
            minOccurs="0" dfdl:encoding="US-ASCII" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:simpleType name="stHexBinary_01" >
      <xs:restriction base="xs:hexBinary">
        <xs:minLength value="40"/>
        <xs:maxLength value="40"/>
      </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="stHexBinary_02" >
      <xs:restriction base="xs:hexBinary">
        <xs:minLength value="10"/>
        <xs:maxLength value="10"/>
      </xs:restriction>
    </xs:simpleType>
    
    <xs:element name="hB_rep" type="xs:hexBinary" dfdl:lengthKind="delimited" dfdl:encoding="ISO-8859-1"/>

    <xs:element name="hB_fromString" type="xs:hexBinary" dfdl:encoding="ISO-8859-1" dfdl:inputValueCalc="{ xs:string('DEADBEEF') }" />

    <xs:element name="hB_imp">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hB" type="ex:stHexBinary_02" dfdl:lengthKind="implicit"/>
          <xs:element name="extra" type="xs:hexBinary" dfdl:lengthKind="delimited" dfdl:encoding="ISO-8859-1"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="hB_imp2">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hB" type="ex:stHexBinary_02" dfdl:encoding="utf-16be" dfdl:lengthKind="implicit"/>
          <xs:element name="extra" type="xs:hexBinary" dfdl:lengthKind="delimited" dfdl:encoding="ISO-8859-1" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="hB_imp3">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hB" type="ex:stHexBinary_02" dfdl:encoding="utf-16le" dfdl:lengthKind="implicit"/>
          <xs:element name="extra" type="xs:hexBinary" dfdl:lengthKind="delimited" dfdl:encoding="ISO-8859-1"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="hB_specifiedLengthUnaligned">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hblen" type="xs:unsignedInt" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="7" />
          <xs:element name="hb" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{ ../ex:hblen }" />
          <xs:element name="extra1" type="xs:unsignedInt" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="1" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="hB_bits_le_lsbf">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hb1" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="13" dfdl:bitOrder="leastSignificantBitFirst" dfdl:byteOrder="littleEndian"/>
          <xs:element name="hb2" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="3" dfdl:bitOrder="leastSignificantBitFirst" dfdl:byteOrder="littleEndian"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="hB_bits_be_msbf">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hb1" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="13" dfdl:bitOrder="mostSignificantBitFirst" dfdl:byteOrder="bigEndian"/>
          <xs:element name="hb2" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="3" dfdl:bitOrder="mostSignificantBitFirst" dfdl:byteOrder="bigEndian"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="hB_bits_le_msbf">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hb1" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="13" dfdl:bitOrder="mostSignificantBitFirst" dfdl:byteOrder="littleEndian" />
          <xs:element name="hb2" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:length="3" dfdl:bitOrder="mostSignificantBitFirst" dfdl:byteOrder="littleEndian" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="hB_bits_le_lsbf_2">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hb1" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="5" dfdl:bitOrder="leastSignificantBitFirst"
            dfdl:byteOrder="littleEndian" />
          <xs:element name="hb2" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="22" dfdl:bitOrder="leastSignificantBitFirst"
            dfdl:byteOrder="littleEndian" />
          <xs:element name="hb3" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="5" dfdl:bitOrder="leastSignificantBitFirst"
            dfdl:byteOrder="littleEndian" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="hB_bits_be_msbf_2">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hb1" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="5" dfdl:bitOrder="mostSignificantBitFirst"
            dfdl:byteOrder="bigEndian" />
          <xs:element name="hb2" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="22" dfdl:bitOrder="mostSignificantBitFirst"
            dfdl:byteOrder="bigEndian" />
          <xs:element name="hb3" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="5" dfdl:bitOrder="mostSignificantBitFirst"
            dfdl:byteOrder="bigEndian" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="hB_bits_le_msbf_2"
      dfdl:bitOrder="mostSignificantBitFirst" dfdl:byteOrder="littleEndian">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="hb1" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="5" dfdl:bitOrder="mostSignificantBitFirst"
            dfdl:byteOrder="littleEndian" />
          <xs:element name="hb2" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="22" dfdl:bitOrder="mostSignificantBitFirst"
            dfdl:byteOrder="littleEndian" />
          <xs:element name="hb3" type="xs:hexBinary" dfdl:alignmentUnits="bits" dfdl:lengthKind="explicit"
            dfdl:lengthUnits="bits" dfdl:length="5" dfdl:bitOrder="mostSignificantBitFirst"
            dfdl:byteOrder="littleEndian" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>
  
  <!--
    Test name: hexBinary_Delimited_01
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with
    bit input.
  -->

  <tdml:parserTestCase name="hexBinary_Delimited_01"
    root="hb_root01" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="twoPass">
    <tdml:document>
        <tdml:documentPart type="bits"><![CDATA[01010111011001010010000001100011011000010110111000100111011101000010000001100010011001010010000001100011011011110110111001]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[11001101110101011011010110010101100100001000000110001001111001001000000110111101110101011100100010000001110000011001010111]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[01000111010001111001001000000110010001101001011001100110011001100101011100100110010101101110011000110110010101110011001000]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[00011000010110111001111001001000000110110101101111011100100110010100101110001000000101011101100101001000000111011101101001]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[01101100011011000010000001100010011001010010000001110101011011100110100101110100011001010110010000100000011010010110111000]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[10000001101111011101010111001000100000011000110110111101101101011011010110111101101110001000000110100101101110011101000110]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[01010111001001100101011100110111010000101110001000000101000001100101011100100110100001100001011100000111001100100000011010]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[01011101000010011101110011001000000110011001100001011101000110010100100000011101000110100001100001011101000010000001110100]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[01101111011001000110000101111001001000000110100101110011001000000111010001101000011001010010000000110100011101000110100000]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[10000001101111011001100010000001001010011101010110110001111001001011000010000001100001011011100110010000100000011110010110]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[11110111010100100000011101110110100101101100011011000010000001101111011011100110001101100101001000000110000101100111011000]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[01011010010110111000100000011000100110010100100000011001100110100101100111011010000111010001101001011011100110011100100000]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[01100110011011110111001000100000011011110111010101110010001000000110011001110010011001010110010101100100011011110110110100]]></tdml:documentPart>
      <tdml:documentPart type="bits"><![CDATA[101110]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
        <tdml:dfdlInfoset>
            <hb_root01>
        <text>57652063616E277420626520636F6E73756D6564206279206F757220706574747920646966666572656E63657320616E79206D6F7265</text>
        <text>2057652077696C6C20626520756E6974656420696E206F757220636F6D6D6F6E20696E746572657374</text>
        <text>205065726861707320697427732066617465207468617420746F6461792069732074686520347468206F66204A756C79</text>
        <text>20616E6420796F752077696C6C206F6E636520616761696E206265206669676874696E6720666F72206F75722066726565646F6D</text>
      </hb_root01>
        </tdml:dfdlInfoset>
    </tdml:infoset>
</tdml:parserTestCase>
  
  <tdml:parserTestCase name="hexBinary_Delimited_01a"
    root="hb_root01" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="twoPass">
    <tdml:document>123.456.789.</tdml:document>
    <tdml:infoset>
        <tdml:dfdlInfoset>
            <hb_root01>
        <text>313233</text>
        <text>343536</text>
        <text>373839</text>
      </hb_root01>
        </tdml:dfdlInfoset>
    </tdml:infoset>
</tdml:parserTestCase>

  <!--
    Test name: hexBinary_Delimited_02
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with
    byte input.
  -->

  <tdml:parserTestCase name="hexBinary_Delimited_02" root="hb_root02"
      model="HexBinary" description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[4e 6f 74 20 66 72 6f 6d 20 74 79 72 61 6e 6e
      79 2c 20 6f 70 70 72 65 73 73 69 6f 6e 2c 20 6f 72 20 70 65 72 73 65 63 75
      74 69 6f 6e 2c 20 62 75 74 20 66 72 6f 6d 20 61 6e 6e 69 68 69 6c 61 74 69
      6f 6e 2e]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hb_root02>
        <text>4E6F742066726F6D20747972616E6E79</text>
        <text>206F707072657373696F6E</text>
        <text>206F72207065727365637574696F6E</text>
        <text>206275742066726F6D20616E6E6968696C6174696F6E2E</text>
        </hb_root02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_Delimited_03
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with byte
    input using raw byte entities.
  -->

  <tdml:parserTestCase name="hexBinary_Delimited_03" root="hb_root03"
      model="HexBinary" description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[
      5765277265206669676874696E6720666F72206F757220726967
      687420746F206C6976652C20746F20657869737420616E642073
      686F756C642077652077696E20746865206461792C2074686520
      347468206F66204A756C792077696C6C206E6F206C6F6E676572
      206265206B6E6F776E20617320616E20416D65726963616E2068
      6F6C696461792C20627574206173207468652064617920776865
      6E2074686520776F726C64206465636C6172656420696E206F6E
      6520766F6963652C202757652077696C6C206E6F7420676F2071
      756965746C7920696E746F20746865206E696768742120576520
      77696C6C206E6F742076616E69736820776974686F7574206120
      66696768742120576527726520676F696E6720746F206C697665
      206F6E2C20776527726520676F696E6720746F20737572766976652E27]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hb_root03>
        <text>5765277265206669676874696E6720666F72206F757220726967687420746F206C697665</text>
        <text>20746F20657869737420616E642073686F756C642077652077696E2074686520646179</text>
        <text>2074686520347468206F66204A756C792077696C6C206E6F206C6F6E676572206265206B6E6F776E20617320616E20416D65726963616E20686F6C69646179</text>
        <text>206275742061732074686520646179207768656E2074686520776F726C64206465636C6172656420696E206F6E6520766F696365</text>
        <text>202757652077696C6C206E6F7420676F2071756965746C7920696E746F20746865206E69676874212057652077696C6C206E6F742076616E69736820776974686F757420612066696768742120576527726520676F696E6720746F206C697665206F6E</text>
        <text>20776527726520676F696E6720746F20737572766976652E27</text>
        </hb_root03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_Implicit_01
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with byte
    input using lengthKind implicit.
  -->

  <tdml:parserTestCase name="hexBinary_Implicit_01" root="hb_root04"
      model="HexBinary" description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[546F6461792077652063656C656272617465206F757220696E646570656E64656E63652064617921]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hb_root04>
        <text>546F6461792077652063656C656272617465206F757220696E646570656E64656E63652064617921</text>
        </hb_root04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_Implicit_02
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with byte
    input using lengthKind implicit.
  -->

  <tdml:parserTestCase name="hexBinary_Implicit_02" root="hB_imp"
      model="HexBinary" description="Section 12 Length Props - Implicit Lengths - hexBinary - DFDL-12-069R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte"><![CDATA[546F6461792077652063656C656272617465206F757220696E646570656E64656E63652064617921]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_imp>
          <hB>546F6461792077652063</hB>
          <extra>656C656272617465206F757220696E646570656E64656E63652064617921</extra>
        </hB_imp>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_Implicit_03
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with byte
    input using lengthKind implicit and utf-16be encoding.
  -->

  <tdml:parserTestCase name="hexBinary_Implicit_03" root="hB_imp2"
      model="HexBinary" description="Section 12 Length Props - Implicit Lengths - hexBinary - DFDL-12-069R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte">00 61 00 69 00 6E 00 74 00 20 00 74 00 68 00 61 00 74 00 20 00 73 00 6F 00 6D 00 65 00 20 00 74 00 65 00 78 00 74</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_imp2>
          <hB>00610069006E00740020</hB>
          <extra>007400680061007400200073006F006D006500200074006500780074</extra>
        </hB_imp2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_Implicit_03b
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with byte
    input using lengthKind implicit and utf-16be encoding. 
  -->

  <tdml:parserTestCase name="hexBinary_Implicit_03b" root="hB_imp2"
      model="HexBinary" description="Section 12 Length Props - Implicit Lengths - hexBinary - DFDL-12-069R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte">00 64 00 6F 00 6E 00 27 00 74 00 20 00 74 00 72 00 69 00 6D 00 20 00 69 00 74 00 21</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_imp2>
          <hB>0064006F006E00270074</hB>
          <extra>0020007400720069006D0020006900740021</extra>
        </hB_imp2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_Implicit_03c
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with byte
    input using lengthKind implicit and utf-16be encoding. 
  -->

  <tdml:parserTestCase name="hexBinary_Implicit_03c" root="hB_imp2"
      model="HexBinary" description="Section 12 Length Props - Implicit Lengths - hexBinary - DFDL-12-069R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte">0074 0065 0073 0074 0063</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_imp2>
          <hB>00740065007300740063</hB>
          <extra></extra>
        </hB_imp2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_Implicit_04
    Schema: HexBinary
    Purpose: This document demonstrates the use of the hexBinary simple type with byte
    input using lengthKind implicit and utf-16le encoding.
  -->

  <tdml:parserTestCase name="hexBinary_Implicit_04" root="hB_imp3"
      model="HexBinary" description="Section 12 Length Props - Implicit Lengths - hexBinary - DFDL-12-069R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte">61 00 69 00 6E 00 74 00 20 00 74 00 68 00 61 00 74 00 20 00 73 00 6F 00 6D 00 65 00 20 00 74 00 65 00 78 00 74 00</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_imp3>
          <hB>610069006E0074002000</hB>
          <extra>7400680061007400200073006F006D00650020007400650078007400</extra>
        </hB_imp3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: hexBinary_specifiedLengthUnaligned
    Schema: HexBinary
    Purpose: This document demonstrates the use of unaligned hexBinary with a specified length
  -->

  <tdml:parserTestCase name="hexBinary_specifiedLengthUnaligned" root="hB_specifiedLengthUnaligned"
      model="HexBinary" description="Section 12 Length Props - hexBinary - DFDL-12-069R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="bits">0000011</tdml:documentPart>
      <tdml:documentPart type="byte">FFFFFF</tdml:documentPart>
      <tdml:documentPart type="bits">0</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_specifiedLengthUnaligned>
          <hblen>3</hblen>
          <hb>FFFFFF</hb>
          <extra1>0</extra1>
        </hB_specifiedLengthUnaligned>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_func
       Schema: HexBinary
      Purpose: This document demonstrates the use of the hexBinary constructor function. In this case it will turn
               a string (assumed compliant) into a string of hexBinary
  -->

  <tdml:parserTestCase name="hexBinary_func" root="hB_root05"
      model="HexBinary" description="Section 23 - xs:hexBinary() - DFDL-23-077R"
    roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="text">ABCDABABAB</tdml:documentPart>
      <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_root05>
          <str>ABCDABABAB</str>
          <hex>ABCDABABAB</hex>
        </hB_root05>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hexBinary_func_neg
       Schema: HexBinary
      Purpose: This document demonstrates the use of the hexBinary constructor function. In this case the input string
               is not compatible with xs:hexBinary and the test should fail
  -->

  <tdml:parserTestCase name="hexBinary_func_neg" root="hB_root05"
      model="HexBinary" description="Section 23 - xs:hexBinary() - DFDL-23-077R">
    <tdml:document>
      <tdml:documentPart type="text">PPPDABAIAB</tdml:documentPart>
      <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>PPPDABAIAB</tdml:error>
      <tdml:error>Invalid hexadecimal digit</tdml:error>
    </tdml:errors>        
  </tdml:parserTestCase>

  <!--
    Test name: hexBinary_Delimited_04
    Schema: HexBinary
    Purpose: This document demonstrates an error when hexBinary is delimited and has an encoding that is not ISO-8859-1
  -->

  <tdml:parserTestCase name="hexBinary_Delimited_04"
    root="hb_root06" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document><![CDATA[123]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>xs:hexBinary</tdml:error>
      <tdml:error>dfdl:lengthKind="delimited"</tdml:error>
      <tdml:error>dfdl:encoding="ISO-8859-1"</tdml:error>
      <tdml:error>US-ASCII</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: hB_bits_lsbf
    Schema: HexBinary
    Purpose: This document demonstrates hexBinary with non byte length is allowed
  -->

  <tdml:parserTestCase name="hexBinary_bits_le_lsbf"
    root="hB_bits_le_lsbf" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="bits">00110101 10101010</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_bits_le_lsbf>
          <hb1>350A</hb1>
          <hb2>05</hb2>
        </hB_bits_le_lsbf>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="hexBinary_bits_be_msbf"
    root="hB_bits_be_msbf" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="bits">00110101 10101010</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_bits_be_msbf>
          <hb1>35A8</hb1>
          <hb2>40</hb2>
        </hB_bits_be_msbf>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="hexBinary_bits_le_msbf"
    root="hB_bits_le_msbf" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="bits">00110101 10101010</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_bits_le_msbf>
          <hb1>35A8</hb1>
          <hb2>40</hb2>
        </hB_bits_le_msbf>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="hexBinary_bits_le_lsbf_2"
    root="hB_bits_le_lsbf_2" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte">DEADBEEF</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_bits_le_lsbf_2>
          <hb1>1E</hb1>
          <hb2>6EF53D</hb2>
          <hb3>1D</hb3>
        </hB_bits_le_lsbf_2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="hexBinary_bits_be_msbf_2"
    root="hB_bits_be_msbf_2" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte">DEADBEEF</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_bits_be_msbf_2>
          <hb1>D8</hb1>
          <hb2>D5B7DC</hb2>
          <hb3>78</hb3>
        </hB_bits_be_msbf_2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="hexBinary_bits_le_msbf_2"
    root="hB_bits_le_msbf_2" model="HexBinary"
    description="Section 5 Simple Types - hexBinary - DFDL-5-025R" roundTrip="true">
    <tdml:document>
      <tdml:documentPart type="byte">DEADBEEF</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <hB_bits_le_msbf_2>
          <hb1>D8</hb1>
          <hb2>D5B7DC</hb2>
          <hb3>78</hb3>
        </hB_bits_le_msbf_2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: NonNegativeInteger
       Schema: nonNegativeInteger.dfdl.xsd
      Purpose: User provided test for DFDL-610. Verifies nonNegativeInteger
               implementation works.
  -->
  <tdml:parserTestCase name="NonNegativeInteger" root="Date"
    model="nonNegativeInteger.dfdl.xsd" description="nonNegativeInteger test"
    roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text" replaceDFDLEntities="true"><![CDATA[Date: 20%LF;]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <Date>
          <Day>20</Day>
        </Date>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: NonNegativeInteger_Fail
       Schema: nonNegativeInteger.dfdl.xsd
      Purpose: User provided test for DFDL-610. Verifies nonNegativeInteger
               implementation works.
  -->
  <tdml:parserTestCase name="NonNegativeInteger_Fail" root="Date"
    model="nonNegativeInteger.dfdl.xsd" description="nonNegativeInteger test">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[Date: -2
]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>nonNegativeInteger</tdml:error>
      <tdml:error>out of range</tdml:error>
      <tdml:error>-2</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="DFDL-307-one-octet.dfdl.xsd">

    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" representation="binary"
            binaryNumberRep="binary" lengthUnits="bits" byteOrder='bigEndian'
            alignment="1" alignmentUnits="bits" lengthKind='explicit' />

        <xs:element name="is-signed" dfdl:lengthKind="implicit">
            <xs:complexType>
                <xs:sequence>
                    <xs:element name="sign" type="xs:unsignedByte"
                        dfdl:length="1" />
                    <xs:element name="abs" type="xs:unsignedByte"
                        dfdl:length="7" />
                </xs:sequence>
            </xs:complexType>
        </xs:element>

        <xs:element name="e1" type="xs:unsignedByte" dfdl:length="1" />

        <xs:element name="e2" dfdl:lengthKind="implicit">
            <xs:complexType>
                <xs:sequence>
                    <xs:element name="others" type="xs:unsignedInt"
                        dfdl:length="7" />
                    <xs:element name="v" type="xs:unsignedByte" dfdl:length="1" />

                </xs:sequence>
            </xs:complexType>
        </xs:element>

    </tdml:defineSchema>
  
  <!--
    Test name: OneOctetBinaryParse
       Schema: DFDL-307-one-octet.dfdl.xsd
      Purpose: This is a basic test of parsing binary data. 
  -->

    <tdml:parserTestCase name="OneOctetBinaryParse"
        root="is-signed" model="DFDL-307-one-octet.dfdl.xsd" description="Section 13 - Simple Types of Binary Format">
        <tdml:document>
            <tdml:documentPart type="bits">00110000
            </tdml:documentPart>
        </tdml:document>
        <tdml:infoset>
            <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <is-signed>
                    <sign>0</sign>
                    <abs>48</abs>
                </is-signed>
            </tdml:dfdlInfoset>
        </tdml:infoset>
    </tdml:parserTestCase>
  
  <!--
    Test name: OneBit2
       Schema: DFDL-307-one-octet.dfdl.xsd
      Purpose: This is a basic test of parsing binary data. This specific example shows that you can parse
      a single bit.
  -->

    <tdml:parserTestCase name="OneBit2" root="e2"
        model="DFDL-307-one-octet.dfdl.xsd" description="Section 13 - Simple Types of Binary Format">
        <tdml:document>
            <tdml:documentPart type="bits">00000001
            </tdml:documentPart>
        </tdml:document>
        <tdml:infoset>
            <tdml:dfdlInfoset>
                <e2>
                    <others>0</others>
                    <v>1</v>
                </e2>
            </tdml:dfdlInfoset>
        </tdml:infoset>
    </tdml:parserTestCase>

</tdml:testSuite>
