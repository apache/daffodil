<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite xmlns:ex="http://example.com" xmlns="http://example.com"
  xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  xmlns:tns="http://example.com"
  >

  <tdml:defineSchema name="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd">

    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="implicit"
      lengthUnits="bytes" encoding="UTF-8" separator="" initiator=""
      terminator="" occursCountKind="parsed" ignoreCase="no"
      textNumberRep="standard" representation="binary" 
      dfdlx:parseUnparsePolicy="parseOnly"
      />

    <xs:simpleType name="intToString" dfdlx:repType="xs:int" dfdlx:inputTypeCalc="{ 'a' }" dfdlx:outputTypeCalc="{ 0 }">
      <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:simpleType name="stringToInt" dfdlx:repType="xs:string" dfdlx:inputTypeCalc="{ 0 }" dfdlx:outputTypeCalc="{ 'a' }">
      <xs:restriction base="xs:int"/>
    </xs:simpleType>

    <xs:simpleType name="uint8" dfdl:length="1" dfdl:lengthKind="explicit">
      <xs:restriction base="xs:int"/>
    </xs:simpleType>

    <xs:simpleType name="string8" dfdl:length="1" dfdl:lengthKind="explicit">
      <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:element name="typeCalcDispatch_typeError_01" type="xs:int" dfdl:inputValueCalc="{ dfdlx:inputTypeCalc('tns:intToString', 0) }" />
    <xs:element name="typeCalcDispatch_typeError_02" type="xs:int" dfdl:inputValueCalc="{ dfdlx:outputTypeCalc('tns:stringToInt', 0) }" />

    <xs:element name="typeCalcDispatch_typeError_03" dfdlx:parseUnparsePolicy="unparseOnly">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="raw" dfdl:outputValueCalc="{ dfdlx:outputTypeCalcNextSibling() }" type="tns:uint8" dfdlx:parseUnparsePolicy="unparseOnly"/>
          <xs:element name="stringToInt" type="stringToInt" dfdlx:parseUnparsePolicy="unparseOnly" dfdl:inputValueCalc="{ 0 }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="typeCalcDispatch_typeError_04" dfdlx:parseUnparsePolicy="unparseOnly">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="raw" dfdl:outputValueCalc="{ dfdlx:outputTypeCalcNextSibling() }" type="tns:uint8" dfdlx:parseUnparsePolicy="unparseOnly"/>
          <xs:element name="stringToInt" type="stringToInt" dfdlx:parseUnparsePolicy="unparseOnly" dfdl:inputValueCalc="{ 0 }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="typeCalcDispatch_typeError_05">
      <xs:simpleType dfdlx:repType="tns:string8" dfdlx:inputTypeCalc="{ dfdlx:repTypeValue() }">
        <xs:restriction base="xs:int"/>
      </xs:simpleType>
    </xs:element>

    <xs:element name="typeCalcDispatch_typeError_06">
      <xs:simpleType dfdlx:repType="tns:string8" dfdlx:inputTypeCalc="{ dfdlx:repTypeValue() }">
        <xs:restriction base="xs:int"/>
      </xs:simpleType>
    </xs:element>

    <xs:element name="typeCalcDispatch_typeError_07" dfdlx:parseUnparsePolicy="unparseOnly" >
      <xs:simpleType dfdlx:repType="tns:uint8" dfdlx:outputTypeCalc="{ dfdlx:logicalTypeValue() }">
        <xs:restriction base="xs:string"/>
      </xs:simpleType>
    </xs:element>

    <xs:element name="typeCalcDispatch_typeError_08" dfdlx:parseUnparsePolicy="unparseOnly">
      <xs:simpleType dfdlx:repType="tns:uint8" dfdlx:outputTypeCalc="{ dfdlx:logicalTypeValue() }">
        <xs:restriction base="xs:string"/>
      </xs:simpleType>
    </xs:element>

    <xs:element name="repTypeValue_bad_context_01" type="xs:string" dfdl:inputValueCalc="{ dfdlx:repTypeValue() }"/>
    <xs:element name="repTypeValue_bad_context_02" dfdlx:parseUnparsePolicy="unparseOnly">
      <xs:simpleType dfdlx:repType="tns:uint8" dfdlx:outputTypeCalc="{ dfdlx:repTypeValue() }" dfdlx:inputTypeCalc="{ 0 }">
        <xs:restriction base="xs:int"/>
      </xs:simpleType>
    </xs:element>
    <xs:element name="logicalTypeValue_bad_context_01" type="xs:string" dfdl:inputValueCalc="{ dfdlx:logicalTypeValue() }"/>
    <xs:element name="logicalTypeValue_bad_context_02">
      <xs:simpleType dfdlx:repType="tns:uint8" dfdlx:inputTypeCalc="{ dfdlx:logicalTypeValue() }" dfdlx:outputTypeCalc="{ 0 }">
        <xs:restriction base="xs:int"/>
      </xs:simpleType>
    </xs:element>

    <xs:element name="nonexistant_reptype_01">
      <xs:simpleType dfdlx:repType="tns:nonExistant" dfdlx:inputTypeCalc="{ 0 }">
        <xs:restriction base="xs:int"/>
      </xs:simpleType>
    </xs:element>

    <xs:simpleType name="inputConversionOnly" dfdlx:repType="tns:uint8" dfdlx:inputTypeCalc="{ 1 }">
      <xs:restriction base="xs:int"/>
    </xs:simpleType>

    <xs:element name="nonexistantOutputTypeCalc_01" type="xs:int" dfdl:inputValueCalc="{dfdlx:outputTypeCalc('tns:inputConversionOnly', 7)}"/>

    <xs:simpleType name="outputConversionOnly" dfdlx:repType="tns:uint8" dfdlx:outputTypeCalc="{ 1 }">
      <xs:restriction base="xs:int"/>
    </xs:simpleType>

    <xs:element name="nonexistantInputTypeCalc_01" type="xs:int" dfdl:inputValueCalc="{dfdlx:inputTypeCalc('tns:outputConversionOnly', 7)}"/>

    <xs:element name="nextSibling_01" dfdlx:parseUnparsePolicy="unparseOnly" >
      <xs:complexType>
        <xs:sequence>
          <xs:element name="raw" type="xs:int" dfdl:outputValueCalc="{ dfdlx:outputTypeCalcNextSibling() }" dfdlx:parseUnparsePolicy="unparseOnly" />
          <xs:choice>
            <xs:element name="a" type="tns:intToString" dfdlx:parseUnparsePolicy="unparseOnly" />
            <xs:element name="b" type="tns:stringToInt" dfdlx:parseUnparsePolicy="unparseOnly" />
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="nextSibling_02" dfdlx:parseUnparsePolicy="unparseOnly" >
      <xs:complexType>
        <xs:sequence>
          <xs:element name="raw" type="xs:int" dfdl:outputValueCalc="{ dfdlx:outputTypeCalcNextSibling() }" dfdlx:parseUnparsePolicy="unparseOnly" />
          <xs:choice>
            <xs:element name="a" type="tns:intToString" dfdlx:parseUnparsePolicy="unparseOnly" />
            <xs:element name="b" type="tns:uint8" dfdlx:parseUnparsePolicy="unparseOnly" />
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="nextSibling_03" dfdlx:parseUnparsePolicy="unparseOnly" >
      <xs:complexType>
        <xs:sequence>
          <xs:element name="raw" type="xs:int" dfdl:outputValueCalc="{ dfdlx:outputTypeCalcNextSibling() }" dfdlx:parseUnparsePolicy="unparseOnly" />
          <xs:element name="b" type="tns:uint8" dfdlx:parseUnparsePolicy="unparseOnly" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="nextSibling_04" dfdlx:parseUnparsePolicy="unparseOnly" >
      <xs:complexType>
        <xs:sequence>
          <xs:element name="raw" type="xs:int" dfdl:outputValueCalc="{ dfdlx:outputTypeCalcNextSibling() }" dfdlx:parseUnparsePolicy="unparseOnly" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:parserTestCase name="typeCalcDispatch_typeError_01"
    root="typeCalcDispatch_typeError_01" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte">
    </tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Cannot convert 'a' from String type to Long</tdml:error>
    </tdml:errors>
    <tdml:warnings>
      <tdml:warning>Schema Definition Warning</tdml:warning>
      <tdml:warning>result type (String) should be manually cast to the expected type (Int)</tdml:warning>
    </tdml:warnings>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="typeCalcDispatch_typeError_02"
    root="typeCalcDispatch_typeError_02" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte">
    </tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Cannot convert 'a' from String type to Long</tdml:error>
    </tdml:errors>
    <tdml:warnings>
      <tdml:warning>Schema Definition Warning</tdml:warning>
      <tdml:warning>result type (String) should be manually cast to the expected type (Int)</tdml:warning>
    </tdml:warnings>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="typeCalcDispatch_typeError_03"
    root="typeCalcDispatch_typeError_03" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <typeCalcDispatch_typeError_03>
          <stringToInt>0</stringToInt>
        </typeCalcDispatch_typeError_03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>Cannot convert</tdml:error>
      <tdml:error>from String type to Long</tdml:error>
    </tdml:errors>
    <tdml:warnings>
      <tdml:warning>Schema Definition Warning</tdml:warning>
      <tdml:warning>result type (String)</tdml:warning>
      <tdml:warning>expected type (Int)</tdml:warning>
    </tdml:warnings>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="typeCalcDispatch_typeError_04"
    root="typeCalcDispatch_typeError_04" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <typeCalcDispatch_typeError_04>
          <stringToInt>0</stringToInt>
        </typeCalcDispatch_typeError_04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
    </tdml:errors>
    <tdml:warnings>
      <tdml:warning>Schema Definition Warning</tdml:warning>
      <tdml:warning>result type (String) should be manually cast to the expected type (Int)</tdml:warning>
    </tdml:warnings>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="typeCalcDispatch_typeError_05"
    root="typeCalcDispatch_typeError_05" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="text">a</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Cannot convert</tdml:error>
      <tdml:error>from String type to Long</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="typeCalcDispatch_typeError_06"
    root="typeCalcDispatch_typeError_06" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="text">a</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Cannot convert</tdml:error>
      <tdml:error>From String type to Long</tdml:error>
    </tdml:errors>
    <tdml:warnings>
      <tdml:warning>Schema Definition Warning</tdml:warning>
      <tdml:warning>result type (String)</tdml:warning>
      <tdml:warning>manually cast</tdml:warning>
      <tdml:warning>Expected type (Int)</tdml:warning>
    </tdml:warnings>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="typeCalcDispatch_typeError_07"
    root="typeCalcDispatch_typeError_07" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <typeCalcDispatch_typeError_07>a</typeCalcDispatch_typeError_07>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>Cannot convert</tdml:error>
      <tdml:error>From String type to Long</tdml:error>
    </tdml:errors>
    <tdml:warnings>
      <tdml:warning>Schema Definition Warning</tdml:warning>
      <tdml:warning>result type (String)</tdml:warning>
      <tdml:warning>manually cast</tdml:warning>
      <tdml:warning>Expected type (Int)</tdml:warning>
    </tdml:warnings>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="typeCalcDispatch_typeError_08"
    root="typeCalcDispatch_typeError_08" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <typeCalcDispatch_typeError_08>a</typeCalcDispatch_typeError_08>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>Cannot convert 'a' from String type to Long</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="repTypeValue_bad_context_01"
    root="repTypeValue_bad_context_01" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdlx:repTypeValue() can only be defined on a simple type</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="repTypeValue_bad_context_02"
    root="repTypeValue_bad_context_02" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <repTypeValue_bad_context_02>0</repTypeValue_bad_context_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdlx:repTypeValue() may only be called from within dfdlx:inputTypeCalc</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="logicalTypeValue_bad_context_01"
    root="logicalTypeValue_bad_context_01" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdlx:logicalTypeValue() can only be defined on a simple type</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="logicalTypeValue_bad_context_02"
    root="logicalTypeValue_bad_context_02" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte">00</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdlx:logicalTypeValue() may only be called from within dfdlx:outputTypeCalc</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="nonexistant_reptype_01"
    root="nonexistant_reptype_01" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Cannot find reptype tns:nonExistant</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="nonexistantOutputTypeCalc_01"
    root="nonexistantOutputTypeCalc_01" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>tns:inputConversionOnly does not define an outputValueCalc</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="nonexistantInputTypeCalc_01"
    root="nonexistantInputTypeCalc_01" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>tns:outputConversionOnly does not define an inputValueCalc</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:defineSchema name="nonexistantTypeCalcType_01.dfdl.xsd">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="implicit"
      lengthUnits="bytes" encoding="UTF-8" separator="" initiator=""
      terminator="" occursCountKind="parsed" ignoreCase="no"
      textNumberRep="standard" representation="binary" 
      dfdlx:parseUnparsePolicy="parseOnly"
      />

     <xs:element name="root" type="xs:int" dfdl:inputValueCalc="{ dfdlx:inputTypeCalc('tns:nonExistant', 0) }"/>

  </tdml:defineSchema>

  <tdml:parserTestCase name="nonexistantTypeCalcType_01"
    root="root" model="nonexistantTypeCalcType_01.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>tns:nonExistant</tdml:error>
      <tdml:error>does not exist</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:defineSchema name="nonexistantTypeCalcType_02.dfdl.xsd">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="implicit"
      lengthUnits="bytes" encoding="UTF-8" separator="" initiator=""
      terminator="" occursCountKind="parsed" ignoreCase="no"
      textNumberRep="standard" representation="binary" 
      dfdlx:parseUnparsePolicy="parseOnly"
      />

     <xs:simpleType name="nonExistantTypeCalc">
       <xs:restriction base="xs:int"/>
     </xs:simpleType>
     <xs:element name="root" type="xs:int" dfdl:inputValueCalc="{ dfdlx:inputTypeCalc('tns:nonExistantTypeCalc', 0) }"/>

  </tdml:defineSchema>

  <tdml:parserTestCase name="nonexistantTypeCalcType_02"
    root="root" model="nonexistantTypeCalcType_02.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:document>
    <tdml:documentPart type="byte"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>tns:nonExistant</tdml:error>
      <tdml:error>does not have a repType</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:unparserTestCase name="nextSibling_01"
    root="nextSibling_01" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nextSibling_01>
          <raw>0</raw>
          <a>a</a>
        </nextSibling_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdlx:outputTypeCalcNextSibling</tdml:error>
      <tdml:error>all the possible next siblings have the same repType</tdml:error>
      <tdml:error>potential next siblings ex:a and ex:b</tdml:error>
      <tdml:error>have repTypes Int and String</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="nextSibling_02"
    root="nextSibling_02" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nextSibling_02>
          <raw>0</raw>
          <a>a</a>
        </nextSibling_02>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdlx:outputTypeCalcNextSibling</tdml:error>
      <tdml:error>potential next sibling</tdml:error>
      <tdml:error>ex:b</tdml:error>
      <tdml:error>does not define a type calculator</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="nextSibling_03"
    root="nextSibling_03" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nextSibling_03>
          <raw>0</raw>
          <b>0</b>
        </nextSibling_03>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdlx:outputTypeCalcNextSibling</tdml:error>
      <tdml:error>potential next sibling</tdml:error>
      <tdml:error>ex:b</tdml:error>
      <tdml:error>does not define a type calculator</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="nextSibling_04"
    root="nextSibling_04" model="inputTypeCalcFunctionErrors-Embedded.dfdl.xsd" description="Extensions - inputTypeCalc errors">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nextSibling_04>
          <raw>0</raw>
        </nextSibling_04>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdlx:outputTypeCalcNextSibling() called where no suitable next sibling exists</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

</tdml:testSuite>
