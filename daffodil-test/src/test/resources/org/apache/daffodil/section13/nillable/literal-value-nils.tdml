<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite suiteName="nested-separator-delimited"
  description="Tests separation and nested sequences." xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ct="http://w3.ibm.com/xmlns/dfdl/ctInfoset"
  xmlns:ex="http://example.com" xmlns="http://example.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  defaultRoundTrip="true">
  
  <tdml:defineSchema name="text_nil_only1">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator="" terminator="" separator="" separatorSuppressionPolicy="anyEmpty" separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes" encoding="ASCII" representation="text" occursCountKind="parsed" nilValueDelimiterPolicy="none"
      nilValue="nil %ES;" nilKind="literalValue" textNumberRep="standard" ignoreCase="no"/>

    <xs:element name="doc5" dfdl:lengthKind="delimited" nillable="true" type="xsd:string" dfdl:nilValue="%WSP*;"/>

  </tdml:defineSchema>


  <tdml:defineSchema name="text_03">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="ASCII" representation="text" occursCountKind="parsed"
      nilValueDelimiterPolicy="none" nilValue="nil %ES;" nilKind="literalValue"
      textNumberRep="standard" ignoreCase="no" />

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="," dfdl:terminator=";">
          <xs:element name="e1" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
          <xs:element name="e2" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
          <xs:element name="e3" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="docIC" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="," dfdl:terminator=";">
          <xs:element name="e1" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" dfdl:ignoreCase="yes"/>
          <xs:element name="e2" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" dfdl:ignoreCase="yes"/>
          <xs:element name="e3" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" dfdl:ignoreCase="yes"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:parserTestCase name="text_03" root="doc"
    model="text_03"
    description="Text_03 Two nilValues one a regular value the other a CharEntity - DFDL-13-235R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[0,nil,;]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc>
          <e1>0</e1>
          <e2 xsi:nil="true" />
          <e3 xsi:nil="true" />
        </ex:doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="text_03ic" root="docIC"
    model="text_03"
    description="Text_03 nil values with ignore case - DFDL-13-235R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[NIL,Nil,niL;]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:docIC>
          <e1 xsi:nil="true" />
          <e2 xsi:nil="true" />
          <e3 xsi:nil="true" />
        </ex:docIC>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:defineSchema name="text_04">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="ASCII" representation="text" occursCountKind="parsed"
      nilValueDelimiterPolicy="none" nilValue="nil %WSP;" nilKind="literalValue"
      textNumberRep="standard" ignoreCase="no" />

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="," dfdl:terminator=";">
          <xs:element name="e1" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
          <xs:element name="e2" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
          <xs:element name="e3" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:parserTestCase name="text_04" root="doc"
    model="text_04"
    description="Text_04 Two nilValues one a regular value the other a WSP CharEntity - DFDL-13-235R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[0,nil, ;]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc>
          <e1>0</e1>
          <e2 xsi:nil="true" />
          <e3 xsi:nil="true" />
        </ex:doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:defineSchema name="text_05">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="ASCII" representation="text" occursCountKind="parsed"
      nilValueDelimiterPolicy="none" nilValue="nil %WSP*;" nilKind="literalValue"
      textNumberRep="standard" ignoreCase="no" />

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="," dfdl:terminator=";">
          <xs:element name="e1" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
          <xs:element name="e2" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
          <xs:element name="e3" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:parserTestCase name="text_05" root="doc"
    model="text_05"
    description="Text_05 Two nilValues one a regular value the other a CharEntity - DFDL-13-235R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[0,nil, ;]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc>
          <e1>0</e1>
          <e2 xsi:nil="true" />
          <e3 xsi:nil="true" />
        </ex:doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:defineSchema name="text_06">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="ASCII" representation="text" occursCountKind="parsed"
      nilValueDelimiterPolicy="none" nilValue="nil %WSP+;" nilKind="literalValue"
      textNumberRep="standard" ignoreCase="no" />

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="," dfdl:terminator=";">
          <xs:element name="e1" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
          <xs:element name="e2" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
          <xs:element name="e3" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:parserTestCase name="text_06" root="doc"
    model="text_06"
    description="Text_06 Two nilValues one a regular value the other a WSP+ CharEntity - DFDL-13-235R"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[0,nil, 	 ;]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc>
          <e1>0</e1>
          <e2 xsi:nil="true" />
          <e3 xsi:nil="true" />
        </ex:doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:defineSchema name="binary_01">

    <!-- Note how in this format the nilValue looks like text, but will be 
      used
      to match binary data. The encoding is iso-8859-1, which allowed every 
      byte to
      be a valid character. This is an advanced DFDL techique for dealing 
      with binary
      data as if it were text so as to be able to use features like literalValue 
      nilKind
      with binary data -->
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="iso-8859-1" representation="binary" occursCountKind="parsed"
      nilValueDelimiterPolicy="none" nilValue="%NUL;%NUL;%NUL;%NUL;"
      nilKind="literalValue" textNumberRep="standard" ignoreCase="no"
      byteOrder="bigEndian" binaryNumberRep="binary" lengthUnits="bytes" />

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="," dfdl:terminator=";">
          <xs:element name="e1" nillable="true" type="xsd:int"
            dfdl:lengthKind="implicit" />
          <xs:element name="e2" nillable="true" type="xsd:int"
            dfdl:lengthKind="implicit" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:parserTestCase name="binary_01" root="doc"
    model="binary_01" description="Binary_01 Basic nilValue - DFDL-13-235R">
    <!-- "0,nil;" -->
    <tdml:document>
      <tdml:documentPart type="byte">000000002CFFFFFFFF3B</tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc>
          <e1 xsi:nil="true" />
          <e2>-1</e2>
        </ex:doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  
    <tdml:defineSchema name="PaddedNils">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="ASCII" representation="text" occursCountKind="parsed"
      nilValueDelimiterPolicy="none" nilValue="nil %WSP+;" nilKind="literalValue"
      textNumberRep="standard" ignoreCase="no" textTrimKind="padChar" textNumberPadCharacter="P"/>

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="," dfdl:terminator=";">
          <xs:element name="e1" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" dfdl:textNumberJustification="left" />
          <xs:element name="e2" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" dfdl:textNumberJustification="right"/>
          <xs:element name="e3" nillable="true" type="xsd:int"
            dfdl:lengthKind="delimited" dfdl:textNumberJustification="center"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>
  
    <tdml:parserTestCase name="test_padded_nils" root="doc"
    model="PaddedNils"
    description="Verify that padding and nils work correctly"
    roundTrip="twoPass">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[0PPP,PPPnil,PPP   PPP;]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc>
          <e1>0</e1>
          <e2 xsi:nil="true" />
          <e3 xsi:nil="true" />
        </ex:doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>


  <tdml:defineSchema name="nillableComplex">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="ASCII" representation="text" occursCountKind="parsed"
      nilValueDelimiterPolicy="none"  nilKind="literalValue"
      textNumberRep="standard" ignoreCase="no" lengthKind="delimited"/>

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="/">
          <xs:element name="ct" nillable="true" dfdl:nilValue="%ES;">
            <xs:complexType>
              <xs:sequence dfdl:separator="," dfdl:terminator=";">
                <xs:element name="e1" type="xsd:int" />
                <xs:element name="e2" type="xsd:int" />
                <xs:element name="e3" type="xsd:int" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="after" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:parserTestCase name="test_complex_nil" root="doc"
    model="nillableComplex"
    description="Verify complex elements can be nilllable">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[/after]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc>
          <ct xsi:nil="true" />
          <after>after</after>
        </ex:doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test Name: text_nil_characterClass_04_parse
     Schema: text_nil_only1
     Purpose: This test demonstrates using the character class WSP* as the nilValue
-->

  <tdml:parserTestCase name="text_nil_characterClass_04_parse" root="doc5"
    model="text_nil_only1">

    <tdml:document>
      <tdml:documentPart type="text"></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc5 xsi:nil="true" />
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>


  <tdml:defineSchema name="nillableOVC">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="ASCII" representation="text" occursCountKind="parsed"
      nilValueDelimiterPolicy="none" nilValue="nil" nilKind="literalValue"
      textNumberRep="standard" ignoreCase="no" />

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="," dfdl:terminator=";">
          <xs:element name="e1" nillable="true" type="xsd:string" dfdl:lengthKind="delimited" />
          <xs:element name="e2" nillable="true" type="xsd:string" dfdl:lengthKind="delimited" dfdl:outputValueCalc="{ if (../ex:e3 eq '3') then 'nil' else '2' }"/>
          <xs:element name="e3" nillable="true" type="xsd:string" dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:parserTestCase name="nillable_ovc_01" root="doc"
    model="nillableOVC"
    description="Nillable output value calc - DFDL-13-235R">

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[0,nil,3;]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:doc>
          <e1>0</e1>
          <e2 xsi:nil="true" />
          <e3>3</e3>
        </ex:doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

</tdml:testSuite>
