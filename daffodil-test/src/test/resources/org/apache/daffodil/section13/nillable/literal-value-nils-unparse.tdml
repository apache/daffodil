<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite suiteName="literal nils unparsing" description="Tests separation and nested sequences." xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:ex="http://example.com" xmlns="http://example.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  defaultRoundTrip="true">

  <tdml:defineSchema name="text_nil_only1">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator="" terminator="" separator="" separatorSuppressionPolicy="anyEmpty" separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes" encoding="ASCII" representation="text" occursCountKind="parsed" nilValueDelimiterPolicy="none"
      nilValue="nil %ES;" nilKind="literalValue" textNumberRep="standard" ignoreCase="no"/>

    <xs:element name="doc" dfdl:lengthKind="delimited" nillable="true" type="xsd:string"/>
    <xs:element name="doc2" dfdl:lengthKind="delimited" nillable="true" type="xsd:string" dfdl:nilValue="%ES;"/>
    <xs:element name="doc3" dfdl:lengthKind="delimited" nillable="true" type="xsd:string" dfdl:nilValue="%WSP;"/>
    <xs:element name="doc4" dfdl:lengthKind="delimited" nillable="true" type="xsd:string" dfdl:nilValue="%WSP+;"/>
    <xs:element name="doc5" dfdl:lengthKind="delimited" nillable="true" type="xsd:string" dfdl:nilValue="%WSP*;"/>
    <xs:element name="doc6" dfdl:lengthKind="delimited" nillable="true" type="xsd:string" dfdl:outputNewLine="%CR;%LF;" dfdl:nilValue="%NL;"/>
    <xs:element name="doc7" dfdl:lengthKind="delimited" nillable="true" type="xsd:string" dfdl:outputNewLine="%LF;" dfdl:nilValue="%NL;"/>

    <xs:simpleType name="type" dfdl:lengthKind="delimited">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:element name="doc8">
        <xs:complexType>
            <xs:sequence dfdl:separator=",">
                <xs:element name="e1" type="ex:type" nillable="true" minOccurs="2" maxOccurs="10" dfdl:nilValue="NIL" />
            </xs:sequence>
        </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

<!--
  Test Name: scalar_nonDefaultable_nillable
     Schema: text_nil_only1
       Root: doc8
    Purpose: This test demonstrates that you can successfully unparse scalar non-defaultable nillable simple types
-->

  <tdml:unparserTestCase name="scalar_nonDefaultable_nillable" root="doc8" model="text_nil_only1">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc8>
            <e1>one</e1>
            <e1>two</e1>
            <e1>three</e1>
            <e1 xsi:nil="true"/>
            <e1>five</e1>
        </doc8>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[one,two,three,NIL,five]]></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: scalar_nonDefaultable_nillable_02
     Schema: text_nil_only1
       Root: doc8
    Purpose: This test demonstrates that you can successfully unparse scalar non-defaultable nillable simple types
-->

  <tdml:unparserTestCase name="scalar_nonDefaultable_nillable_02" root="doc8" model="text_nil_only1">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc8>
            <e1>one</e1>
            <e1>two</e1>
            <e1 xsi:nil="true"/>
            <e1 xsi:nil="true"/>
            <e1 xsi:nil="true"/>
            <e1 xsi:nil="true"/>
            <e1 xsi:nil="true"/>
            <e1>eight</e1>
        </doc8>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[one,two,NIL,NIL,NIL,NIL,NIL,eight]]></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: scalar_nonDefaultable_nillable_03
     Schema: text_nil_only1
       Root: doc8
    Purpose: This test demonstrates that you can successfully unparse scalar non-defaultable nillable simple types
-->

  <tdml:unparserTestCase name="scalar_nonDefaultable_nillable_03" root="doc8" model="text_nil_only1">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc8>
            <e1>one</e1>
            <e1>two</e1>
            <e1>three</e1>
        </doc8>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[one,two,three]]></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: text_nil_only1
     Schema: text_nil_only1
       Root: doc
    Purpose: This test demonstrates unparsing a literal nil with nilValue set to a list that
             contains a literal string and a character entity. It demonstrates that the first
             value for nil is selected when unparsing.
-->

  <tdml:unparserTestCase name="text_nil_only1" root="doc" model="text_nil_only1" description="unparse a literal nil">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[nil]]></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

  <tdml:defineSchema name="text_nil_only2">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator="" terminator="" separator="" separatorSuppressionPolicy="anyEmpty" separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes" encoding="ASCII" representation="text" occursCountKind="parsed" nilValueDelimiterPolicy="none"
      nilValue="%ES; nil" nilKind="literalValue" textNumberRep="standard" ignoreCase="no"/>

    <xs:element name="doc" dfdl:lengthKind="delimited" nillable="true" type="xsd:string"/>

  </tdml:defineSchema>

<!--
  Test Name: text_nil_only2
     Schema: text_nil_only2
       Root: doc
    Purpose: This test demonstrates unparsing a literal nil with nilValue set to a list that
             contains a character entity and a literal string. It demonstrates that the first
             value for nil is selected when unparsing.
-->

  <tdml:unparserTestCase name="text_nil_only2" root="doc" model="text_nil_only2" description="unparse a literal nil">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>


  <tdml:defineSchema name="text_nil_only3">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator="" terminator="" separator="" separatorSuppressionPolicy="anyEmpty" separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes" encoding="ASCII" representation="text" occursCountKind="parsed" nilValueDelimiterPolicy="none"
      nilValue="%ES; nil" nilKind="literalValue" textNumberRep="standard" ignoreCase="no"/>

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

<!--
  Test Name: text_nil_only3
     Schema: text_nil_only3
       Root: doc
    Purpose: This test demonstrates unparsing a sequence of literal nils.
-->

  <tdml:unparserTestCase name="text_nil_only3" root="doc" model="text_nil_only3" description="unparse a literal nil">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc>
          <e1 xsi:nil="true"/>
          <e2 xsi:nil="true"/>
        </doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>
  
  <tdml:defineSchema name="text_nil_only4">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator="" terminator="" separator="," separatorSuppressionPolicy="anyEmpty" separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes" encoding="ASCII" representation="text" occursCountKind="parsed" nilValueDelimiterPolicy="none"
      nilValue="nil" nilKind="literalValue" textNumberRep="standard" ignoreCase="no"/>
    
    <dfdl:defineFormat name="nil0">
      <dfdl:format ref="ex:GeneralFormat" nilValue="0" />
    </dfdl:defineFormat>
    
    <dfdl:defineFormat name="nilX">
      <dfdl:format ref="ex:GeneralFormat" nilValue="X" />
    </dfdl:defineFormat>

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc2" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" dfdl:ref="ex:nil0" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" dfdl:ref="ex:nil0" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc3" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" dfdl:ref="ex:nil0" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc4" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" dfdl:ref="ex:nil0" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" dfdl:ref="ex:nilX" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc5" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" dfdl:ref="ex:nil0" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc6" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" dfdl:nilValue="X" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" dfdl:nilValue="Y" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc7" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" dfdl:ref="nil0" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" dfdl:nilValue="Y" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc8" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" dfdl:nilValue="Y" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc9" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" dfdl:nilValue="X" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc10" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" dfdl:nilValue="X" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" dfdl:ref="ex:nil0" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc11" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" dfdl:nilValue="0" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="doc12" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" nillable="true" dfdl:nilValue="0" type="xsd:string" dfdl:lengthKind="delimited"/>
          <xs:element name="e2" nillable="true" type="xsd:string" dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

<!--
  Test Name: text_nil_only4
     Schema: text_nil_only4
       Root: doc
    Purpose: This test demonstrates unparsing a sequence of literal nils.
-->

  <tdml:unparserTestCase name="text_nil_only4" root="doc" model="text_nil_only4" description="unparse a literal nil">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc>
          <e1 xsi:nil="true"/>
          <e2 xsi:nil="true"/>
        </doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text">nil,nil</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: text_nil_only5
     Schema: text_nil_only4
       Root: doc2
    Purpose: This test demonstrates unparsing a sequence of literal nils.
-->

  <tdml:unparserTestCase name="text_nil_only5" root="doc2" model="text_nil_only4" description="unparse a literal nil">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc2>
          <e1 xsi:nil="true"/>
          <e2 xsi:nil="true"/>
        </doc2>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text">0,0</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only6
       Schema: text_nil_only4
         Root: doc3
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. One is set via a dfdl:ref, and the other is taken
               from the default format.
  -->

    <tdml:unparserTestCase name="text_nil_only6" root="doc3" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc3>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc3>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">0,nil</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only7
       Schema: text_nil_only4
         Root: doc4
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. They are both set via dfdl:ref and are set to 
               different defined formats.
  -->

    <tdml:unparserTestCase name="text_nil_only7" root="doc4" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc4>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc4>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">0,X</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only8
       Schema: text_nil_only4
         Root: doc5
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. The first is set via the default format, and the
               second is referencing a defined format.
  -->

    <tdml:unparserTestCase name="text_nil_only8" root="doc5" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc5>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc5>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">nil,0</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only9
       Schema: text_nil_only4
         Root: doc6
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. In this case, each nilValue is set explicitly on
               the element.
  -->

    <tdml:unparserTestCase name="text_nil_only9" root="doc6" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc6>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc6>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">X,Y</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only10
       Schema: text_nil_only4
         Root: doc7
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. In this case, the first nilValue is set by a referenced
               format definition, and the second is set explicitly on the element.
  -->

    <tdml:unparserTestCase name="text_nil_only10" root="doc7" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc7>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc7>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">0,Y</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only11
       Schema: text_nil_only4
         Root: doc8
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. In this case, the first nilValue is set by the 
               default format, and the second is set explicitly on the element.
  -->

    <tdml:unparserTestCase name="text_nil_only11" root="doc8" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc8>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc8>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">nil,Y</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only12
       Schema: text_nil_only4
         Root: doc9
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. In this case, the first nilValue is set explicitly
               on the element, and the second is set by the default format.
  -->

    <tdml:unparserTestCase name="text_nil_only12" root="doc9" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc9>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc9>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">X,nil</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only13
       Schema: text_nil_only4
         Root: doc9
      Purpose: This test demonstrates unparsing a sequence of nillable elements, where each value in the
               sequence uses a different nilValue. In this case, the first nilValue is set explicitly
               on the element, and the second is set by the default format. The first element is not nilled and the second is.
  -->

    <tdml:unparserTestCase name="text_nil_only13" root="doc9" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc9>
            <e1>data</e1>
            <e2 xsi:nil="true"/>
          </doc9>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">data,nil</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>

  <!--
    Test Name: text_nil_only14
       Schema: text_nil_only4
         Root: doc9
      Purpose: This test demonstrates unparsing a sequence of nillable elements, where each value in the
               sequence uses a different nilValue. In this case, the first nilValue is set explicitly
               on the element, and the second is set by the default format. The first element is not nilled and the second is.
  -->

    <tdml:unparserTestCase name="text_nil_only14" root="doc9" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc9>
            <e1 xsi:nil="true"/>
            <e2>data</e2>
          </doc9>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">X,data</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only15
       Schema: text_nil_only4
         Root: doc10
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. In this case, the first nilValue is set explicitly
               on the element, and the second is set by a referenced format.
  -->

    <tdml:unparserTestCase name="text_nil_only15" root="doc10" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc10>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc10>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">X,0</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  <!--
    Test Name: text_nil_only16
       Schema: text_nil_only4
         Root: doc11
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. In this case, the first nilValue is taken from the
               default format, and the second is set directly on the element.
  -->

    <tdml:unparserTestCase name="text_nil_only16" root="doc11" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc11>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc11>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">nil,0</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>

  <!--
    Test Name: text_nil_only17
       Schema: text_nil_only4
         Root: doc12
      Purpose: This test demonstrates unparsing a sequence of literal nils, where each value in the
               sequence uses a different nilValue. In this case, the first nilValue is set directly
               on the element, and the second is taken from the default format.
  -->

    <tdml:unparserTestCase name="text_nil_only17" root="doc12" model="text_nil_only4" description="unparse a literal nil">

      <tdml:infoset>
        <tdml:dfdlInfoset>
          <doc12>
            <e1 xsi:nil="true"/>
            <e2 xsi:nil="true"/>
          </doc12>
        </tdml:dfdlInfoset>
      </tdml:infoset>

      <tdml:document>
        <tdml:documentPart type="text">0,nil</tdml:documentPart>
      </tdml:document>
    </tdml:unparserTestCase>
  
  
  <tdml:defineSchema name="nillableComplex">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" initiator=""
      terminator="" separator="" separatorSuppressionPolicy="anyEmpty"
      separatorPosition="infix" documentFinalTerminatorCanBeMissing="yes"
      encoding="ASCII" representation="text" occursCountKind="parsed"
      nilValueDelimiterPolicy="none"  nilKind="literalValue"
      textNumberRep="standard" ignoreCase="no" lengthKind="delimited"/>

    <xs:element name="doc" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence dfdl:separator="/">
          <xs:element name="ct" nillable="true" dfdl:nilValue="%ES;">
            <xs:complexType>
              <xs:sequence dfdl:separator="," dfdl:terminator=";">
                <xs:element name="e1" type="xsd:int" />
                <xs:element name="e2" type="xsd:int" />
                <xs:element name="e3" type="xsd:int" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="after" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="doc2" nillable="true" dfdl:nilValue="%ES;">
      <xs:complexType>
        <xs:sequence dfdl:separator="/">
          <xs:element name="ct" nillable="true" dfdl:nilValue="%ES;">
            <xs:complexType>
              <xs:sequence dfdl:separator="," dfdl:terminator=";">
                <xs:element name="e1" type="xsd:int" />
                <xs:element name="e2" type="xsd:int" />
                <xs:element name="e3" type="xsd:int" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="after" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="doc3" nillable="true" dfdl:nilValue="%ES;">
      <xs:complexType>
        <xs:choice>
          <xs:element name="e1" type="xsd:int" dfdl:initiator="#" />
          <xs:element name="e3" type="xsd:int" dfdl:initiator="-"/>
        </xs:choice>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

<!--
  Test Name: text_complex_nil
     Schema: nillableComplex
       Root: doc
    Purpose: This test demonstrates unparsing a complex literal nil.
-->
  
  <tdml:unparserTestCase name="text_complex_nil" root="doc"
    model="nillableComplex"
    description="Verify complex elements can be nilllable">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc>
          <ct xsi:nil="true" />
          <after>after</after>
        </doc>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[/after]]></tdml:documentPart>
    </tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: text_complex_nil2
     Schema: nillableComplex
       Root: doc2
    Purpose: This test demonstrates unparsing a complex literal nil.
-->
  
  <tdml:unparserTestCase name="text_complex_nil2" root="doc2"
    model="nillableComplex"
    description="Verify complex elements can be nilllable">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc2 xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[]]></tdml:documentPart>
    </tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: text_complex_nil3
     Schema: nillableComplex
       Root: doc3
    Purpose: This test demonstrates unparsing a complex literal nil.
-->
  
  <tdml:unparserTestCase name="text_complex_nil3" root="doc3"
    model="nillableComplex"
    description="Verify complex elements can be nilllable">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc3 xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[]]></tdml:documentPart>
    </tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: text_nil_characterClass_01
     Schema: text_nil_only1
       Root: doc2
    Purpose: This test demonstrates unparsing a literal nil with nilValue set to a character entity. 
-->

  <tdml:unparserTestCase name="text_nil_characterClass_01" root="doc2" model="text_nil_only1" description="unparse a character class nil">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc2 xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[]]></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: text_nil_characterClass_02
     Schema: text_nil_only1
       Root: doc3
    Purpose: This test demonstrates unparsing a literal nil with nilValue set to a character entity. 
-->

  <tdml:unparserTestCase name="text_nil_characterClass_02" root="doc3" model="text_nil_only1" description="unparse a character class nil">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc3 xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[ ]]></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: text_nil_characterClass_03
     Schema: text_nil_only1
       Root: doc4
    Purpose: This test demonstrates unparsing a literal nil with nilValue set to a character entity. 
-->

  <tdml:unparserTestCase name="text_nil_characterClass_03" root="doc4" model="text_nil_only1" description="unparse a character class nil">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc4 xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[ ]]></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: text_nil_characterClass_04
     Schema: text_nil_only1
       Root: doc5
    Purpose: This test demonstrates unparsing a literal nil with nilValue set to a character entity. 
-->

  <tdml:unparserTestCase name="text_nil_characterClass_04" root="doc5" model="text_nil_only1" description="unparse a character class nil">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc5 xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[]]></tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: text_nil_characterClass_05
     Schema: text_nil_only1
       Root: doc6
    Purpose: This test demonstrates unparsing a literal nil with nilValue set to a character entity. 
-->

  <tdml:unparserTestCase name="text_nil_characterClass_05" root="doc6" model="text_nil_only1" description="unparse a character class nil">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc6 xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="byte">0D0A</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: text_nil_characterClass_06
     Schema: text_nil_only1
       Root: doc7
    Purpose: This test demonstrates unparsing a literal nil with nilValue set to a character entity. 
-->

  <tdml:unparserTestCase name="text_nil_characterClass_06" root="doc7" model="text_nil_only1" description="unparse a character class nil">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <doc7 xsi:nil="true"/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>
      <tdml:documentPart type="byte">0A</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

</tdml:testSuite>
