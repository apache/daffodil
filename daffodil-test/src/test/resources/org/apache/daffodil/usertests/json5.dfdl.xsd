<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<xsd:schema xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:fn="http://www.w3.org/2005/xpath-functions"
xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext" >

    <!--
        NOTICE: This software was produced for the U. S. Government under contract W15P7T-12-C-F600 
        and is subject to the Rights in Data-General Clause 52.227-14 (JUNE 1987).  
     
        Copyright 2014 The MITRE Corporation.  All rights reserved.
    -->
    <!-- 
        Adapted by Tresys Technology for Daffodil testing. 
      -->

    <!-- include the default properties -->
  <xsd:include schemaLocation="DefaultProperties2.dfdl.xsd" />
  <xsd:annotation>
    <xsd:appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:defineFormat name="jsonBase">
        <dfdl:format ref="DefaultPropertiesFormat" escapeSchemeRef=""
          occursCountKind="implicit" />
      </dfdl:defineFormat>
      <dfdl:defineEscapeScheme name="backslash">
        <dfdl:escapeScheme escapeCharacter="\"
          escapeEscapeCharacter="\" escapeKind="escapeCharacter" extraEscapedCharacters="" generateEscapeBlock="whenNeeded" />
      </dfdl:defineEscapeScheme>
      <dfdl:defineFormat name="objectSequence">
        <dfdl:format initiator="%WSP*;{%WSP*;" separator="%WSP*;,%WSP*;"
          terminator="%WSP*;}%WSP*;" ref="jsonBase" />
      </dfdl:defineFormat>
      <dfdl:defineFormat name="arraySequence">
        <dfdl:format initiator="%WSP*;[%WSP*;" separator="%WSP*;,%WSP*;"
          terminator="%WSP*;]%WSP*;" ref="jsonBase" />
      </dfdl:defineFormat>
      <dfdl:defineFormat name="pair">
        <dfdl:format separator="%WSP*;:%WSP*;" ref="jsonBase" />
      </dfdl:defineFormat>
      <dfdl:defineFormat name="value">
        <dfdl:format ref="jsonBase" />
      </dfdl:defineFormat>
      <dfdl:format ref="jsonBase" />
    </xsd:appinfo>
  </xsd:annotation>

    <!-- 
        By it's very nature, JSON is recursive, yet neither DFDL nor Daffodil can handle recursion.
        This DFDL schema models JSON in a non-recursive fashion.  It handles 5 levels of data.
    -->

  <xsd:element name="Json" dfdl:lengthKind="implicit">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="Structure" minOccurs="1" maxOccurs="500">
          <xsd:complexType>
            <xsd:choice>
              <xsd:element name="Object" type="Object1Type" />
              <xsd:element name="Array" type="Array1Type" />
<!-- is this correct? Can a json object just be up to 500 comma separated name-value pairs without braces surrounding? 
I suspect at top level a Json cannot just be a name value pair, but must be an object. 
              <xsd:element name="NameValuePair" type="NameValuePair1Type" />
              -->
            </xsd:choice>
          </xsd:complexType>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

    <!-- Flat Stuff - does not need to be repeated at each level -->

<!-- 
As I understand json, the "foo" double quotes surrounding the names are required, not optional.
Modeling these as escape block is really not a good design, as then they can be missing and it is
still accepted. { foo:"bar" } is not valid JSON. It has to be { "foo":"bar"}, so to me that means 
that the name has initiator='"' and terminator='"', and for the names, there is no escape sequence
allowed since these must be identifiers.

Well, actually JSON.org doesn't say the names have to be identifiers. They can be strings, and 
so really there's no reason for separate treatment here, but I really suspect that people want them
to be identifiers.

For values, the initiator/terminator should still be double quotes for anything not a number. 
-->
  <xsd:simpleType name="nameType" dfdl:escapeSchemeRef=""
    dfdl:initiator='"' dfdl:terminator='"'>
    <xsd:restriction base="xsd:string" />
  </xsd:simpleType>

  <xsd:group name="fields">
    <xsd:choice>
      <!-- 
      For these elements, the first 3 have these length patterns to terminate them, but the
      fourth, element "String", does not. It is ordinary lengthKind delimited. If that one can just be delimited, so can 
      all the others. 
      -->
      <!-- 
      These length patterns may interfere with the white-space tolerance of the delimiters, because 
      number digits won't necessarily be immediately followed by the lookahead pattern here. So you are banking on the fact
      that {"foo": 500  } will isolate the '500  ' and accept that with the trailing whitespace as a number. It's possible
      that this works, as you have textNumberCheckPolicy="lax", but I think it is better to omit these patterns altogether.
      -->
      <xsd:element name="Integer" type="xsd:int"/>
      <xsd:element name="Decimal" type="xsd:decimal" />

<!-- I chose a different design point for this Other element. 

I put in a Boolean element consistent with your Integer and Decimal, Grrr. except text booleans aren't implemented yet. So
I had to hack it with a hidden group that parses a string.

I made all the surrounding Value elements nillable, and modeled the 'null' as the whole Value (of complexType) being nil. 

This avoids the need for the checkConstraints stuff. -->

          <!--  <xsd:element name="Other" type="OtherType" dfdl:lengthKind="pattern" dfdl:lengthPattern="(.+?)(?=,|}|])">
                <xsd:annotation>
                    <xsd:appinfo source="http://www.ogf.org/dfdl/">
                        <dfdl:assert test="{ dfdl:checkConstraints(.) }" message="Invalid value."/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
           -->
      <xsd:sequence>
        <xsd:sequence dfdl:hiddenGroupRef="booleanRepHack" />
        <xsd:element name="Boolean" type="xsd:boolean"
          dfdl:inputValueCalc="{ 
          if (../_boolRep eq 'true') then fn:true() 
          else if (../_boolRep eq 'false') then fn:false() 
          else daf:error()
          }" />
      </xsd:sequence>
      <xsd:element name="Null" type="xsd:int" nillable="true" dfdl:nilValue="null" dfdl:nilKind="literalValue" />
      <xsd:element name="String" type="xsd:string" dfdl:initiator='"'
        dfdl:terminator='"' dfdl:escapeSchemeRef="backslash" />
    </xsd:choice>
  </xsd:group>
  
  <!-- hack needed until text booleans are implemented. -->
  <xsd:group name="booleanRepHack">
    <xsd:sequence>
      <xsd:element name="_boolRep" type="xsd:string"
        dfdl:lengthPattern="true|false" dfdl:lengthKind="pattern"
        dfdl:outputValueCalc="{ if (../Boolean) then 'true' else 'false' }" />
    </xsd:sequence>
  </xsd:group>

<!--
    <xsd:simpleType name="OtherType">
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="true|false|null"/>
        </xsd:restriction>
    </xsd:simpleType>
-->
    <!-- Level 1 -->

  <xsd:complexType name="Object1Type">
    <xsd:sequence dfdl:ref="objectSequence">
      <xsd:element name="NameValuePair" type="NameValuePair1Type"
        minOccurs="1" maxOccurs="500" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Array1Type">
    <xsd:sequence dfdl:ref="arraySequence">
      <xsd:element name="Value" type="Value1Type" minOccurs="1"
        maxOccurs="500"  dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NameValuePair1Type">
    <xsd:sequence dfdl:ref="pair">
      <xsd:element name="Name" type="nameType" />
      <xsd:element name="Value" type="Value1Type"  dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Value1Type">
    <xsd:choice>
      <xsd:element name="Object" type="Object2Type" />
      <xsd:element name="Array" type="Array2Type" />
      <xsd:group ref="fields" />
    </xsd:choice>
  </xsd:complexType>

    <!-- Level 2 -->

  <xsd:complexType name="Object2Type">
    <xsd:sequence dfdl:ref="objectSequence">
      <xsd:element name="NameValuePair" type="NameValuePair2Type"
        minOccurs="1" maxOccurs="500" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Array2Type">
    <xsd:sequence dfdl:ref="arraySequence">
      <xsd:element name="Value" type="Value2Type" minOccurs="1"
        maxOccurs="500" dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NameValuePair2Type">
    <xsd:sequence dfdl:ref="pair">
      <xsd:element name="Name" type="nameType" />
      <xsd:element name="Value" type="Value2Type" 
        dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Value2Type">
    <xsd:choice>
      <xsd:element name="Object" type="Object3Type" />
      <xsd:element name="Array" type="Array3Type" />
      <xsd:group ref="fields" />
    </xsd:choice>
  </xsd:complexType>

    <!-- Level 3 -->

  <xsd:complexType name="Object3Type">
    <xsd:sequence dfdl:ref="objectSequence">
      <xsd:element name="NameValuePair" type="NameValuePair3Type"
        minOccurs="1" maxOccurs="500" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Array3Type">
    <xsd:sequence dfdl:ref="arraySequence">
      <xsd:element name="Value" type="Value3Type" minOccurs="1"
        maxOccurs="500"  dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NameValuePair3Type">
    <xsd:sequence dfdl:ref="pair">
      <xsd:element name="Name" type="nameType" />
      <xsd:element name="Value" type="Value3Type" 
        dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Value3Type">
    <xsd:choice>
      <xsd:element name="Object" type="Object4Type" />
      <xsd:element name="Array" type="Array4Type" />
      <xsd:group ref="fields" />
    </xsd:choice>
  </xsd:complexType>

    <!-- Level 4 -->

  <xsd:complexType name="Object4Type">
    <xsd:sequence dfdl:ref="objectSequence">
      <xsd:element name="NameValuePair" type="NameValuePair4Type"
        minOccurs="1" maxOccurs="500" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Array4Type">
    <xsd:sequence dfdl:ref="arraySequence">
      <xsd:element name="Value" type="Value4Type" minOccurs="1"
        maxOccurs="500"  dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NameValuePair4Type">
    <xsd:sequence dfdl:ref="pair">
      <xsd:element name="Name" type="nameType" />
      <xsd:element name="Value" type="Value4Type" 
        dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Value4Type">
    <xsd:choice>
      <xsd:element name="Object" type="Object5Type" />
      <xsd:element name="Array" type="Array5Type" />
      <xsd:group ref="fields" />
    </xsd:choice>
  </xsd:complexType>

    <!-- Level 5 -->

  <xsd:complexType name="Object5Type">
    <xsd:sequence dfdl:ref="objectSequence">
      <xsd:element name="NameValuePair" type="NameValuePair5Type"
        minOccurs="1" maxOccurs="500" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Array5Type">
    <xsd:sequence dfdl:ref="arraySequence">
      <xsd:element name="Value" type="Value5Type" minOccurs="1"
        maxOccurs="500"  dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NameValuePair5Type">
    <xsd:sequence dfdl:ref="pair">
      <xsd:element name="Name" type="nameType" />
      <xsd:element name="Value" type="Value5Type" 
        dfdl:ref="value" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Value5Type">
    <xsd:group ref="fields" />
  </xsd:complexType>

</xsd:schema>
