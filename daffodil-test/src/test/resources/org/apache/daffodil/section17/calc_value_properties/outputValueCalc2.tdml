<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite suiteName="outputValueCalc2" xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ex="http://example.com"
  xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext" xmlns:fn="http://www.w3.org/2005/xpath-functions" defaultRoundTrip="false">

  <tdml:defineSchema name="ovc1" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" representation="binary"/>

    <xs:group name="IPSrcGrp">
      <xs:sequence>
      <!-- VERY PAINFUL.
      Until we have dfdl:newVariableInstance, we can't share subexpressions we need here.
      
      Even once we do have variables, they will need to be evaluated in a manner that accepts 
      forward references. Though one might trick it by having a outputValueCalc that forces us
      to wait until the future item is in the infoset, and then the setVariables will just work because
      the forward-thing they want is already present in the infoset.
      
      But in general I believe variable expression evaluation must be done in a forward-reference-tolerant
      way when unparsing.
       -->
        <xs:element name="IPSrcByte1" type="xs:unsignedByte" dfdl:outputValueCalc="{ 
        xs:unsignedByte( fn:substring-before(../IPSrc, '.'))
         }"/>
        <xs:element name="IPSrcByte2" type="xs:unsignedByte" dfdl:outputValueCalc="{
         xs:unsignedByte( fn:substring-before(
           fn:substring-after(../IPSrc, fn:concat(
             fn:substring-before(../IPSrc, '.'), '.')), '.')) 
         }"/>
        <xs:element name="IPSrcByte3" type="xs:unsignedByte" dfdl:outputValueCalc="{
         xs:unsignedByte( fn:substring-before(fn:substring-after(../IPSrc, fn:concat(fn:substring-before(
           fn:substring-after(../IPSrc, fn:concat(
             fn:substring-before(../IPSrc, '.'), '.')), '.'), '.')), '.')) 
         }"/>
        <xs:element name="IPSrcByte4" type="xs:unsignedByte" dfdl:outputValueCalc="{
         xs:unsignedByte( fn:substring-after(../IPSrc, fn:concat(fn:substring-before(fn:substring-after(../IPSrc, fn:concat(fn:substring-before(
           fn:substring-after(../IPSrc, fn:concat(
             fn:substring-before(../IPSrc, '.'), '.')), '.'), '.')), '.'), '.'))) 
         }"/>
      </xs:sequence>
    </xs:group>

    <xs:element name="root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="checksum" type="xs:int"/>
          <xs:sequence dfdl:hiddenGroupRef="ex:IPSrcGrp"/>
          <xs:element name="IPSrc" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="0" dfdl:inputValueCalc="{ fn:concat(../IPSrcByte1, '.', ../IPSrcByte2, '.', ../IPSrcByte3, '.', ../IPSrcByte4) }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="root2">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="IPv4Header">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="checksum" type="xs:int"/>
                <xs:sequence dfdl:hiddenGroupRef="ex:IPSrcGrp"/>
                <xs:element name="IPSrc" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="7" dfdl:inputValueCalc="{ fn:concat(../IPSrcByte1, '.', ../IPSrcByte2, '.', ../IPSrcByte3, '.', ../IPSrcByte4) }"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:group name="arrayGroup">
      <xs:sequence>
        <xs:element name="array" type="xs:int" maxOccurs="unbounded" dfdl:occursCountKind='implicit'
          dfdl:representation="text" dfdl:lengthKind="explicit" dfdl:length="1" />
      </xs:sequence>
    </xs:group>

    <xs:element name="root3">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="number" type="xs:int"/>
          <xs:sequence dfdl:hiddenGroupRef="ex:arrayGroup"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:group name="arrayGroup2">
      <xs:sequence>
        <xs:element name="array" type="xs:int" maxOccurs="unbounded" dfdl:occursCountKind='implicit'
          dfdl:representation="text" dfdl:lengthKind="explicit" dfdl:length="3" dfdl:outputValueCalc="{ 7 }" />
      </xs:sequence>
    </xs:group>

    <xs:element name="root4">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="number" type="xs:int"/>
          <xs:sequence dfdl:hiddenGroupRef="ex:arrayGroup2"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="root5">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="number" type="xs:int" minOccurs="0" dfdl:outputValueCalc="{ 5 }" dfdl:occursCountKind="implicit"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:unparserTestCase name="ovcHiddenCalculations1" root="root" model="ovc1" description="ovc test that computes 1.2.3.4 from 4 binary bytes, and invert of that for unparse.">

    <tdml:document>
      <tdml:documentPart type="byte">00000005 01 02 03 04</tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:root>
          <checksum>5</checksum>
          <IPSrc>1.2.3.4</IPSrc>
        </ex:root>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>


  <tdml:unparserTestCase name="ovcHiddenCalculations2" root="root2" model="ovc1" description="ovc test that computes 1.2.3.4 from 4 binary bytes, and invert of that for unparse.">

    <tdml:document>
      <tdml:documentPart type="byte">00000005 01 02 03 04</tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:root2>
          <IPv4Header>
            <checksum>5</checksum>
            <IPSrc>1.2.3.4</IPSrc>
          </IPv4Header>
        </ex:root2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="hiddenGroupOvcError" root="root3" model="ovc1" description="Test with a hidden group which is missing an outputValueCalc.">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:root3>
          <number>1</number>
          <arrayGroup>234</arrayGroup>
        </ex:root3>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Element(s) of hidden group must define dfdl:outputValueCalc</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="hiddenGroupArrayWithOvc" root="root4" model="ovc1" description="Test with an array in a hidden group with an outputValueCalc.">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:root4>
          <number>1</number>
        </ex:root4>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdl:outputValueCalc cannot be defined on array elements</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="optionalWithOvc" root="root5" model="ovc1" description="Test with an optional element with an outputValueCalc.">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:root5>
          <number>1</number>
        </ex:root5>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>dfdl:outputValueCalc cannot be defined on optional elements</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

  <tdml:defineSchema name="ovc2" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" representation="binary"/>

    <xs:group name="IPSrcGrp">
      <xs:sequence>
        <xs:element name="sbyte1" default="0" type="xs:unsignedByte" 
        dfdl:outputValueCalc="{ xs:unsignedByte(../IPSrc) }"/>
      </xs:sequence>
    </xs:group>

    <xs:element name="root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="IPv4Header">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="checksum" type="xs:int"/>
                <xs:sequence dfdl:hiddenGroupRef="ex:IPSrcGrp"/>
                <xs:element name="IPSrc" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:inputValueCalc="{ xs:string(../sbyte1) }"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>


  </tdml:defineSchema>

  <tdml:unparserTestCase name="ovcHiddenCalculations3" root="root" model="ovc2">

    <tdml:document>
      <tdml:documentPart type="byte">00000005 01</tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:root>
          <IPv4Header>
            <checksum>5</checksum>
            <IPSrc>1</IPSrc>
          </IPv4Header>
        </ex:root>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>

  <tdml:defineSchema name="ovc3" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" representation="binary"  lengthUnits="bytes"/>

    <xs:element name="root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="elem1" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" />
          <xs:element name="elem2ovc" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:outputValueCalc="{ 255 }" />
          <xs:element name="elem3" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>

  <tdml:unparserTestCase name="ovcIgnoreOVCElem" root="root" model="ovc3" description="ovc test accepts missing OVC in the infoset">
    <tdml:document>
      <tdml:documentPart type="byte">01 FF 03</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:root>
          <elem1>1</elem1>
          <elem2ovc>2</elem2ovc> <!-- this element is ignored -->
          <elem3>3</elem3>
        </ex:root>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="ovcAllowMissingOVCElem" root="root" model="ovc3" description="ovc test that allows an OVC element to be missing">
    <tdml:document>
      <tdml:documentPart type="byte">01 FF 03</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:root>
          <elem1>1</elem1>
          <elem3>3</elem3>
        </ex:root>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>

  <tdml:defineSchema name="ovc4" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" representation="binary"/>

    <xs:element name="e1">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="xi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="yi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="zi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>

          <xs:element name="x" type="xs:string" dfdl:outputValueCalc="{ xs:string(dfdl:valueLength(../y, 'bytes')) }" dfdl:initiator="{../xi}"  dfdl:lengthKind="delimited" dfdl:terminator=";"/>
          <xs:element name="y" type="xs:string" dfdl:outputValueCalc="{ xs:string(dfdl:valueLength(../z, 'bytes')) }" dfdl:initiator="Y"  dfdl:lengthKind="delimited" dfdl:terminator=";"/>
          <xs:element name="z" type="xs:string" dfdl:initiator="Z"  dfdl:lengthKind="delimited" dfdl:terminator=";"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="e2">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="xi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="yi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="zi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>

          <xs:element name="x" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="'$'#0.00" dfdl:textStandardDecimalSeparator="{ ../xi }" dfdl:outputValueCalc="{ dfdl:valueLength(../y, 'bytes')}" />
          <xs:element name="y" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="'$'#0.000" dfdl:textStandardDecimalSeparator="{ ../yi }" dfdl:outputValueCalc="{ dfdl:valueLength(../z, 'bytes')}" />
          <xs:element name="z" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="'$'#0.0" dfdl:textStandardDecimalSeparator="{ ../zi }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="e3">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="xi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="yi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="zi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>

          <xs:element name="x" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="#,##0.0" dfdl:textStandardGroupingSeparator="{ ../xi }" dfdl:outputValueCalc="{ dfdl:valueLength(../y, 'bytes') * 1000}" />
          <xs:element name="y" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="#,###,##0.000" dfdl:textStandardGroupingSeparator="{ ../yi }" dfdl:outputValueCalc="{ dfdl:valueLength(../z, 'bytes') * 1000000}" />
          <xs:element name="z" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="##,##0.00" dfdl:textStandardGroupingSeparator="{ ../zi }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="e4">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="xi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="yi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="zi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>

          <xs:element name="x" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="#00.##E00" dfdl:textStandardExponentRep="{ ../xi }" dfdl:outputValueCalc="{ dfdl:valueLength(../y, 'bytes') * 1000}" />
          <xs:element name="y" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="0.0E0" dfdl:textStandardExponentRep="{ ../yi }" dfdl:outputValueCalc="{ dfdl:valueLength(../z, 'bytes') * 10000}" />
          <xs:element name="z" type="xs:float" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:textNumberRep="standard" dfdl:textNumberPattern="###0.##E000" dfdl:textStandardExponentRep="{ ../zi }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="e5">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="xi" type="xs:string" dfdl:length="5" dfdl:lengthKind="explicit"/>
          <xs:element name="yi" type="xs:string" dfdl:length="5" dfdl:lengthKind="explicit"/>
          <xs:element name="zi" type="xs:string" dfdl:length="5" dfdl:lengthKind="explicit"/>

          <xs:element name="x" type="xs:date" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:calendarPattern="EEEE MMMM yyyy" dfdl:calendarLanguage="{ ../xi }" dfdl:outputValueCalc="{ xs:date(fn:concat('2017-08-',dfdl:valueLength(../y, 'bytes'))) }" dfdl:calendarPatternKind="explicit" />
          <xs:element name="y" type="xs:date" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:calendarPattern="EEEE MMMM yyyy" dfdl:calendarLanguage="{ ../yi }" dfdl:outputValueCalc="{ xs:date(fn:concat('1986-06-',dfdl:valueLength(../z, 'bytes'))) }" dfdl:calendarPatternKind="explicit" />
          <xs:element name="z" type="xs:date" dfdl:lengthKind="delimited" dfdl:representation="text" dfdl:calendarPattern="EEEE MMMM yyyy" dfdl:calendarLanguage="{ ../zi }" dfdl:calendarPatternKind="explicit" dfdl:encoding="UTF-8" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <dfdl:defineEscapeScheme name="escapeScheme1">
      <dfdl:escapeScheme escapeCharacter="{ ../xi }"
        escapeKind="escapeCharacter" escapeEscapeCharacter="^" extraEscapedCharacters="" generateEscapeBlock="whenNeeded"/>
    </dfdl:defineEscapeScheme>
    <dfdl:defineEscapeScheme name="escapeScheme2">
      <dfdl:escapeScheme escapeCharacter="{ ../yi }"
        escapeKind="escapeCharacter" escapeEscapeCharacter="^" extraEscapedCharacters="" generateEscapeBlock="whenNeeded"/>
    </dfdl:defineEscapeScheme>
    <dfdl:defineEscapeScheme name="escapeScheme3">
      <dfdl:escapeScheme escapeCharacter="{ ../zi }"
        escapeKind="escapeCharacter" escapeEscapeCharacter="^" extraEscapedCharacters="" generateEscapeBlock="whenNeeded"/>
    </dfdl:defineEscapeScheme>

    <xs:element name="e6">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="xi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="yi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="zi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>

          <xs:element name="x" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:escapeSchemeRef="escapeScheme1" dfdl:outputValueCalc="{ fn:concat('test;',dfdl:valueLength(../y, 'bytes')) }" />
          <xs:element name="y" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:escapeSchemeRef="escapeScheme2" dfdl:outputValueCalc="{ fn:concat('blah;',dfdl:valueLength(../z, 'bytes')) }" />
          <xs:element name="z" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:escapeSchemeRef="escapeScheme3" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <dfdl:defineEscapeScheme name="escapeScheme4">
      <dfdl:escapeScheme escapeEscapeCharacter="{ ../xi }"
        escapeKind="escapeCharacter" escapeCharacter="^" extraEscapedCharacters="" generateEscapeBlock="whenNeeded"/>
    </dfdl:defineEscapeScheme>
    <dfdl:defineEscapeScheme name="escapeScheme5">
      <dfdl:escapeScheme escapeEscapeCharacter="{ ../yi }"
        escapeKind="escapeCharacter" escapeCharacter="^" extraEscapedCharacters="" generateEscapeBlock="whenNeeded"/>
    </dfdl:defineEscapeScheme>
    <dfdl:defineEscapeScheme name="escapeScheme6">
      <dfdl:escapeScheme escapeEscapeCharacter="{ ../zi }"
        escapeKind="escapeCharacter" escapeCharacter="^" extraEscapedCharacters="" generateEscapeBlock="whenNeeded"/>
    </dfdl:defineEscapeScheme>

    <xs:element name="e7">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="xi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="yi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>
          <xs:element name="zi" type="xs:string" dfdl:length="1" dfdl:lengthKind="explicit"/>

          <xs:element name="x" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:escapeSchemeRef="escapeScheme4" dfdl:outputValueCalc="{ fn:concat(dfdl:valueLength(../y, 'bytes'),'test^') }" />
          <xs:element name="y" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:escapeSchemeRef="escapeScheme5" dfdl:outputValueCalc="{ fn:concat(dfdl:valueLength(../z, 'bytes'),'blah^') }" />
          <xs:element name="z" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator=";" dfdl:escapeSchemeRef="escapeScheme6" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <tdml:unparserTestCase name="ovc_w_runtime_initiator" root="e1" model="ovc4" description="ovc test with initiator as runtime valued property">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>
          <xi>X</xi>
          <yi>Y</yi>
          <zi>Z</zi>
          <z>0123456789</z>
        </ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>
      <tdml:documentPart type="text">XYZX2;Y10;Z0123456789;</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="ovc_w_runtime_dec_sep" root="e2" model="ovc4" description="ovc test with textStandardDecimalSeparator as runtime valued property">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2>
          <xi>X</xi>
          <yi>Y</yi>
          <zi>Z</zi>
          <z>5.0</z>
        </ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>
      <tdml:documentPart type="text">XYZ$6X00$4Y000$5Z0</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="ovc_w_runtime_group_sep" root="e3" model="ovc4" description="ovc test with textStandardGroupingSeparator as runtime valued property">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e3>
          <xi>X</xi>
          <yi>Y</yi>
          <zi>Z</zi>
          <z>12345.0</z>
        </ex:e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>
      <tdml:documentPart type="text">XYZ13X000.09Y000Y000.00012Z345.00</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="ovc_w_runtime_exp_rep" root="e4" model="ovc4" description="ovc test with textStandardExponentRep as runtime valued property">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e4>
          <xi>X</xi>
          <yi>Y</yi>
          <zi>Z</zi>
          <z>1234.56789E5</z>
        </ex:e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>
      <tdml:documentPart type="text">XYZ5.0X038.0Y41.23Z008</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="ovc_w_runtime_cal_lang" root="e5" model="ovc4" description="ovc test with calendarLanguage as runtime valued property">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e5>
          <xi>en-GB</xi>
          <yi>es-MX</yi>
          <zi>ru-RU</zi>
          <z>2013-03-01+00:00</z>
        </ex:e5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>
      <tdml:documentPart type="text">en-GBes-MXru-RUWednesday August 2017lunes junio 1986пятница марта 2013</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="ovc_w_runtime_escape_char" root="e6" model="ovc4" description="ovc test with escapeCharacter as runtime valued property">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e6>
          <xi>x</xi>
          <yi>y</yi>
          <zi>z</zi>
          <z>test;ing</z>
        </ex:e6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>
      <tdml:documentPart type="text">xyztestx;7;blahy;9;testz;ing;</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

  <tdml:unparserTestCase name="ovc_w_runtime_escape_escape_char" root="e7" model="ovc4" description="ovc test with escapeEscapeCharacter as runtime valued property">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e7>
          <xi>x</xi>
          <yi>y</yi>
          <zi>z</zi>
          <z>test^</z>
        </ex:e7>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>
      <tdml:documentPart type="text">xyz7testx^;6blahy^;testz^;</tdml:documentPart>
    </tdml:document>
  </tdml:unparserTestCase>

</tdml:testSuite>
