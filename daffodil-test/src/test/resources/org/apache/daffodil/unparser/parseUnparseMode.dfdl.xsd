<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<xs:schema
  targetNamespace="urn:parseUnparseMode" 
  xmlns:tns="urn:parseUnparseMode"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" 
  xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  elementFormDefault="qualified">
          
   <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
   
   <xs:annotation>
     <xs:appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:format ref="tns:GeneralFormat" truncateSpecifiedLengthString="yes"/>
        <dfdl:defineVariable name="mode" type="xs:string" />
      </xs:appinfo>
   </xs:annotation>
          
    <!-- This mode variable will be 'parse' or 'unparse' and can be used to create conditional 
    behavior based on whether the DFDL schema is being used to parse or unparse.
    
    The point of this is that expressions can contain a mixture of forward and backward references through the 
    schema so long as they only refer forward during unparse mode.
    -->
    
    
    <!-- include this as a hidden group ref from the root element of the schema -->
    
    <xs:group name="hDefModeGroup">
      <xs:sequence>
      <!-- this flag is text, but this has to be the very first thing in the schema
           so this text can have no impact on alignment of anything. -->
        <xs:element name="__unparseFlag" type="xs:string" dfdl:lengthKind="explicit"
          dfdl:length="0" dfdl:outputValueCalc="{ 'unparse' }" />
        <xs:sequence>
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:setVariable ref="tns:mode"><![CDATA[
              {
                  if (tns:__unparseFlag eq 'unparse') then 'unparse' else 'parse'
              }]]>
              </dfdl:setVariable>
            </xs:appinfo>
          </xs:annotation>
        </xs:sequence>
      </xs:sequence>
    </xs:group>
    
    <!-- used to create choices where one branch is all parsing only, another unparsing only. -->
    <!-- just start the branch with the appropriate *NOT* hidden group ref to one of these. -->
 
    <xs:group name="assertParsing">
    <xs:sequence>
           <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:discriminator>{ $tns:mode eq 'parse' }</dfdl:discriminator>
           </xs:appinfo></xs:annotation>
    </xs:sequence>
    </xs:group>

    <xs:group name="assertUnparsing">
      <xs:sequence>
           <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
              <!-- if we get here when parsing, the user didn't have a prior branch begining with
                   <xs:group ref='tns:assertParsing'/>
                   However, asserts aren't evaluated when unparsing, so we only error out here 
                   when parsing.
               -->
              <dfdl:assert>{ dfdlx:error() }</dfdl:assert>
           </xs:appinfo></xs:annotation>
      </xs:sequence>
    </xs:group>
     
</xs:schema>
