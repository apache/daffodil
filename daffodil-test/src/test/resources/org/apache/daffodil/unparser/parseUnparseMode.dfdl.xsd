<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
  targetNamespace="urn:parseUnparseMode" 
  xmlns:tns="urn:parseUnparseMode"
  xmlns:daf="urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:ext"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  elementFormDefault="qualified">
          
   <xs:include schemaLocation="edu/illinois/ncsa/daffodil/xsd/built-in-formats.xsd"/>
   
   <xs:annotation>
     <xs:appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:format ref="tns:daffodilTest1" truncateSpecifiedLengthString="yes"/>
        <dfdl:defineVariable name="mode" type="xs:string" />
      </xs:appinfo>
   </xs:annotation>
          
    <!-- This mode variable will be 'parse' or 'unparse' and can be used to create conditional 
    behavior based on whether the DFDL schema is being used to parse or unparse.
    
    The point of this is that expressions can contain a mixture of forward and backward references through the 
    schema so long as they only refer forward during unparse mode.
    -->
    
    
    <!-- include this as a hidden group ref from the root element of the schema -->
    
    <xs:group name="hDefModeGroup">
      <xs:sequence>
      <!-- this flag is text, but this has to be the very first thing in the schema
           so this text can have no impact on alignment of anything. -->
        <xs:element name="__unparseFlag" type="xs:string" dfdl:lengthKind="explicit"
          dfdl:length="0" dfdl:outputValueCalc="{ 'unparse' }" />
        <xs:sequence>
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:setVariable ref="tns:mode"><![CDATA[
              {
                  if (tns:__unparseFlag eq 'unparse') then 'unparse' else 'parse'
              }]]>
              </dfdl:setVariable>
            </xs:appinfo>
          </xs:annotation>
        </xs:sequence>
      </xs:sequence>
    </xs:group>
    
    <!-- used to create choices where one branch is all parsing only, another unparsing only. -->
    <!-- just start the branch with the appropriate *NOT* hidden group ref to one of these. -->
 
    <xs:group name="assertParsing">
    <xs:sequence>
           <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:discriminator>{ $tns:mode eq 'parse' }</dfdl:discriminator>
           </xs:appinfo></xs:annotation>
    </xs:sequence>
    </xs:group>

    <xs:group name="assertUnparsing">
      <xs:sequence>
           <xs:annotation><xs:appinfo source="http://www.ogf.org/dfdl/">
              <!-- if we get here when parsing, the user didn't have a prior branch begining with
                   <xs:group ref='tns:assertParsing'/>
                   However, asserts aren't evaluated when unparsing, so we only error out here 
                   when parsing.
               -->
              <dfdl:assert>{ daf:error() }</dfdl:assert>
           </xs:appinfo></xs:annotation>
      </xs:sequence>
    </xs:group>
     
</xs:schema>
