<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<testSuite suiteName="AA-BG" description="Original suite of AA through BG"
  xmlns="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:ex="http://www.example.org/example1/"
  defaultRoundTrip="true">

  <parserTestCase name="AB000" root="matrix" model="AB.dfdl.xsd"
    description="CSV-style tests - data stream is scanned for its enclosing construct's separator.  separatorPosition is infix - DFDL-12-043R">

    <document>
      <!-- <documentPart type="text"><![CDATA[0,1,2,3,4
        5,6,7,8,9
        10,11,12,13,14]]></documentPart> -->
      <documentPart replaceDFDLEntities="true" type="text"><![CDATA[0,1,2,3,4%LF;5,6,7,8,9%LF;10,11,12,13,14]]></documentPart>
    </document>

    <infoset>
      <dfdlInfoset>
        <ex:matrix xmlns="">
          <row>
            <cell>0</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
            <cell>4</cell>
          </row>
          <row>
            <cell>5</cell>
            <cell>6</cell>
            <cell>7</cell>
            <cell>8</cell>
            <cell>9</cell>
          </row>
          <row>
            <cell>10</cell>
            <cell>11</cell>
            <cell>12</cell>
            <cell>13</cell>
            <cell>14</cell>
          </row>
        </ex:matrix>
      </dfdlInfoset>
    </infoset>
  </parserTestCase>

  <parserTestCase name="AB001" root="matrix_01" model="AB.dfdl.xsd"
    description="CSV-style tests - data stream is scanned for element's enclosing construct's separator and terminator.  separatorPosition is infix - DFDL-12-043R">

    <document>
      <documentPart replaceDFDLEntities="true" type="text"><![CDATA[0,1,2,3,4%LF;5,6,7,8,9%LF;10,11,12,13,14%LF;]]></documentPart>
    </document>

    <infoset>
      <dfdlInfoset>
        <ex:matrix_01 xmlns="">
          <row>
            <cell>0</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
            <cell>4</cell>
          </row>
          <row>
            <cell>5</cell>
            <cell>6</cell>
            <cell>7</cell>
            <cell>8</cell>
            <cell>9</cell>
          </row>
          <row>
            <cell>10</cell>
            <cell>11</cell>
            <cell>12</cell>
            <cell>13</cell>
            <cell>14</cell>
          </row>
        </ex:matrix_01>
      </dfdlInfoset>
    </infoset>
  </parserTestCase>

  <parserTestCase name="AB002" root="matrix_03" model="AB.dfdl.xsd"
    description="CSV-style tests - data stream is scanned for element's enclosing construct's separator and terminator.  separatorPosition is postfix - DFDL-12-043R">

    <document>
      <documentPart replaceDFDLEntities="true" type="text"><![CDATA[0,1,2,3,4%LF;5,6,7,8,9%LF;10,11,12,13,14%LF;]]></documentPart>
    </document>

    <infoset>
      <dfdlInfoset>
        <ex:matrix_03 xmlns="">
          <row>
            <cell>0</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
            <cell>4</cell>
          </row>
          <row>
            <cell>5</cell>
            <cell>6</cell>
            <cell>7</cell>
            <cell>8</cell>
            <cell>9</cell>
          </row>
          <row>
            <cell>10</cell>
            <cell>11</cell>
            <cell>12</cell>
            <cell>13</cell>
            <cell>14</cell>
          </row>
        </ex:matrix_03>
      </dfdlInfoset>
    </infoset>
  </parserTestCase>

  <parserTestCase name="AB003" root="matrix_01" model="AB.dfdl.xsd"
    description="CSV-style tests - data stream is scanned for element's enclosing construct's separator and terminator.  separatorPosition is infix - DFDL-12-043R">

    <document>
      <documentPart replaceDFDLEntities="true" type="text"><![CDATA[0,1,2,3,4%LF;5,6,7,8,9%LF;10,11%LF;]]></documentPart>
    </document>

    <infoset>
      <dfdlInfoset>
        <ex:matrix_01 xmlns="">
          <row>
            <cell>0</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
            <cell>4</cell>
          </row>
          <row>
            <cell>5</cell>
            <cell>6</cell>
            <cell>7</cell>
            <cell>8</cell>
            <cell>9</cell>
          </row>
          <row>
            <cell>10</cell>
            <cell>11</cell>
          </row>
        </ex:matrix_01>
      </dfdlInfoset>
    </infoset>
  </parserTestCase>

  <parserTestCase name="AB004" root="matrix_02" model="AB.dfdl.xsd"
    description="CSV-style tests - data stream is scanned for element's enclosing construct's separator.  separatorPosition is postfix.  Sequence has is nil element. - DFDL-12-043R">

    <document>
      <documentPart replaceDFDLEntities="true" type="text"><![CDATA[0,1,2,3,4%LF;5,6,7,8,9%LF;10,11,,13%LF;]]></documentPart>
    </document>

    <infoset>
      <dfdlInfoset>
        <ex:matrix_02 xmlns=""
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
          <row>
            <cell xsi:type="xsd:int">0</cell>
            <cell xsi:type="xsd:int">1</cell>
            <cell xsi:type="xsd:int">2</cell>
            <cell xsi:type="xsd:int">3</cell>
            <cell xsi:type="xsd:int">4</cell>
          </row>
          <row>
            <cell xsi:type="xsd:int">5</cell>
            <cell xsi:type="xsd:int">6</cell>
            <cell xsi:type="xsd:int">7</cell>
            <cell xsi:type="xsd:int">8</cell>
            <cell xsi:type="xsd:int">9</cell>
          </row>
          <row>
            <cell xsi:type="xsd:int">10</cell>
            <cell xsi:type="xsd:int">11</cell>
            <cell xsi:nil="true" />
            <cell xsi:type="xsd:int">13</cell>
          </row>
        </ex:matrix_02>
      </dfdlInfoset>
    </infoset>
  </parserTestCase>

  <parserTestCase name="AB005_parse" root="matrix_02" model="AB.dfdl.xsd"
    description="CSV-style tests - data stream is scanned for element's enclosing construct's separator.  separatorPosition is postfix.  Sequence has is nil elements. - DFDL-12-043R"
    roundTrip="none">
    <document>
      <!-- 
      <documentPart replaceDFDLEntities="true" type="text"><![CDATA[0,1,2,3,4%LF;5,6,7,8,9%LF;10,11,,%LF;]]></documentPart>
      -->
      <documentPart replaceDFDLEntities="true" type="text"><![CDATA[11,,%LF;]]></documentPart>
    </document>

    <infoset>
      <dfdlInfoset>
        <ex:matrix_02 xmlns="">
        <!-- 
          <row>
            <cell xsi:type="xsd:int">0</cell>
            <cell xsi:type="xsd:int">1</cell>
            <cell xsi:type="xsd:int">2</cell>
            <cell xsi:type="xsd:int">3</cell>
            <cell xsi:type="xsd:int">4</cell>
          </row>
          <row>
            <cell xsi:type="xsd:int">5</cell>
            <cell xsi:type="xsd:int">6</cell>
            <cell xsi:type="xsd:int">7</cell>
            <cell xsi:type="xsd:int">8</cell>
            <cell xsi:type="xsd:int">9</cell>
          </row>
          -->
          <row>
            <!-- <cell xsi:type="xsd:int">10</cell> -->
            <cell xsi:type="xsd:int">11</cell>
            <!-- 
              DFDL Spec Section 14.2.2 says that these nilled elements, because
              the nil representation is empty string, are zero-length.
              So since they are optional array elements, their separators will
              be suppressed. 
              
              That makes it impossible for this test to ever round-trip if the
              input data had separators in it that caused these nilled elements
              to be created.
              
              This is not a matter of multiple passes. We can *never* get the
              separators out because dfdl:separatorSuppressionPolicy="trailingEmpty".
              
              So this test was split into two. One for unparsing, one for parsing.
             -->
            <cell xsi:nil="true" />
            <cell xsi:nil="true" />
          </row>
        </ex:matrix_02>
      </dfdlInfoset>
    </infoset>
  </parserTestCase>
  
  <unparserTestCase name="AB005_unparse" root="matrix_02" model="AB.dfdl.xsd"
    description="CSV-style tests - data stream is scanned for element's enclosing construct's separator.  separatorPosition is postfix.  Sequence has is nil elements. - DFDL-12-043R"
    roundTrip="none">
    <document>
      <documentPart replaceDFDLEntities="true" type="text"><![CDATA[0,1,2,3,4%LF;5,6,7,8,9%LF;10,11%LF;]]></documentPart>
    </document>

    <infoset>
      <dfdlInfoset>
        <ex:matrix_02 xmlns="">
          <row>
            <cell xsi:type="xsd:int">0</cell>
            <cell xsi:type="xsd:int">1</cell>
            <cell xsi:type="xsd:int">2</cell>
            <cell xsi:type="xsd:int">3</cell>
            <cell xsi:type="xsd:int">4</cell>
          </row>
          <row>
            <cell xsi:type="xsd:int">5</cell>
            <cell xsi:type="xsd:int">6</cell>
            <cell xsi:type="xsd:int">7</cell>
            <cell xsi:type="xsd:int">8</cell>
            <cell xsi:type="xsd:int">9</cell>
          </row>
          <row>
            <cell xsi:type="xsd:int">10</cell>
            <cell xsi:type="xsd:int">11</cell>
            <!-- 
              DFDL Spec Section 14.2.3.1 says that these nilled elements, because
              the nil representation is empty string, are zero-length.
              So since they are optional array elements, their separators will
              be suppressed. 
              
              That makes it impossible for this test to ever round-trip if the
              input data had separators in it that caused these nilled elements
              to be created.
              
              This is not a matter of multiple passes. We can *never* get the
              separators out because dfdl:separatorSuppressionPolicy="trailingEmpty".
              
              So this test was split into two. One for unparsing, one for parsing.
             -->
            <cell xsi:nil="true" />
            <cell xsi:nil="true" />
          </row>
        </ex:matrix_02>
      </dfdlInfoset>
    </infoset>
  </unparserTestCase>

</testSuite>
