<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<schema
  xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
  xmlns:bm="urn:org.apache.daffodil.layers.boundaryMark"
  xmlns:gz="urn:org.apache.daffodil.layers.gzip"
  xmlns:b64="urn:org.apache.daffodil.layers.base64_MIME"
  xmlns:ex="http://example.com"
  targetNamespace="http://example.com">


  <include schemaLocation="/org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
  <import namespace="urn:org.apache.daffodil.layers.boundaryMark"
          schemaLocation="/org/apache/daffodil/layers/xsd/boundaryMarkLayer.dfdl.xsd"/>
  <import namespace="urn:org.apache.daffodil.layers.gzip"
          schemaLocation="/org/apache/daffodil/layers/xsd/gzipLayer.dfdl.xsd"/>
  <import namespace="urn:org.apache.daffodil.layers.base64_MIME"
          schemaLocation="/org/apache/daffodil/layers/xsd/base64_MIMELayer.dfdl.xsd"/>

  <annotation>
    <appinfo source="http://www.ogf.org/dfdl/">

      <dfdl:defineFormat name="general">
        <dfdl:format
          ref="ex:GeneralFormat"
          lengthKind="delimited"
          outputNewLine="%CR;%LF;"/>
      </dfdl:defineFormat>

      <dfdl:format ref="ex:general"/>

    </appinfo>
  </annotation>

  <group name="boundaryMarkEncoding">
    <sequence>
      <annotation><appinfo source="http://www.ogf.org/dfdl/">
        <dfdl:setVariable ref="bm:layerEncoding" value="iso-8859-1"/>
      </appinfo></annotation>
    </sequence>
  </group>

  <element name="file" type="ex:fileType" />

  <complexType name="fileType">
    <sequence>
      <group ref="ex:boundaryMarkEncoding"/>
      <sequence dfdlx:layer="bm:boundaryMark">
        <annotation>
          <appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:newVariableInstance ref="bm:boundaryMark" defaultValue="--END--"/>
          </appinfo>
        </annotation>
        <sequence dfdlx:layer="b64:base64_MIME">
          <sequence>
            <!--
                now the gzip details, including the 4-byte gzLength element that stores how long
                the gzipped data is.
             -->
            <element name="gzLength" type="xs:int" dfdl:representation="binary" dfdl:lengthKind="implicit"
                     dfdl:outputValueCalc="{ dfdl:contentLength( ../data/contents, 'bytes') }"/>
            <!--
               this 'data' element is needed only because we have to measure how big it is when unparsing.
               If we were only worried about parsing, we woundn't need to have this extra 'data' element wrapped around
               the contents.
             -->
            <element name="data" dfdl:lengthKind="explicit" dfdl:length="{ ../gzLength }">
              <complexType>
                <sequence>
                  <element name="contents">
                    <complexType>
                      <!--
                         now the gzipped layered sequence itself
                       -->
                      <sequence dfdlx:layer="gz:gzip">
                        <!--
                          finally, inside that, we have the original fileTypeGroup group reference.
                          -->
                        <group ref="ex:fileTypeGroup"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </sequence>
      </sequence>
    </sequence>
  </complexType>

  <group name="fileTypeGroup">
    <sequence dfdl:separator="%NL;" dfdl:separatorPosition="postfix">
      <element name="header" minOccurs="0" dfdl:occursCountKind="implicit">
        <complexType>
          <sequence dfdl:separator=",">
            <element name="title" type="xs:string" maxOccurs="unbounded" />
          </sequence>
        </complexType>
      </element>
      <element name="record" maxOccurs="unbounded">
        <complexType>
          <sequence dfdl:separator=",">
            <element name="item" type="xs:string" maxOccurs="unbounded" dfdl:occursCount="{ fn:count(../../header/title) }"
                        dfdl:occursCountKind="expression" />
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

</schema>
