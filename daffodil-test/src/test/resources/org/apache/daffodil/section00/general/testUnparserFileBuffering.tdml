<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ex="http://example.com"
  xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext" suiteName="unparserFileBuffering">

	<tdml:defineConfig name="cfg_forceFileBuffering">
		<daf:tunables xmlns="http://www.w3.org/2001/XMLSchema"
			xmlns:xs="http://www.w3.org/2001/XMLSchema">
			<daf:maxByteArrayOutputStreamBufferSizeInBytes>0</daf:maxByteArrayOutputStreamBufferSizeInBytes>
		</daf:tunables>
	</tdml:defineConfig>

  <tdml:defineSchema name="fixedLengthStrings">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat" textPadKind='padChar' />
    <xs:element name="e1" dfdl:lengthKind="explicit" dfdl:length="5" type="xs:string" dfdl:truncateSpecifiedLengthString="yes"/>
    <xs:element name="e2" dfdl:lengthKind="explicit" dfdl:length="1" type="xs:string" />
    <xs:element name="e3" dfdl:lengthKind="explicit" dfdl:length="5" type="xs:string" dfdl:textPadKind='none'/>

      <xs:element name="e4" dfdl:lengthKind="implicit">
        <xs:complexType>
          <xs:sequence dfdl:initiator="[" dfdl:separator="," dfdl:terminator="]">
	    <xs:element name="s1" dfdl:lengthKind="explicit" dfdl:length="0" type="xs:string" dfdl:textPadKind='none'/>
	    <xs:element name="s2" dfdl:lengthKind="explicit" dfdl:length="1" type="xs:string" dfdl:textPadKind='none' default="broken"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

  </tdml:defineSchema>
  
  <tdml:defineSchema name="illegalChars">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />
    <dfdl:format ref="ex:GeneralFormat"/>

    <xs:element name="e1" dfdl:lengthKind="delimited" type="xs:string"/>

  </tdml:defineSchema>

<!--
      Test Name: apostrophe_01
         Schema: fixedLengthStrings
        Purpose: This test demonstrates that Daffodil can handle unparsing an apostrophe
                 in the infoset, and parsing an apostrophe in the document.
-->

  <tdml:unparserTestCase name="apostrophe_01" root="e2" model="fixedLengthStrings" roundTrip="true"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2>&apos;</ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    
    <tdml:document>&apos;</tdml:document>

  </tdml:unparserTestCase>

<!--
      Test Name: puaInfosetChars_01
         Schema: illegalChars
        Purpose: When parsing illegal XML characters, they get mapped to PUA. This test demonstrates that when unparsing these mapped infosets, the characters get mapped back to their original values.
-->

  <tdml:parserTestCase name="puaInfosetChars_01" root="e1" model="illegalChars" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:document>
      <tdml:documentPart type="byte">00</tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>&#xE000;</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>

<!--
      Test Name: puaInfosetChars_02
         Schema: illegalChars
        Purpose: When parsing illegal XML characters, they get mapped to PUA. This test demonstrates that when unparsing these mapped infosets, the characters get mapped back to their original values.
-->

  <tdml:parserTestCase name="puaInfosetChars_02" root="e1" model="illegalChars" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:document>
      <tdml:documentPart type="byte">010203</tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>&#xE001;&#xE002;&#xE003;</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>

<!--
      Test Name: puaInfosetChars_03
         Schema: illegalChars
        Purpose: When parsing illegal XML characters, they get mapped to PUA. This test demonstrates that unparsing and unparsing actual PUA values is handled correctly.
-->

  <tdml:parserTestCase name="puaInfosetChars_03" root="e1" model="illegalChars" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:document>&#xE001;</tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>&#xE001;</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>

<!--
      Test Name: puaInfosetChars_04
         Schema: illegalChars
        Purpose: When parsing illegal XML characters, they get mapped to PUA. This test demonstrates that when unparsing these mapped infosets, the characters get mapped back to their original values.
-->

  <tdml:unparserTestCase name="puaInfosetChars_04" root="e1" model="illegalChars" roundTrip="true"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>&#xE001;&#xE002;&#xE003;</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>&#xE001;&#xE002;&#xE003;</tdml:document>

  </tdml:unparserTestCase>

<!--
      Test Name: unparseFixedLengthString01
         Schema: fixedLengthStrings
        Purpose: This is a basic test of the unparse capabilities of Daffodil and the TDML Runner
-->

  <tdml:unparserTestCase name="unparseFixedLengthString01" root="e1" model="fixedLengthStrings" roundTrip="true"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>Hello</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>Hello</tdml:document>

  </tdml:unparserTestCase>

<!--
      Test Name: parseFixedLengthString01
         Schema: fixedLengthStrings
        Purpose: This is a basic test of the roundtrip capabilities of Daffodil and the TDML Runner for
                 a parserTestCase.
-->

  <tdml:parserTestCase name="parseFixedLengthString01" root="e1" model="fixedLengthStrings" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:document>Hello</tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>Hello</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>

<!--
      Test Name: parseFixedLengthStringLength0
         Schema: fixedLengthStrings
        Purpose: Test to see what happens when the fixed length of a string is '0' and when a default value is supplied
-->

  <tdml:parserTestCase name="parseFixedLengthStringLength0" root="e4" model="fixedLengthStrings" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:document>[,2]</tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e4 xmlns:ex="http://example.com">
          <ex:s1></ex:s1>
          <ex:s2>2</ex:s2>
        </ex:e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>


<!--
      Test Name: unparseFixedLengthString02
         Schema: fixedLengthStrings
        Purpose: This is a basic test of the unparse capabilities of Daffodil and the TDML Runner
-->

  <tdml:unparserTestCase name="unparseFixedLengthString02" root="e2" model="fixedLengthStrings" roundTrip="true"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2>0</ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>0</tdml:document>

  </tdml:unparserTestCase>

<!--
      Test Name: unparseFixedLengthString03
         Schema: fixedLengthStrings
        Purpose: This is a basic test of the unparse capabilities of Daffodil and the TDML Runner
                 In this case the test is referencing an external schema rather than an embedded one.
-->

  <tdml:unparserTestCase name="unparseFixedLengthString03" root="e1" model="generalSchema.dfdl.xsd"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>Hello</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>Hello</tdml:document>

  </tdml:unparserTestCase>

<!--
      Test Name: negativeUnparseTest01
         Schema: fixedLengthStrings
        Purpose: This is a test of how the TDML Runner handles a failed Unparse test.
                 In this case, the expected output does not match the unparsed output.
-->

  <tdml:unparserTestCase name="negativeUnparseTest01" root="e2" model="fixedLengthStrings"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2>0</ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>incorrect</tdml:document>
    
    <tdml:errors>
      <tdml:error>TDMLException</tdml:error>
      <tdml:error>output data length</tdml:error>
      <tdml:error>length 1</tdml:error>
      <tdml:error>'0'</tdml:error>
      <tdml:error>length 9</tdml:error>
      <tdml:error>'incorrect'</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
      Test Name: negativeUnparseTest02
         Schema: fixedLengthStrings
        Purpose: This is a test of how the TDML Runner handles a failed Unparse test.
                 In this case, the expected output does not match the unparsed output.
-->

  <tdml:unparserTestCase name="negativeUnparseTest02" root="e2" model="fixedLengthStrings"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2>X</ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>Q</tdml:document>

    <tdml:errors>
      <tdml:error>TDMLException</tdml:error>
      <tdml:error>data differs</tdml:error>
      <tdml:error>Expected 'Q'</tdml:error>
      <tdml:error>Actual was 'X'</tdml:error>
    </tdml:errors>
    
  </tdml:unparserTestCase>

<!--
      Test Name: negativeUnparseTest03
         Schema: fixedLengthStrings
        Purpose: This is a test of how the TDML Runner handles a failed Unparse test.
                 In this case, the input infoset is more data than the element should allow, so 
                 an unparse error should occur.
-->

  <tdml:unparserTestCase name="negativeUnparseTest03" root="e1" model="fixedLengthStrings"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>too much data</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>too much data</tdml:document>
    
    <tdml:errors>
      <tdml:error>output data length</tdml:error>
      <tdml:error>length 5</tdml:error>
      <tdml:error>doesn't match expected</tdml:error>
      <tdml:error>length 13</tdml:error>
      <tdml:error>too much data</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
      Test Name: negativeUnparseTest04
         Schema: fixedLengthStrings
        Purpose: This is a test of how the TDML Runner handles a failed Unparse test.
                 In this case, the input infoset is less data than the element should allow, so 
                 an unparse error should occur.
-->

  <tdml:unparserTestCase name="negativeUnparseTest04" root="e3" model="fixedLengthStrings"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e3>1</ex:e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>1</tdml:document>

    <tdml:errors>
      <tdml:error>output data length 5</tdml:error>
      <tdml:error>length 1</tdml:error>
      <tdml:error>doesn't match</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

<!--
      Test Name: negativeUnparseTest05
         Schema: fixedLengthStrings
        Purpose: This is a test of how the TDML Runner handles a failed Unparse test.
                 In this case, the expected output does not match the unparsed output.
-->

  <tdml:unparserTestCase name="negativeUnparseTest05" root="e2" model="fixedLengthStrings"
    config="cfg_forceFileBuffering">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2>X</ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>

    <tdml:document>Xtra</tdml:document>

    <tdml:errors>
      <tdml:error>TDMLException</tdml:error>
      <tdml:error>output data length 1</tdml:error>
      <tdml:error>'X'</tdml:error>
      <tdml:error>doesn't match expected length 4</tdml:error>
      <tdml:error>'Xtra'</tdml:error>
    </tdml:errors>
    
  </tdml:unparserTestCase>

  <tdml:defineSchema name="delimitedStrings">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />

    <dfdl:format ref="ex:GeneralFormat" encoding="ascii" 
        lengthUnits="bytes" outputNewLine="%CR;%LF;"/>

      <xs:element name="e1" dfdl:lengthKind="implicit">
        <xs:complexType>
          <xs:sequence dfdl:initiator="[" dfdl:separator="," dfdl:terminator="]">
            <xs:element name="s1" type="xs:string" dfdl:lengthKind="delimited"/>
            <xs:element name="s2" type="xs:string" dfdl:lengthKind="delimited"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

    <xs:element name="e2" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="s1" type="xs:string" dfdl:lengthKind="delimited" dfdl:initiator="1."/>
          <xs:element name="s2" type="xs:string" dfdl:lengthKind="delimited" dfdl:initiator="2."/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="e3" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator="">
          <xs:element name="s1" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator="!"/>
          <xs:element name="s2" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator="!"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="e4" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator="">
          <xs:element name="s1" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator="!"/>
          <xs:element name="s2" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator="?"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="e5" type="xs:string" dfdl:lengthKind="delimited" dfdl:initiator="!"/>

  </tdml:defineSchema>
      
<!--
      Test Name: unparseDelimitedString01
      Schema: delimitedStrings
      Purpose: This test demonstrates unparsing a sequence of delimited strings
-->
  <tdml:unparserTestCase name="unparseDelimitedString01" model="delimitedStrings" root="e1" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
        </ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>[1,2]</tdml:document>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="parseDelimitedString01" model="delimitedStrings" root="e1"
    config="cfg_forceFileBuffering">
    <tdml:document>[1,2]</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
        </ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>

<!--
      Test Name: unparseDelimitedString02
      Schema: delimitedStrings
      Purpose: This test demonstrates unparsing a sequence of delimited strings. In this case
               there is too much data and an error should occur
-->
  <tdml:unparserTestCase name="unparseDelimitedString02" model="delimitedStrings" root="e1" roundTrip="false"
    config="cfg_forceFileBuffering">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
          <ex:s2>2</ex:s2>
          <ex:s2>2</ex:s2>
        </ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>{http://example.com}s2</tdml:error>
      <tdml:error>expected element end</tdml:error>
      <tdml:error>{http://example.com}e1</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedString03
      Schema: delimitedStrings
      Purpose: This test demonstrates unparsing a sequence of delimited strings. In this case
               there is not enough data and an error should occur
-->
  <tdml:unparserTestCase name="unparseDelimitedString03" model="delimitedStrings" root="e1" roundTrip="false"
    config="cfg_forceFileBuffering">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
        </ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>Expected element start event</tdml:error>
      <tdml:error>s2</tdml:error>
      <tdml:error>received element end event</tdml:error>
      <tdml:error>e1</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedString04
      Schema: delimitedStrings
      Purpose: This test demonstrates unparsing a sequence of delimited strings. In this case the data is delimited by initiators.
-->

  <tdml:unparserTestCase name="unparseDelimitedString04" model="delimitedStrings" root="e2" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
        </ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>1.1,2.2</tdml:document>
  </tdml:unparserTestCase>
  
<!--
      Test Name: unparseDelimitedString05
      Schema: delimitedStrings
      Purpose: This test demonstrates unparsing a sequence of delimited strings. In this case the data is delimited by terminators.
-->
  <tdml:unparserTestCase name="unparseDelimitedString05" model="delimitedStrings" root="e3" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e3 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
        </ex:e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>1!2!</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedString06
      Schema: delimitedStrings
      Purpose: This test demonstrates unparsing a sequence of delimited strings. In this case the data is delimited by terminators.
-->
  <tdml:unparserTestCase name="unparseDelimitedString06" model="delimitedStrings" root="e4" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e4 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
        </ex:e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>1!2?</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedString07
      Schema: delimitedStrings
      Purpose: This test demonstrates unparsing a delimited string. In this case the data is delimited by initiators.
-->

  <tdml:unparserTestCase name="unparseDelimitedString07" model="delimitedStrings" root="e5" roundTrip="true"
    config="cfg_forceFileBuffering">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e5>exclaim</ex:e5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>!exclaim</tdml:document>
  </tdml:unparserTestCase>


  <tdml:defineSchema name="alignmentPaddingOVC">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />

    <dfdl:format ref="ex:GeneralFormat" encoding="ascii" 
        lengthUnits="bytes" outputNewLine="%CR;%LF;" alignment="1" alignmentUnits="bytes"
        textNumberPadCharacter="x" textPadKind="padChar" textTrimKind="padChar"
        fillByte="%NUL;"/>

      <xs:element name="e1">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="length" type="xs:int" dfdl:textNumberJustification="right" dfdl:lengthKind="explicit" dfdl:textOutputMinLength="4" dfdl:length="4" dfdl:outputValueCalc="{ dfdl:valueLength(../ex:payload, 'bits') }" />
            <xs:element name="payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="sublength" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="1" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="4" dfdl:lengthUnits="bits"/>
                  <xs:element name="subfield1" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="1" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="{ ../ex:sublength }" dfdl:lengthUnits="bits" />
                  <xs:element name="subfield2" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="8" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="4" dfdl:lengthUnits="bits" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="e2">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="length" type="xs:int" dfdl:textNumberJustification="left" dfdl:lengthKind="explicit" dfdl:textOutputMinLength="4" dfdl:length="4" dfdl:outputValueCalc="{ dfdl:valueLength(../ex:payload, 'bits') }" />
            <xs:element name="payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="sublength" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="1" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="4" dfdl:lengthUnits="bits" />
                  <xs:element name="subfield1" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="1" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="{ ../ex:sublength }" dfdl:lengthUnits="bits" />
                  <xs:element name="subfield2" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="8" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="4" dfdl:lengthUnits="bits" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="e3">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="length" type="xs:int" dfdl:textNumberJustification="center" dfdl:lengthKind="explicit" dfdl:textOutputMinLength="4" dfdl:length="4" dfdl:outputValueCalc="{ dfdl:valueLength(../ex:payload, 'bits') }" />
            <xs:element name="payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="sublength" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="1" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="4" dfdl:lengthUnits="bits" />
                  <xs:element name="subfield1" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="1" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="{ ../ex:sublength }" dfdl:lengthUnits="bits" />
                  <xs:element name="subfield2" type="xs:unsignedInt" dfdl:representation="binary"
                              dfdl:alignment="8" dfdl:alignmentUnits="bits"
                              dfdl:lengthKind="explicit" dfdl:length="4" dfdl:lengthUnits="bits" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="e4">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="length" type="xs:int"
                        dfdl:representation="text"
                        dfdl:textPadKind="padChar"
                        dfdl:textTrimKind="padChar"
                        dfdl:textNumberPadCharacter="0"
                        dfdl:textNumberJustification="right"
                        dfdl:lengthKind="explicit"
                        dfdl:textOutputMinLength="4"
                        dfdl:length="1"
                        dfdl:outputValueCalc="{ dfdl:valueLength(../ex:payload, 'bytes') }" />
            <xs:element name="payload" type="xs:string" dfdl:lengthKind="delimited" dfdl:terminator=";"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

  </tdml:defineSchema>

  <!--
      Test Name: alignmentPaddingOVC1
      Schema: delimitedStrings
      Purpose: This test demonstrates roundtrip of an element with padding, OVC, and alignment
  -->
  <tdml:unparserTestCase name="alignmentPaddingOVC1" model="alignmentPaddingOVC" root="e1"
    config="cfg_forceFileBuffering">
    <tdml:document>
      <tdml:documentPart type="text">xx20</tdml:documentPart><!-- length of below fields in bits -->
      <tdml:documentPart type="bits">0101</tdml:documentPart><!-- subfield1 length -->
      <tdml:documentPart type="bits">10101</tdml:documentPart><!-- subfield1 -->
      <tdml:documentPart type="bits">0000000</tdml:documentPart><!-- alignment skip -->
      <tdml:documentPart type="bits">1010</tdml:documentPart><!-- subfield1 -->
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1 xmlns:ex="http://example.com">
          <ex:length>20</ex:length>
          <ex:payload>
            <ex:sublength>5</ex:sublength>
            <ex:subfield1>21</ex:subfield1>
            <ex:subfield2>10</ex:subfield2>
          </ex:payload>
        </ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>

<!--
      Test Name: alignmentPaddingOVC2
      Schema: delimitedStrings
      Purpose: This test demonstrates roundtrip of an element with padding, OVC, and alignment
-->
  <tdml:unparserTestCase name="alignmentPaddingOVC2" model="alignmentPaddingOVC" root="e2"
    config="cfg_forceFileBuffering">
    <tdml:document>
      <tdml:documentPart type="text">20xx</tdml:documentPart><!-- length of below fields in bits -->
      <tdml:documentPart type="bits">0101</tdml:documentPart><!-- subfield1 length -->
      <tdml:documentPart type="bits">10101</tdml:documentPart><!-- subfield1 -->
      <tdml:documentPart type="bits">0000000</tdml:documentPart><!-- alignment skip -->
      <tdml:documentPart type="bits">1010</tdml:documentPart><!-- subfield1 -->
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2 xmlns:ex="http://example.com">
          <ex:length>20</ex:length>
          <ex:payload>
            <ex:sublength>5</ex:sublength>
            <ex:subfield1>21</ex:subfield1>
            <ex:subfield2>10</ex:subfield2>
          </ex:payload>
        </ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>

<!--
      Test Name: alignmentPaddingOVC3
      Schema: delimitedStrings
      Purpose: This test demonstrates roundtrip of an element with padding, OVC, and alignment
-->
  <tdml:unparserTestCase name="alignmentPaddingOVC3" model="alignmentPaddingOVC" root="e3"
    config="cfg_forceFileBuffering">
    <tdml:document>
      <tdml:documentPart type="text">x20x</tdml:documentPart><!-- length of below fields in bits -->
      <tdml:documentPart type="bits">0101</tdml:documentPart><!-- subfield1 length -->
      <tdml:documentPart type="bits">10101</tdml:documentPart><!-- subfield1 -->
      <tdml:documentPart type="bits">0000000</tdml:documentPart><!-- alignment skip -->
      <tdml:documentPart type="bits">1010</tdml:documentPart><!-- subfield1 -->
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e3 xmlns:ex="http://example.com">
          <ex:length>20</ex:length>
          <ex:payload>
            <ex:sublength>5</ex:sublength>
            <ex:subfield1>21</ex:subfield1>
            <ex:subfield2>10</ex:subfield2>
          </ex:payload>
        </ex:e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>

<!--
      Test Name: alignmentPaddingOVC4
      Schema: delimitedStrings
      Purpose: This test demonstrates an SDE when explicit length is less than textOutputMinLength
-->
  <tdml:unparserTestCase name="alignmentPaddingOVC4" model="alignmentPaddingOVC"
    roundTrip="none" config="cfg_forceFileBuffering">
    <tdml:document>2AB;</tdml:document>
    <tdml:warnings>
      <tdml:warning>Schema Definition Warning</tdml:warning>
      <tdml:warning>Explicit dfdl:length</tdml:warning>
      <tdml:warning>out of range</tdml:warning>
      <tdml:warning>textOutputMinLength</tdml:warning>
    </tdml:warnings>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e4>
          <ex:payload>AB</ex:payload>
        </ex:e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:unparserTestCase>

</tdml:testSuite>
