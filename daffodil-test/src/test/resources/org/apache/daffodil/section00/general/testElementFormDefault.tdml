<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite suiteName="ElementFormDefaultTest"
  description="Section 16 - Arrays and Optional Elements" xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ct="http://w3.ibm.com/xmlns/dfdl/ctInfoset"
  xmlns:ex="http://example.com" xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext">

  <tdml:defineSchema name="qualified" elementFormDefault="qualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>

    <dfdl:format lengthKind="explicit" length="1" ref="ex:GeneralFormat"
      separator="" initiator="" terminator="" occursCountKind="implicit"
      ignoreCase="no" textNumberRep="standard" representation="text" />
    <dfdl:defineFormat name="root">
      <dfdl:format lengthKind="delimited" ref="ex:GeneralFormat"
        separator="," initiator="" terminator="" representation="text" separatorPosition="infix" />
    </dfdl:defineFormat>

    <xs:element name="r1" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence dfdl:ref="ex:root">
          <xs:element name="opt" type="xs:string" minOccurs="0"
            maxOccurs="3" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>
  
  <tdml:defineSchema name="unqualified" elementFormDefault="unqualified">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>

    <dfdl:format lengthKind="explicit" length="1" ref="ex:GeneralFormat"
      separator="" initiator="" terminator="" occursCountKind="implicit"
      ignoreCase="no" textNumberRep="standard" representation="text" />
    <dfdl:defineFormat name="root">
      <dfdl:format lengthKind="delimited" ref="ex:GeneralFormat"
        separator="," initiator="" terminator="" representation="text" separatorPosition="infix" />
    </dfdl:defineFormat>

    <xs:element name="r1" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence dfdl:ref="ex:root">
          <xs:element name="opt" type="xs:string" minOccurs="0"
            maxOccurs="3" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>
  
  <tdml:defineSchema name="missing" >
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>

    <dfdl:format lengthKind="explicit" length="1" ref="ex:GeneralFormat"
      separator="" initiator="" terminator="" occursCountKind="implicit"
      ignoreCase="no" textNumberRep="standard" representation="text" />
    <dfdl:defineFormat name="root">
      <dfdl:format lengthKind="delimited" ref="ex:GeneralFormat"
        separator="," initiator="" terminator="" representation="text" separatorPosition="infix" />
    </dfdl:defineFormat>

    <xs:element name="r1" dfdl:ref="ex:root">
      <xs:complexType>
        <xs:sequence dfdl:ref="ex:root">
          <xs:element name="opt" type="xs:string" minOccurs="0"
            maxOccurs="3" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

<!--
  Test Name: delimOptPresentQualified01
     Schema: s1
       Root: r1
    Purpose: This test demonstrates unparsing fails with unqualified child elements
             when elementFormDefault is qualified.
-->

  <tdml:unparserTestCase name="delimOptPresentQualified01" root="r1"
    model="qualified">

    <tdml:infoset >
      <tdml:dfdlInfoset>
        <ex:r1>
          <opt>1</opt>
        </ex:r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>{}opt</tdml:error>
      <tdml:error>expected element end</tdml:error>
      <tdml:error>{http://example.com}r1</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
  Test Name: delimOptPresentQualified02
     Schema: s1
       Root: r1
    Purpose: This test demonstrates unparsing succeeds with qualified child elements
             when elementFormDefault is qualified.
-->

  <tdml:unparserTestCase name="delimOptPresentQualified02" root="r1"
    model="qualified" roundTrip="true">

    <tdml:infoset >
      <tdml:dfdlInfoset>
        <ex:r1>
          <ex:opt>1</ex:opt>
        </ex:r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[1]]></tdml:document>

  </tdml:unparserTestCase>
  
<!--
  Test Name: delimOptPresentQualified03
     Schema: elementFormDefaultQualified.dfdl.xsd
       Root: s1
    Purpose: This test demonstrates unparsing succeeds with qualified child elements
             when elementFormDefault is qualified in an external schema.
-->

  <tdml:unparserTestCase name="delimOptPresentQualified03" root="s1"
    model="elementFormDefaultQualified.dfdl.xsd" roundTrip="true">

    <tdml:infoset>
      <tdml:dfdlInfoset>
      <ex:s1>
        <ex:e1>strng</ex:e1>
      </ex:s1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[strng]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: delimOptPresentQualified04
     Schema: elementFormDefaultQualified.dfdl.xsd
       Root: s1
    Purpose: This test demonstrates unparsing fails with unqualified child elements
             when elementFormDefault is qualified in an external schema.
-->

  <tdml:unparserTestCase name="delimOptPresentQualified04" root="s1"
    model="elementFormDefaultQualified.dfdl.xsd">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:s1>
          <e1>strng</e1>
        </ex:s1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>{}e1</tdml:error>
      <tdml:error>expected element start</tdml:error>
      <tdml:error>{http://example.com}e1</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
  Test Name: delimOptPresentQualified05
     Schema: elementFormDefaultQualified.dfdl.xsd
       Root: e0
    Purpose: This test demonstrates unparsing fails with unqualified root elements
             when elementFormDefault is qualified in an external schema.
-->

  <tdml:unparserTestCase name="delimOptPresentQualified05" root="e0"
    model="elementFormDefaultQualified.dfdl.xsd">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e0>strng</e0>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Error</tdml:error>
      <tdml:error>{}e0</tdml:error>
      <tdml:error>expected element start</tdml:error>
      <tdml:error>{http://example.com}e0</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>
  
  <!--
  Test Name: delimOptPresentUnqualified01
     Schema: s1
       Root: r1
    Purpose: This test demonstrates unparsing succeeds with unqualified child elements
             when elementFormDefault is unqualified.
-->

  <tdml:unparserTestCase name="delimOptPresentUnqualified01" root="r1"
    model="unqualified" roundTrip="true">

    <tdml:infoset >
      <tdml:dfdlInfoset>
        <ex:r1>
          <opt>1</opt>
        </ex:r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[1]]></tdml:document>

  </tdml:unparserTestCase>
  
    <!--
  Test Name: delimOptPresentUnqualified02
     Schema: s1
       Root: r1
    Purpose: This test demonstrates unparsing fails with qualified child elements
             when elementFormDefault is unqualified.
-->

  <tdml:unparserTestCase name="delimOptPresentUnqualified02" root="r1"
    model="unqualified">

    <tdml:infoset >
      <tdml:dfdlInfoset>
        <ex:r1>
          <ex:opt>1</ex:opt>
        </ex:r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>{http://example.com}r1</tdml:error>
      <tdml:error>expected element end</tdml:error>
      <tdml:error>{http://example.com}opt</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>
  
  <!--
  Test Name: delimOptPresentMissing
     Schema: s1
       Root: r1
    Purpose: This test demonstrates unparsing succeeds with unqualified child elements
             when elementFormDefault is missing.
-->

  <tdml:unparserTestCase name="delimOptPresentMissing" root="r1"
    model="missing" roundTrip="true">

    <tdml:infoset >
      <tdml:dfdlInfoset>
        <ex:r1>
          <ex:opt>1</ex:opt>
        </ex:r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[1]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: delimOptPresentUnqualified03
     Schema: elementFormDefaultUnqualified.dfdl.xsd
       Root: s1
    Purpose: This test demonstrates unparsing succeeds with unqualified child elements
             when elementFormDefault is unqualified in an external schema.
-->

  <tdml:unparserTestCase name="delimOptPresentUnqualified03" root="s1"
    model="elementFormDefaultUnqualified.dfdl.xsd" roundTrip="true">

    <tdml:infoset>
      <tdml:dfdlInfoset>
      <ex:s1>
        <e1>strng</e1>
      </ex:s1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[strng]]></tdml:document>

  </tdml:unparserTestCase>

<!--
  Test Name: delimOptPresentUnqualified04
     Schema: elementFormDefaultUnqualified.dfdl.xsd
       Root: s1
    Purpose: This test demonstrates unparsing fails with qualified child elements
             when elementFormDefault is unqualified in an external schema.
-->

  <tdml:unparserTestCase name="delimOptPresentUnqualified04" root="s1"
    model="elementFormDefaultUnqualified.dfdl.xsd">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:s1>
          <ex:e1>strng</ex:e1>
        </ex:s1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>{}e1</tdml:error>
      <tdml:error>expected element start</tdml:error>
      <tdml:error>{http://example.com}e1</tdml:error>
    </tdml:errors>

  </tdml:unparserTestCase>

<!--
  Test Name: delimOptPresentGlobalQualified01
     Schema: elementFormDefaultUnqualified.dfdl.xsd
       Root: e0
    Purpose: This test demonstrates that by definition, global elements are always qualified,
             even if elementFormDefault is "unqualified" 
-->

  <tdml:unparserTestCase name="delimOptPresentGlobalQualified01" root="e0"
    model="elementFormDefaultUnqualified.dfdl.xsd">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e0>strng</ex:e0>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>strng</tdml:document>
  </tdml:unparserTestCase>

<!--
  Test Name: delimOptPresentGlobalQualified02
     Schema: elementFormDefaultUnqualified.dfdl.xsd
       Root: e0
    Purpose: This test demonstrates that by definition, global elements are always qualified,
             even if elementFormDefault is "unqualified". In this case the commparison will fail. 
-->

  <tdml:unparserTestCase name="delimOptPresentGlobalQualified02" root="e0"
    model="elementFormDefaultUnqualified.dfdl.xsd">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e0>strng</e0>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>{}e0</tdml:error>
      <tdml:error>expected element start</tdml:error>
      <tdml:error>{http://example.com}e0</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

</tdml:testSuite>
