<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
When using the stringAsXml=true runtime property, the infoset no longer
validates against the DFDL schema. This is because what used to be a simple
element with type xs:string is now a complex element with an "xmlString" child
and a grand child depending on the payload XML.

To modify a DFDL schema into an XSD schema to validate a this kind of infoset,
the DFDL schema should have the following changes:

1. Import this file:

   <xs:import namespace="urn:stringAsXml" schemaLocation="stringAsXmlWrapper.xsd" />

2. Simple elements with type="xs:string" and dfdlx:runtimeProperty="stringAsXml=true"
   should be changed to a complex type referencing the group in this schema.
   For example, if the DFDl schema looks like this:

   <xs:element name="xmlString" type="xs:string" dfdlx:runtimeProperties="stringAsXml=true" />

   Then the validation schema should be changed to this:

   <xs:element name="xmlString">
     <xs:complexType>
       <xs:group xmlns:s="urn:stringAsXml" ref="s:stringAsXmlGroup" />
     </xs:complexType>
   </xs:element>

3. Modify this file to import the payload schema and reference the correct root
   element represented by the xmlString string.

Note that the stringAsXml element will have no namespace associated with it,
and in the infoset will be output like this to ensure this is the case:

  <stringAsXml xmlns="">...</stringAsXml>

This is necessary to reset the default XML namespace to ensure the default
namespace in the infoset (if defined) does not leak into the namespace of
the XML payload and prevent validation.

Using this approach, the payload schema can be used without modification to
validate XML embedded in data and subsequently embedded into the infoset.
-->

<schema
  xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:stringAsXml"
  elementFormDefault="unqualified">

  <import namespace="urn:payload" schemaLocation="xmlPayload.xsd" />

  <group name="stringAsXmlGroup">
    <sequence>
      <element name="stringAsXml">
        <complexType>
          <sequence>
            <element xmlns:p="urn:payload" ref="p:root" />
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>
  
</schema>

