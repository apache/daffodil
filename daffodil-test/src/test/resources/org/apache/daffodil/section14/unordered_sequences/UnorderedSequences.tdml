<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2012-2013 Tresys Technology, LLC. All rights reserved.
   
    Developed by: Tresys Technology, LLC
                  http://www.tresys.com
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal with
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    
     1. Redistributions of source code must retain the above copyright notice,
        this list of conditions and the following disclaimers.
    
     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimers in the
        documentation and/or other materials provided with the distribution.
    
     3. Neither the names of Tresys Technology, nor the names of its contributors
        may be used to endorse or promote products derived from this Software
        without specific prior written permission.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
    SOFTWARE.
-->
<tdml:testSuite xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ex="http://example.com">

	<tdml:defineSchema name="simple">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="implicit" />
		<xs:element name="USG_01">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered">

					<xs:element name="e1" type="ex:stNumStr"
						dfdl:lengthKind="explicit" dfdl:length="2">
						<xs:annotation>
							<xs:appinfo source="http://www.ogf.org/dfdl/">
								<dfdl:assert test="{ dfdl:checkConstraints(.) }"
									message="Assertion failed for dfdl:checkConstraints(.)" />
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="e2" type="ex:stHexStr"
						dfdl:lengthKind="explicit" dfdl:length="2">
						<xs:annotation>
							<xs:appinfo source="http://www.ogf.org/dfdl/">
								<dfdl:assert test="{ dfdl:checkConstraints(.) }"
									message="Assertion failed for dfdl:checkConstraints(.)" />
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="e3" type="xs:string" dfdl:lengthKind="explicit"
						dfdl:length="2">
						<xs:annotation>
							<xs:appinfo source="http://www.ogf.org/dfdl/">
								<dfdl:assert test="{ dfdl:checkConstraints(.) }"
									message="Assertion failed for dfdl:checkConstraints(.)" />
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:complexType>
		</xs:element>
		<xs:simpleType name="stHexStr">
			<xs:restriction base="xs:string">
				<xs:pattern value="[a-fA-F0-9]+"></xs:pattern>
			</xs:restriction>
		</xs:simpleType>
		<xs:simpleType name="stNumStr">
			<xs:restriction base="xs:string">
				<xs:pattern value="[0-9]+"></xs:pattern>
			</xs:restriction>
		</xs:simpleType>
	</tdml:defineSchema>

	<tdml:parserTestCase name="test_simple" model="simple"
		description="Section 14 Sequence group with left over data - DFDL-14-001R"
		root="USG_01">
		<tdml:document><![CDATA[veba00]]></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<USG_01>
					<e1>00</e1>
					<e2>ba</e2>
					<e3>ve</e3>
				</USG_01>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_simple_fail_scalar"
		model="simple" description="Section 14 Sequence group with left over data - DFDL-14-001R"
		root="USG_01">
		<tdml:document><![CDATA[verybadf00d222]]></tdml:document>
		<tdml:errors>
			<tdml:error>e1</tdml:error>
			<tdml:error>is scalar but occurred 2 times</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:defineSchema name="simple_min_max_occurs">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="implicit" />
		<xs:element name="USG_01">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered">

					<xs:element name="e1" type="ex:stNumStr"
						dfdl:lengthKind="explicit" dfdl:length="2" minOccurs="1"
						maxOccurs="2" dfdl:occursCountKind="parsed">
						<xs:annotation>
							<xs:appinfo source="http://www.ogf.org/dfdl/">
								<dfdl:assert test="{ dfdl:checkConstraints(.) }"
									message="Assertion failed for dfdl:checkConstraints(.)" />
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="e2" type="ex:stHexStr"
						dfdl:lengthKind="explicit" dfdl:length="2">
						<xs:annotation>
							<xs:appinfo source="http://www.ogf.org/dfdl/">
								<dfdl:assert test="{ dfdl:checkConstraints(.) }"
									message="Assertion failed for dfdl:checkConstraints(.)" />
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="e3" type="xs:string" dfdl:lengthKind="explicit"
						dfdl:length="2">
						<xs:annotation>
							<xs:appinfo source="http://www.ogf.org/dfdl/">
								<dfdl:assert test="{ dfdl:checkConstraints(.) }"
									message="Assertion failed for dfdl:checkConstraints(.)" />
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:complexType>
		</xs:element>
		<xs:simpleType name="stHexStr">
			<xs:restriction base="xs:string">
				<xs:pattern value="[a-fA-F0-9]+"></xs:pattern>
			</xs:restriction>
		</xs:simpleType>
		<xs:simpleType name="stNumStr">
			<xs:restriction base="xs:string">
				<xs:pattern value="[0-9]+"></xs:pattern>
			</xs:restriction>
		</xs:simpleType>
	</tdml:defineSchema>

	<tdml:parserTestCase name="test_simple_min_max_occurs"
		model="simple_min_max_occurs" description="Section 14 Sequence group with left over data - DFDL-14-001R"
		root="USG_01" validation="on">
		<tdml:document><![CDATA[veba0022]]></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<USG_01>
					<e1>00</e1>
					<e1>22</e1>
					<e2>ba</e2>
					<e3>ve</e3>
				</USG_01>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_simple_min_max_occurs_fail"
		model="simple_min_max_occurs" description="Section 14 Sequence group with left over data - DFDL-14-001R"
		root="USG_01" validation="on">
		<tdml:document><![CDATA[verybadf00d222]]></tdml:document>
		<tdml:errors>
			<tdml:error>e2 is scalar but occurred 3 times</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:defineSchema name="simple_delimited">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="delimited" />
		<xs:element name="USG_01">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered"
					dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a">
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b">
					</xs:element>

					<xs:element name="e3" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="c">
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>
	</tdml:defineSchema>

	<tdml:parserTestCase name="test_simple_delimited"
		model="simple_delimited" description="Section 14 Sequence group with left over data - DFDL-14-001R"
		root="USG_01">
		<tdml:document><![CDATA[b2,a1,c3]]></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<USG_01>
					<e1>1</e1>
					<e2>2</e2>
					<e3>3</e3>
				</USG_01>
			</tdml:dfdlInfoset>
		</tdml:infoset>
  </tdml:parserTestCase>

	<tdml:defineSchema name="simple_nil">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="implicit" nilValueDelimiterPolicy="none"/>
		<xs:element name="USG_01">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered"
					dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited" nillable="true" 
						dfdl:nilKind="literalValue" dfdl:nilValue="%ES;" dfdl:initiator="a">
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b">
					</xs:element>

					<xs:element name="e3" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="c">
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>
	</tdml:defineSchema>

	<tdml:parserTestCase name="test_simple_nil"
		model="simple_nil" description="Section 14 Sequence group with left over data - DFDL-14-001R"
		root="USG_01">
		<tdml:document><![CDATA[b2,,c3]]></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<USG_01>
					<e1 xsi:nil="true"></e1>
					<e2>2</e2>
					<e3>3</e3>
				</USG_01>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>


	<tdml:defineSchema name="simple_invalid_path_to_branch">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="delimited" />
		<xs:element name="USG_01">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered"
					dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a">
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b">
					</xs:element>

					<xs:element name="e3" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="c">
					</xs:element>

					<xs:element name="e4" type="xs:string" dfdl:lengthKind="delimited"
						dfdl:inputValueCalc="{ ../e3 }">
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="USG_02">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered"
					dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a">
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b">
					</xs:element>

					<xs:element name="e3" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="c">
					</xs:element>

					<xs:element name="e4" type="xs:string" dfdl:lengthKind="delimited"
						dfdl:inputValueCalc="{ ../doesNotExist }">
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>
	</tdml:defineSchema>

	<tdml:parserTestCase name="test_simple_invalid_path_to_branch"
		model="simple_invalid_path_to_branch" description="Section 14 Sequence group with left over data - DFDL-14-001R"
		root="USG_01">
		<tdml:document><![CDATA[b2,a1,a4,c3,ruh-oh!]]></tdml:document>
		<tdml:errors>
			<tdml:error>Schema Definition Error</tdml:error>
			<tdml:error>Expression</tdml:error>
			<tdml:error>../e3</tdml:error>
			<tdml:error>navigates to another branch</tdml:error>
			<tdml:error>e3</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<!-- The XPath evaluation throws a PE. The failure is suppressed. This doesn't allow the actual error 
		to come through. -->
	<tdml:parserTestCase
		name="test_simple_invalid_path_to_branch_does_not_exist" model="simple_invalid_path_to_branch"
		description="Section 14 Sequence group with left over data - DFDL-14-001R"
		root="USG_02">
		<tdml:document><![CDATA[b2,a1,a4,c3,ruh-oh!]]></tdml:document>
		<tdml:errors>
			<tdml:error></tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:defineSchema name="nested_paths">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="delimited" />
		<xs:element name="USG_01">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="ordered" dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a" />

					<xs:element name="uoSeq" dfdl:lengthKind="implicit"
						dfdl:initiator="b">
						<xs:complexType>
							<xs:sequence dfdl:sequenceKind="unordered"
								dfdl:separator=":">
								<xs:element name="uoMember1" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="x" />
								<xs:element name="uoMember2" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="y" />
								<xs:element name="uoMember3" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="z">
									<xs:annotation>
										<xs:appinfo source="http://www.ogf.org/dfdl/">
											<dfdl:assert test="{ ../../e1 }" message="Assertion failed for ../../e1" />
										</xs:appinfo>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="c" />

				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="USG_02">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="ordered" dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a" />

					<xs:element name="uoSeq" dfdl:lengthKind="implicit"
						dfdl:initiator="b">
						<xs:complexType>
							<xs:sequence dfdl:sequenceKind="unordered"
								dfdl:separator=":">
								<xs:element name="uoMember1" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="x" />
								<xs:element name="uoMember2" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="y" />
								<xs:element name="uoMember3" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="z">
									<xs:annotation>
										<xs:appinfo source="http://www.ogf.org/dfdl/">
											<dfdl:assert test="{ ../uoMember1 }"
												message="Assertion failed for ../uoMember1" />
										</xs:appinfo>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="c" />

				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="USG_03">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered"
					dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a" />

					<xs:element name="uoSeq" dfdl:lengthKind="implicit"
						dfdl:initiator="b">
						<xs:complexType>
							<xs:sequence dfdl:sequenceKind="unordered"
								dfdl:separator=":">
								<xs:element name="uoMember1" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="x" />
								<xs:element name="uoMember2" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="y" />
								<xs:element name="uoMember3" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="z">
									<xs:annotation>
										<xs:appinfo source="http://www.ogf.org/dfdl/">
											<dfdl:assert test="{ ../../e1 eq 1 }"
												message="Assertion failed for xs:int(../../e1) eq 1" />
										</xs:appinfo>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="c" />

				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="USG_04">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="ordered" dfdl:separator=",">

					<xs:element name="choice" dfdl:lengthKind="implicit"
						minOccurs="1" maxOccurs="unbounded">
						<xs:complexType>
							<xs:choice dfdl:choiceLengthKind="implicit">
								<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
									dfdl:initiator="a" />

								<xs:element name="uoSeq" dfdl:lengthKind="implicit"
									dfdl:initiator="b">
									<xs:complexType>
										<xs:sequence dfdl:sequenceKind="unordered"
											dfdl:separator=":">
											<xs:element name="uoMember1" type="xs:int"
												dfdl:lengthKind="delimited" dfdl:initiator="x" />
											<xs:element name="uoMember2" type="xs:int"
												dfdl:lengthKind="delimited" dfdl:initiator="y" />
											<xs:element name="uoMember3" type="xs:int"
												dfdl:lengthKind="delimited" dfdl:initiator="z">
												<xs:annotation>
													<xs:appinfo source="http://www.ogf.org/dfdl/">
														<dfdl:assert test="{ ../../../choice[1]/e1 eq 1 }"
															message="Assertion failed for xs:int(../../../choice[1]/e1) eq 1" />
													</xs:appinfo>
												</xs:annotation>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>

								<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
									dfdl:initiator="c" />
							</xs:choice>
						</xs:complexType>
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<!-- Test multiple valid paths in single expression -->
		<xs:element name="USG_05">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="ordered" dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a" />

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b" />

					<xs:element name="uoSeq" dfdl:lengthKind="implicit"
						dfdl:initiator="c">
						<xs:complexType>
							<xs:sequence dfdl:sequenceKind="unordered"
								dfdl:separator=":">
								<xs:element name="uoMember1" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="x" />
								<xs:element name="uoMember2" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="y" />
								<xs:element name="uoMember3" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="z">
									<xs:annotation>
										<xs:appinfo source="http://www.ogf.org/dfdl/">
											<dfdl:assert test="{ (../../e1 * ../../e2) eq 2 }"
												message="Assertion failed for ../../e1" />
										</xs:appinfo>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<!-- Test multiple invalid paths in single expression -->
		<xs:element name="USG_06">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="ordered" dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a" />

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b" />

					<xs:element name="uoSeq" dfdl:lengthKind="implicit"
						dfdl:initiator="c">
						<xs:complexType>
							<xs:sequence dfdl:sequenceKind="unordered"
								dfdl:separator=":">
								<xs:element name="uoMember1" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="x" />
								<xs:element name="uoMember2" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="y" />
								<xs:element name="uoMember3" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="z">
									<xs:annotation>
										<xs:appinfo source="http://www.ogf.org/dfdl/">
											<dfdl:assert test="{ (../uoMember1[1] * ../uoMember2[1]) eq 2 }"
												message="Assertion failed for (../uoMember1 * ../uoMember2) eq 2" />
										</xs:appinfo>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<!-- Testing that the wildcard character in DFDLExpression works and that 
			we can successfully retrieve and test the nodeset to see if it navigates 
			to an invalid location -->
		<xs:element name="USG_07">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="ordered" dfdl:separator=",">

					<xs:element name="e1" dfdl:lengthKind="implicit"
						dfdl:initiator="a">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="c1" type="xs:int" dfdl:lengthKind="explicit"
									dfdl:lengthUnits="characters" dfdl:length="1" />
								<xs:element name="c2" type="xs:int" dfdl:lengthKind="explicit"
									dfdl:lengthUnits="characters" dfdl:length="1" />
								<xs:element name="c3" type="xs:int" dfdl:lengthKind="explicit"
									dfdl:lengthUnits="characters" dfdl:length="1" />
							</xs:sequence>
						</xs:complexType>
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b" />

					<xs:element name="uoSeq" dfdl:lengthKind="implicit"
						dfdl:initiator="c">
						<xs:complexType>
							<xs:sequence dfdl:sequenceKind="unordered"
								dfdl:separator=":">
								<xs:element name="uoMember1" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="x" />
								<xs:element name="uoMember2" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="y" />
								<xs:element name="uoMember3" type="xs:int"
									dfdl:lengthKind="delimited" dfdl:initiator="z">
									<xs:annotation>
										<xs:appinfo source="http://www.ogf.org/dfdl/">
											<dfdl:assert test="{ fn:count( ../../e1 ) eq 3 }"
												message="Assertion failed for fn:count( ../../e1 ) eq 3" />
										</xs:appinfo>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:parserTestCase name="test_nested_valid_path_to_branch"
		model="nested_paths"
		description="navigate from unordered branch to an element of an enclosing ordered sequence"
		root="USG_01">
		<tdml:document><![CDATA[a1,bz10:x20:y99,c55]]></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<USG_01>
					<e1>1</e1>
					<uoSeq>
						<uoMember1>20</uoMember1>
						<uoMember2>99</uoMember2>
						<uoMember3>10</uoMember3>
					</uoSeq>
					<e2>55</e2>
				</USG_01>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_nested_multiple_valid_paths_to_branch"
		model="nested_paths"
		description="navigate from unordered branch to two elements of an enclosing ordered sequence from one expresison"
		root="USG_05">
		<tdml:document><![CDATA[a1,b2,cz10:x20:y99]]></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<USG_05>
					<e1>1</e1>
					<e2>2</e2>
					<uoSeq>
						<uoMember1>20</uoMember1>
						<uoMember2>99</uoMember2>
						<uoMember3>10</uoMember3>
					</uoSeq>
				</USG_05>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<!-- I've noticed that if you use expressions that evaluate to 'null' (meaning 
		the node wasn't found) that Daffodil does not issue an error/warning stating 
		such. This could be deceptive. -->
	<tdml:parserTestCase name="test_nested_multiple_invalid_paths_to_branch"
		model="nested_paths"
		description="navigate from unordered branch to two elements of an enclosing ordered sequence from one expresison"
		root="USG_06">
		<tdml:document><![CDATA[a1,b2,cy99:x20:z10]]></tdml:document>
		<tdml:errors>
			<tdml:error>Expression</tdml:error>
			<tdml:error>(../uoMember1[1] * ../uoMember2[1]) eq 2</tdml:error>
			<tdml:error>contains a path</tdml:error>
			<tdml:error>../uoMember1[1]</tdml:error>
			<tdml:error>navigates to another branch</tdml:error>
			<tdml:error>of the same choice</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_nested_path_evaluates_to_nodelist"
		model="nested_paths"
		description="navigate from unordered branch to element of an enclosing 
		ordered sequence using function that expects nodeset"
		root="USG_07">
		<tdml:document><![CDATA[a123,b2,cz10:x20:y99]]></tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<USG_07>
					<e1>
						<c1>1</c1>
						<c2>2</c2>
						<c3>3</c3>
					</e1>
					<e2>2</e2>
					<uoSeq>
						<uoMember1>20</uoMember1>
						<uoMember2>99</uoMember2>
						<uoMember3>10</uoMember3>
					</uoSeq>
				</USG_07>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_nested_invalid_path_to_branch"
		model="nested_paths"
		description="navigate from unordered sequence to another branch of same unordered sequence"
		root="USG_02">
		<tdml:document><![CDATA[a1,bx20:y99:z10,c55]]></tdml:document>
		<tdml:errors>
			<tdml:error>../uoMember1</tdml:error>
			<tdml:error>navigates</tdml:error>
			<tdml:error>to</tdml:error>
			<tdml:error>another</tdml:error>
			<tdml:error>branch</tdml:error>
			<tdml:error>uoMember1</tdml:error>
			<tdml:error>of</tdml:error>
			<tdml:error>same</tdml:error>
			<tdml:error>choice</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_nested_invalid_path_to_branch_2"
		model="nested_paths"
		description="navigate from unordered sequence to enclosing unordered sequence"
		root="USG_03">
		<tdml:document><![CDATA[a1,bx20:y99:z10,c55]]></tdml:document>
		<tdml:errors>
			<tdml:error>Expression</tdml:error>
			<tdml:error>../../e1 eq 1</tdml:error>
			<tdml:error>navigates</tdml:error>
			<tdml:error>to</tdml:error>
			<tdml:error>branch</tdml:error>
			<tdml:error>another</tdml:error>
			<tdml:error>choice</tdml:error>
			<tdml:error>USG_03::LocalComplexTypeDef::sequence::element.choiceElement::LocalComplexTypeDef::choice</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_nested_invalid_path_to_branch_3"
		model="nested_paths"
		description="navigate from unordered sequence to choice branch of enclosing ordered sequence"
		root="USG_04">
		<tdml:document><![CDATA[a1,bx20:y99:z10,c55]]></tdml:document>
		<tdml:errors>
			<tdml:error>Expression</tdml:error>
			<tdml:error>../../../choice[1]/e1 eq 1</tdml:error>
			<tdml:error>navigates</tdml:error>
			<tdml:error>to</tdml:error>
			<tdml:error>branch</tdml:error>
			<tdml:error>another</tdml:error>
			<tdml:error>choice</tdml:error>
			<tdml:error>USG_04::LocalComplexTypeDef::sequence::element.choice::LocalComplexTypeDef::choice</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:defineSchema name="simple_sdes_1">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="delimited" />

		<!-- Immediate children of unordered sequence must be Element or ElementRef -->
		<xs:element name="SDE_01">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered"
					dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a">
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b">
					</xs:element>

					<xs:choice>
						<xs:element name="redPill" type="xs:int"
							dfdl:lengthKind="delimited" dfdl:initiator="r" />
						<xs:element name="bluePill" type="xs:int"
							dfdl:lengthKind="delimited" dfdl:initiator="b" />
					</xs:choice>

				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:defineSchema name="simple_sdes_2">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="delimited" />

		<!-- Optional array/elements must be occursCountKind='parsed' -->
		<xs:element name="SDE_02">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered"
					dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a">
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b">
					</xs:element>

					<xs:element name="ruh-oh" type="xs:int" minOccurs="0"
						maxOccurs="1" dfdl:occursCountKind="implicit" />

				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:defineSchema name="simple_sdes_3">
		<dfdl:format ref="ex:daffodilTest1" lengthUnits="characters"
			lengthKind="delimited" />

		<!-- Immediate members of an unordered sequence cannot have the same name 
			and namespace -->
		<xs:element name="SDE_03">
			<xs:complexType>
				<xs:sequence dfdl:sequenceKind="unordered"
					dfdl:separator=",">

					<xs:element name="e1" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="a">
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="b">
					</xs:element>

					<xs:element name="e2" type="xs:int" dfdl:lengthKind="delimited"
						dfdl:initiator="c">
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		</xs:element>
	</tdml:defineSchema>

	<tdml:parserTestCase name="test_sde_element_element_ref"
		model="simple_sdes_1"
		description="should sde, immediate children can only be element or element ref"
		root="SDE_01">
		<tdml:document><![CDATA[a1,bx20:y99:z,c55]]></tdml:document>
		<tdml:errors>
			<tdml:error>Members of an unordered sequence (element.SDE_01::LocalComplexTypeDef::sequence)</tdml:error>
			<tdml:error>must be Element or ElementRef.</tdml:error>
			<tdml:error>The offending members: choice.</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_sde_optional_array_ock_parsed"
		model="simple_sdes_2"
		description="should sde, immediate children that are optional elements or arrays must be ock parsed"
		root="SDE_02">
		<tdml:document><![CDATA[a1,bx20:y99:z,c55]]></tdml:document>
		<tdml:errors>
			<tdml:error>Members of an unordered sequence (element.SDE_02::LocalComplexTypeDef::sequence)</tdml:error>
			<tdml:error>that are optional or array elements must have dfdl:occursCountKind='parsed'.</tdml:error>
			<tdml:error>The offending members: ruh-oh.</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="test_sde_unique_names_in_ns"
		model="simple_sdes_3"
		description="should sde, immediate children must have unique names in their namespace"
		root="SDE_03">
		<tdml:document><![CDATA[a1,bx20:y99:z,c55]]></tdml:document>
		<tdml:errors>
			<tdml:error>Two or more members of the unordered sequence (element.SDE_03::LocalComplexTypeDef::sequence)</tdml:error>
			<tdml:error>have the same name and the same namespace.</tdml:error>
			<tdml:error>[Namespace: prefix "" is mapped to URI "http://example.com"]	Name: e2.</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

</tdml:testSuite>
