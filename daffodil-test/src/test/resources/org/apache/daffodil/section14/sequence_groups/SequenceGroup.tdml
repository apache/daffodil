<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<tdml:testSuite xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ex="http://example.com"
  xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"  
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  defaultRoundTrip="true">

   <tdml:defineSchema name="emptySDEschema">
     <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
     <dfdl:format ref="ex:GeneralFormat"/>

     <xs:element name="emptySeq" type="ex:complexEmptySeq"/>
     
     <xs:complexType name="complexEmptySeq">
       <xs:sequence/>
     </xs:complexType>
  
     <xs:element name="complexEmptyContent" type="ex:complex"/>
     
     <xs:complexType name="complex">
       <xs:sequence>
         <xs:sequence dfdl:separator=","/>
       </xs:sequence>
     </xs:complexType>
     
     <xs:element name="noContentComplex">
       <xs:complexType>
       </xs:complexType>
     </xs:element>
     
     <xs:element name="noContentAnnotatedComplex">
       <xs:complexType>
       <xs:annotation><xs:documentation>not really doc
       </xs:documentation></xs:annotation>
       </xs:complexType>
     </xs:element>

   </tdml:defineSchema>
   
  <!--
    Test name: complexEmptyContent
       Schema: emptySDEschema
      Purpose: This test demonstrates that DFDL allows complexTypes with empty content (not to be confused with NO content)
  -->
  
  <tdml:parserTestCase name="complexEmptyContent" root="complexEmptyContent"
    model="emptySDEschema" description="Section 14 - DFDL-14-007R.">
    <tdml:document>
      <tdml:documentPart type="text"></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <complexEmptyContent></complexEmptyContent>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>
  
  <!--
    Test name: noContentComplexSDE
       Schema: emptySDEschema
      Purpose: This test demonstrates that having a complexType with NO content results in an SDE
  -->
  
  <tdml:parserTestCase name="noContentComplexSDE" root="noContentComplex"
    model="emptySDEschema" description="Section 14 - DFDL-14-007R.">
    <tdml:document>
      <tdml:documentPart type="text"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>A complex type must have exactly one model-group element child which is a sequence, choice, or group reference.</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
    <tdml:parserTestCase name="noContentAnnotatedComplexSDE" root="noContentAnnotatedComplex"
    model="emptySDEschema" description="Section 14 - DFDL-14-007R.">
    <tdml:document>
      <tdml:documentPart type="text"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error/>
    </tdml:errors>
  </tdml:parserTestCase>
   
  <!--
    Test name: emptySequenceSDE
       Schema: emptySDEschema
      Purpose: This test demonstrates that it is a schema definition error if an empty sequence is the content of a complex type
  -->
  
  <tdml:parserTestCase name="emptySequenceSDE" root="emptySeq"
    model="emptySDEschema" description="Section 14 - DFDL-14-007R.">
    <tdml:document>
      <tdml:documentPart type="text"></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:defineSchema name="NadaParser.dfdl.xsd">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" />
    <xs:element name="test">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="count" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" />
          <xs:element name="record" dfdl:lengthKind="explicit" dfdl:length="0" maxOccurs="unbounded"
            dfdl:occursCountKind="expression" dfdl:occursCount="{ ../ex:count }">
            <xs:complexType>
              <xs:sequence>
              <!--
                <xs:element name="value1" dfdl:lengthKind="explicit" dfdl:length="1" type="xs:string" />
                <xs:element name="value2" dfdl:lengthKind="explicit" dfdl:length="1" type="xs:string" />
              -->
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>

  <tdml:parserTestCase name="nadaParser" root="test"
    model="NadaParser.dfdl.xsd" description="Tests to make sure that the NadaParser generated in SpecifiedLengthExplicit is optimized out"
    roundTrip="false">
    <tdml:document>
      <tdml:documentPart type="text">1,</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <test>
          <count>1</count>
          <record/>
        </test>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

   <tdml:defineSchema name="SequenceGroup-Embedded.dfdl.xsd">
     <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
     <dfdl:format ref="ex:GeneralFormat" lengthUnits="bytes"
       lengthKind="implicit" />
     <xs:element name="SG_05">
       <xs:complexType>
         <xs:sequence>
           <xs:element name="e1" type="xs:int"
             dfdl:lengthKind="explicit" dfdl:length="3" />
           <xs:element name="e2" type="xs:float"
             dfdl:lengthKind="explicit" dfdl:length="5" />
           <xs:element name="e3" type="xs:long"
             dfdl:lengthKind="explicit" dfdl:length="4" />
           <xs:element name="leftover" type="xs:string"
             dfdl:lengthKind="delimited" />
         </xs:sequence>
       </xs:complexType>
     </xs:element>
   </tdml:defineSchema>
   
  <tdml:defineSchema name="SequenceGroup546">
     <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
     <dfdl:format ref="ex:GeneralFormat" lengthUnits="bytes"
       lengthKind="implicit" />
     <xs:element name="SG_05">
       <xs:complexType>
         <xs:sequence>
           <xs:element name="e1" type="xs:int"
             dfdl:lengthKind="explicit" dfdl:length="3" />
             <!-- Let's leave off the name attribute of the next element -->
           <xs:element  type="xs:float"
             dfdl:lengthKind="explicit" dfdl:length="5" />
           <xs:element name="e3" type="xs:long"
             dfdl:lengthKind="explicit" dfdl:length="4" />
         </xs:sequence>
       </xs:complexType>
     </xs:element>
   </tdml:defineSchema>
   
    <tdml:parserTestCase name="SeqGrp546"
     model="SequenceGroup546" description="Section 14 Sequence group with left over data - DFDL-14-001R"
     root="SG_05">
     <tdml:document><![CDATA[123123451234]]></tdml:document>
      <tdml:errors>
        <tdml:error>Schema Definition Error</tdml:error>
        <tdml:error>'name'</tdml:error>
        <tdml:error>element</tdml:error>
      </tdml:errors>
   </tdml:parserTestCase>
 
   <tdml:parserTestCase name="SeqGrp_05"
     model="SequenceGroup-Embedded.dfdl.xsd" description="Section 14 Sequence group with left over data - DFDL-14-001R"
     root="SG_05">
     <tdml:document><![CDATA[837742.8-1197108]]></tdml:document>
     <tdml:infoset>
       <tdml:dfdlInfoset>
         <SG_05>
           <e1>837</e1>
           <e2>742.8</e2>
           <e3>-119</e3>
           <leftover>7108</leftover>
         </SG_05>
       </tdml:dfdlInfoset>
     </tdml:infoset>
   </tdml:parserTestCase>
 
  <tdml:defineSchema name="hiddenGroup1">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />
    <xs:group name="hg">
      <xs:sequence>
        <xs:element name="f" type="xs:int" dfdl:outputValueCalc="{ 1 }" />
      </xs:sequence>
    </xs:group>
    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>

  <tdml:parserTestCase name="hiddenGroup1" root="e"
    model="hiddenGroup1" description="Unit test of hidden group ref.">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[1,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e>
          <g>2</g>
        </e>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="hiddenGroup2">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />
    <xs:group name="hg">
      <xs:sequence>
        <xs:element name="f" type="xs:int" dfdl:outputValueCalc="{ 0 }"/>
      </xs:sequence>
    </xs:group>
    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg">
            <xs:element name="x" type="xs:int" />
          </xs:sequence>
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>
  
  <tdml:parserTestCase name="hiddenGroupSchemaFail" root="e"
    model="hiddenGroup2" description="Unit test of hidden group ref.">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[1,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>A sequence with hiddenGroupRef cannot have children</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="hiddenGroup3">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />

    <xs:group name="hg">
      <xs:sequence>
        <xs:element name="f" type="xs:int" dfdl:outputValueCalc="{ 42 }">
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:assert><![CDATA[{ xs:int(.) eq 42 }]]></dfdl:assert>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:group>
    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>
  
  <tdml:defineSchema name="hiddenGroupRefEmptyString">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />

    <xs:element name="e">
      <xs:complexType>
        <xs:sequence dfdl:hiddenGroupRef="" />
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>
  
  <!--
    Test name: hiddenGroupRefEmptyString
       Schema: hiddenGroupRefEmptyString
      Purpose: This test demonstrates that hidden group references cannot be the empty string.
  -->
  
  <tdml:parserTestCase name="hiddenGroupRefEmptyString" root="e"
    model="hiddenGroupRefEmptyString" description="Section 14 - Hidden Elements DFDL-14-037R.">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[42,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>QName</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:defineSchema name="hiddenGroupRefDoesNotExist">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />

    <xs:element name="e">
      <xs:complexType>
        <xs:sequence>
          <xs:sequence dfdl:hiddenGroupRef="doesNotExist"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>

  <!--
    Test name: hiddenGroupRefDoesNotExist
       Schema: hiddenGroupRefDoesNotExist
       Purpose: This test demonstrates that hidden group references that don't exist are handled
       cleanly
  -->

  <tdml:parserTestCase name="hiddenGroupRefDoesNotExist" root="e"
    model="hiddenGroupRefDoesNotExist" description="Section 14 - Hidden Elements DFDL-14-037R.">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[42,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Referenced group definition not found</tdml:error>
      <tdml:error>doesNotExist</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <!--
    Test name: hiddenGroupWithAssert
       Schema: hiddenGroup3
      Purpose: This test demonstrates that hidden groups can contain regular DFDL annotations.
  -->
  
  <tdml:parserTestCase name="hiddenGroupWithAssert" root="e"
    model="hiddenGroup3" description="Section 14 - Hidden Elements DFDL-14-037R.">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[42,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e>
          <g>2</g>
        </e>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hiddenGroupWithAssert2
       Schema: hiddenGroup3
      Purpose: This test demonstrates that hidden groups can contain regular DFDL annotations.
  -->
  
  <tdml:parserTestCase name="hiddenGroupWithAssert2" root="e"
    model="hiddenGroup3" description="Section 14 - Hidden Elements DFDL-14-037R.">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[43,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Assertion failed</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="hiddenGroup4">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />
    <xs:group name="hgNested">
      <xs:sequence>
        <xs:element name="sneaky" type="xs:int" dfdl:outputValueCalc="{ 5 }" />
      </xs:sequence>
    </xs:group>
    <xs:group name="hg">
      <xs:sequence dfdl:separator="/">
        <xs:sequence dfdl:hiddenGroupRef="ex:hgNested" />
        <xs:element name="f" type="xs:int" dfdl:outputValueCalc="{ 42 }" />
      </xs:sequence>
    </xs:group>
    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:group name="hgNested3">
      <xs:sequence>
        <xs:element name="sneakier" type="xs:int" dfdl:outputValueCalc="{ 6 }" />
      </xs:sequence>
    </xs:group>
    <xs:group name="hgNested2">
      <xs:sequence dfdl:separator="o">
        <xs:sequence dfdl:hiddenGroupRef="ex:hgNested3" />
        <xs:element name="sneaky" type="xs:int" dfdl:outputValueCalc="{ 5 }" />
      </xs:sequence>
    </xs:group>
    <xs:group name="hg2">
      <xs:sequence dfdl:separator="/">
        <xs:sequence dfdl:hiddenGroupRef="ex:hgNested2" />
        <xs:element name="f" type="xs:int" dfdl:outputValueCalc="{ 42 }" />
      </xs:sequence>
    </xs:group>

    <xs:element name="ee" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg2" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>
  
  <!--
    Test name: hiddenGroupNested
       Schema: hiddenGroup4
      Purpose: This test demonstrates that hidden groups can contain other hidden groups
  -->
  
  <tdml:parserTestCase name="hiddenGroupNested" root="e"
    model="hiddenGroup4" description="Section 14 - Hidden Elements - DFDL-14-041R.">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[5/42,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e>
          <g>2</g>
        </e>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hiddenGroupNested2
       Schema: hiddenGroup4
      Purpose: This test demonstrates that hidden groups can contain other hidden groups
  -->
  
  <tdml:parserTestCase name="hiddenGroupNested2" root="ee"
    model="hiddenGroup4" description="Section 14 - Hidden Elements - DFDL-14-041R.">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[6o5/42,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ee>
          <g>2</g>
        </ee>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="hiddenGroupChoice">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />

    <xs:group name="hg">
          <xs:choice>
            <xs:element name="inty" type="xs:int"
              dfdl:lengthKind="delimited" dfdl:outputValueCalc="{ 145 }" />
            <xs:element name="stringy" type="xs:string"
              dfdl:lengthKind="delimited" />
          </xs:choice>
    </xs:group>

    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>
  
  <!--
    Test name: hiddenGroupChoice
       Schema: hiddenGroupChoice
      Purpose: This test demonstrates that hidden groups can contain a choice.
  -->
  
  <tdml:parserTestCase name="hiddenGroupChoice" root="e"
    model="hiddenGroupChoice" description="Section 14 - Hidden Groups - DFDL-14-042R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[145,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e>
          <g>2</g>
        </e>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: hiddenGroupChoice2
       Schema: hiddenGroupChoice
      Purpose: This test demonstrates that hidden groups can contain a choice.
  -->

  <tdml:parserTestCase name="hiddenGroupChoice2" root="e"
    model="hiddenGroupChoice" description="Section 14 - Hidden Groups - DFDL-14-042R"
    roundTrip="twoPass">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[stringy,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e>
          <g>2</g>
        </e>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="hiddenGroupLoop">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />
    <xs:group name="hgNested">
      <xs:sequence>
        <xs:sequence dfdl:hiddenGroupRef="ex:hg"/>
        <xs:element name="sneaky" type="xs:int" />
      </xs:sequence>
    </xs:group>
    <xs:group name="hg">
      <xs:sequence dfdl:separator="/">
        <xs:sequence dfdl:hiddenGroupRef="ex:hgNested" />
        <xs:element name="f" type="xs:int" />
      </xs:sequence>
    </xs:group>
    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
 </tdml:defineSchema>

  <!--
    Test name: hiddenGroupLoop
       Schema: hiddenGroupLoop
      Purpose: This test demonstrates a circular reference with hidden group refs and should cause a Schema Definition Error
  -->
  
  <tdml:parserTestCase name="hiddenGroupLoop" root="e"
    model="hiddenGroupLoop" description="Section 14 - Hidden Groups - DFDL-14-042R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[stringy,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors> 
      <tdml:error>Schema Definition Error</tdml:error> 
      <tdml:error>circular</tdml:error>
    </tdml:errors> 
 </tdml:parserTestCase>

  <tdml:parserTestCase name="AS000" root="table" model="AS-Embedded"
    description="hiddenGroupRef">
    <tdml:document>
	  <tdml:documentPart type="text" replaceDFDLEntities="true"><![CDATA[Creator: NCSA%LF;Date: Mon Feb 23 15:20:47 CST 2009%LF;0,1,2,3,4,5,6,7,8,9%LF;1,2,3,4,5,6,7,8,9,10%LF;2,3,4,5,6,7,8,9,10,11%LF;3,4,5,6,7,8,9,10,11,12%LF;4,5,6,7,8,9,10,11,12,13%LF;5,6,7,8,9,10,11,12,13,14%LF;6,7,8,9,10,11,12,13,14,15%LF;7,8,9,10,11,12,13,14,15,16%LF;8,9,10,11,12,13,14,15,16,17%LF;9,10,11,12,13,14,15,16,17,18%LF;]]></tdml:documentPart>
	</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <table>
          <matrix>
            <row>
              <cell xsi:type="xs:int">0</cell>
              <cell xsi:type="xs:int">1</cell>
              <cell xsi:type="xs:int">2</cell>
              <cell xsi:type="xs:int">3</cell>
              <cell xsi:type="xs:int">4</cell>
              <cell xsi:type="xs:int">5</cell>
              <cell xsi:type="xs:int">6</cell>
              <cell xsi:type="xs:int">7</cell>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">1</cell>
              <cell xsi:type="xs:int">2</cell>
              <cell xsi:type="xs:int">3</cell>
              <cell xsi:type="xs:int">4</cell>
              <cell xsi:type="xs:int">5</cell>
              <cell xsi:type="xs:int">6</cell>
              <cell xsi:type="xs:int">7</cell>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">2</cell>
              <cell xsi:type="xs:int">3</cell>
              <cell xsi:type="xs:int">4</cell>
              <cell xsi:type="xs:int">5</cell>
              <cell xsi:type="xs:int">6</cell>
              <cell xsi:type="xs:int">7</cell>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
              <cell xsi:type="xs:int">11</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">3</cell>
              <cell xsi:type="xs:int">4</cell>
              <cell xsi:type="xs:int">5</cell>
              <cell xsi:type="xs:int">6</cell>
              <cell xsi:type="xs:int">7</cell>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
              <cell xsi:type="xs:int">11</cell>
              <cell xsi:type="xs:int">12</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">4</cell>
              <cell xsi:type="xs:int">5</cell>
              <cell xsi:type="xs:int">6</cell>
              <cell xsi:type="xs:int">7</cell>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
              <cell xsi:type="xs:int">11</cell>
              <cell xsi:type="xs:int">12</cell>
              <cell xsi:type="xs:int">13</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">5</cell>
              <cell xsi:type="xs:int">6</cell>
              <cell xsi:type="xs:int">7</cell>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
              <cell xsi:type="xs:int">11</cell>
              <cell xsi:type="xs:int">12</cell>
              <cell xsi:type="xs:int">13</cell>
              <cell xsi:type="xs:int">14</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">6</cell>
              <cell xsi:type="xs:int">7</cell>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
              <cell xsi:type="xs:int">11</cell>
              <cell xsi:type="xs:int">12</cell>
              <cell xsi:type="xs:int">13</cell>
              <cell xsi:type="xs:int">14</cell>
              <cell xsi:type="xs:int">15</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">7</cell>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
              <cell xsi:type="xs:int">11</cell>
              <cell xsi:type="xs:int">12</cell>
              <cell xsi:type="xs:int">13</cell>
              <cell xsi:type="xs:int">14</cell>
              <cell xsi:type="xs:int">15</cell>
              <cell xsi:type="xs:int">16</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">8</cell>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
              <cell xsi:type="xs:int">11</cell>
              <cell xsi:type="xs:int">12</cell>
              <cell xsi:type="xs:int">13</cell>
              <cell xsi:type="xs:int">14</cell>
              <cell xsi:type="xs:int">15</cell>
              <cell xsi:type="xs:int">16</cell>
              <cell xsi:type="xs:int">17</cell>
            </row>
            <row>
              <cell xsi:type="xs:int">9</cell>
              <cell xsi:type="xs:int">10</cell>
              <cell xsi:type="xs:int">11</cell>
              <cell xsi:type="xs:int">12</cell>
              <cell xsi:type="xs:int">13</cell>
              <cell xsi:type="xs:int">14</cell>
              <cell xsi:type="xs:int">15</cell>
              <cell xsi:type="xs:int">16</cell>
              <cell xsi:type="xs:int">17</cell>
              <cell xsi:type="xs:int">18</cell>
            </row>
          </matrix>
        </table>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="AS-Embedded">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat"
          lengthKind="delimited" separator=""
          leadingSkip='0' encoding="US-ASCII" ignoreCase='no' initiator=""
          terminator="" initiatedContent="no" textNumberRep="standard"
          separatorSuppressionPolicy="trailingEmpty" separatorPosition="infix"
          documentFinalTerminatorCanBeMissing='yes' textTrimKind="none"/>

  <!-- CSV with metadata header, remove header -->

  <xs:element name="matrix" type="ex:matrixType" />
  <xs:element name="table" type="ex:SimpleTable" />

  <xs:group name="hdrGroup">
    <xs:sequence>
      <xs:element name="hdrblock" type="ex:header" />
    </xs:sequence>
  </xs:group>

  <xs:complexType name="SimpleTable">
    <xs:sequence>
      <xs:sequence dfdl:hiddenGroupRef="ex:hdrGroup" />
      <xs:element name="matrix" type="ex:matrixType" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="header">
    <xs:sequence>
      <xs:element name="Creator" type="xs:string" dfdl:terminator="%NL;"
        dfdl:initiator="Creator:" dfdl:encoding="ASCII"
        dfdl:lengthKind="delimited"
        dfdl:outputValueCalc="{ ' NCSA' }" />
      <xs:element name="Date" type="xs:string" dfdl:terminator="%NL;"
        dfdl:initiator="Date:" dfdl:encoding="ASCII"
        dfdl:outputValueCalc="{ ' Mon Feb 23 15:20:47 CST 2009' }" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="matrixType">
    <xs:sequence>
      <xs:element name="row" maxOccurs="unbounded" dfdl:occursCountKind='parsed'>
        <xs:complexType>
          <xs:sequence dfdl:separator="," dfdl:terminator="%NL;"
            dfdl:separatorSuppressionPolicy="anyEmpty" dfdl:separatorPosition="infix">
            <xs:element name="cell" type="xs:int" maxOccurs="unbounded"
              dfdl:occursCountKind='parsed'
              dfdl:encoding="ASCII" dfdl:representation="text"
              dfdl:lengthKind="delimited" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  </tdml:defineSchema>
  
  <tdml:defineSchema name="hiddenGroup5">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />
    <xs:group name="ab">
      <xs:sequence>
        <xs:element name="a" dfdl:length="1" dfdl:lengthKind="explicit" type="xs:int" dfdl:outputValueCalc="{ 1 }" />
        <xs:element name="b" dfdl:length="1" dfdl:lengthKind="explicit" type="xs:int" dfdl:outputValueCalc="{ 2 }" />
      </xs:sequence>
    </xs:group>
    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:ab" dfdl:separator=":" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>
  
  <tdml:defineSchema name="hiddenGroup6">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />
    <xs:group name="ab">
      <xs:sequence dfdl:separator=":">
        <xs:element name="a" dfdl:length="1" dfdl:lengthKind="explicit" type="xs:int" />
        <xs:element name="b" dfdl:length="1" dfdl:lengthKind="explicit" type="xs:int" />
      </xs:sequence>
    </xs:group>
    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
          <xs:sequence>
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/">
                <dfdl:sequence hiddenGroupRef="ex:ab"/>
              </xs:appinfo>
            </xs:annotation>
          </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>
  
  <tdml:defineSchema name="hiddenGroup7">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />
    <xs:group name="ab">
      <xs:sequence dfdl:separator=":">
        <xs:element name="a" dfdl:length="1" dfdl:lengthKind="explicit" type="xs:int" />
        <xs:element name="b" dfdl:length="1" dfdl:lengthKind="explicit" type="xs:int" />
      </xs:sequence>
    </xs:group>
    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
          <xs:sequence>
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/">
                <dfdl:sequence>
                  <dfdl:property name="hiddenGroupRef">ex:ab</dfdl:property>
                </dfdl:sequence>
              </xs:appinfo>
            </xs:annotation>
          </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>
  
  <!--
    Test name: hiddenGroupIgnoredProps
       Schema: hiddenGroup5
      Purpose: This test demonstrates that when the dfdl:hiddenGroupRef property is specified, all other DFDL properties are ignored.
  -->
  
  <tdml:parserTestCase name="hiddenGroupIgnoredProps" root="e"
    model="hiddenGroup5" description="Section 14 - When the dfdl:hiddenGroupRef property is specified, all other DFDL properties are ignored. - DFDL-14-039R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[1:2,3]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>xs:int</tdml:error>
      <tdml:error>Unable to parse</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: hiddenGroupAttributeNotation
       Schema: hiddenGroup6
      Purpose: This test demonstrates that a hiddenGroupRef cannot be specified in attribute form within an annotation
  -->
  
  <tdml:parserTestCase name="hiddenGroupAttributeNotation" root="e"
    model="hiddenGroup6" description="SEE ERRATA 3.1 - attribute form no longer allowed for hiddenGroupRef (Previous req DFDL-7-018R)">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[1:2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>A sequence with hiddenGroupRef cannot have children</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: hiddenGroupElementNotation
       Schema: hiddenGroup7
      Purpose: This test demonstrates that a hiddenGroupRef cannot be specified in element form within an annotation
  -->
  
  <tdml:parserTestCase name="hiddenGroupElementNotation" root="e"
    model="hiddenGroup7" description="Section 7 - The hiddenGroupRef property may be specified in attribute or short form DFDL-7-018R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[1:2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>A sequence with hiddenGroupRef cannot have children</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="AD-Embedded">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" 
        lengthKind="delimited" separator=""
        leadingSkip='0' encoding="US-ASCII" ignoreCase='no' initiator=""
        terminator="" initiatedContent="no" textNumberRep="standard"
        separatorSuppressionPolicy="anyEmpty" separatorPosition="infix"
        occursCountKind="parsed" textTrimKind="none"/>

  <!-- Evaluated occursCount based on hidden elements -->

  <xs:group name="xCountGroup">
    <xs:sequence>
      <xs:element name="xCount" type="xs:int" dfdl:representation="text"
        dfdl:outputValueCalc="{ fn:count(../ex:x) }" />
    </xs:sequence>
  </xs:group>

  <xs:group name="yCountGroup">
    <xs:sequence>
      <xs:element name="yCount" type="xs:int" dfdl:representation="text"
        dfdl:outputValueCalc="{ fn:count(../ex:y) }" />
    </xs:sequence>
  </xs:group>

  <xs:element name="list">
    <xs:complexType>
      <xs:sequence>
        <xs:sequence dfdl:separator="%NL;" dfdl:separatorPosition="postfix">
          <xs:sequence dfdl:hiddenGroupRef="ex:xCountGroup" />
          <xs:element name="x" type="xs:string" maxOccurs="unbounded"
            dfdl:occursCountKind="expression" dfdl:occursCount="{ ../ex:xCount }" />
          <xs:sequence dfdl:hiddenGroupRef="ex:yCountGroup" />
          <xs:element name="y" type="xs:string" maxOccurs="unbounded"
            dfdl:occursCountKind="expression" dfdl:occursCount="{ ../ex:yCount }" />
        </xs:sequence>
        <xs:sequence dfdl:hiddenGroupRef="ex:leftOver" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:group name="leftOver">
    <xs:sequence>
      <xs:element name="leftOver" type="xs:string" dfdl:outputValueCalc="{ '' }" />
    </xs:sequence>
  </xs:group>
  </tdml:defineSchema>
  
  <tdml:parserTestCase name="AD000" root="list" model="AD-Embedded"
    description="occursCount with expressions"
    roundTrip="twoPass">
    <tdml:document>
	  <tdml:documentPart type="text" replaceDFDLEntities="true"><![CDATA[3%LF;first x%LF;second x%LF;third x%LF;5%LF;first y%LF;second y%LF;third y%LF;fourth y%LF;fifth y%LF;ignored input%LF;more ignored input%LF;]]></tdml:documentPart>
	</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <list>
          <x xsi:type="xs:string">first x</x>
          <x xsi:type="xs:string">second x</x>
          <x xsi:type="xs:string">third x</x>
          <y xsi:type="xs:string">first y</y>
          <y xsi:type="xs:string">second y</y>
          <y xsi:type="xs:string">third y</y>
          <y xsi:type="xs:string">fourth y</y>
          <y xsi:type="xs:string">fifth y</y>
        </list>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="AC-Embedded">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat"
        lengthKind="delimited" separator=""
        leadingSkip='0' encoding="US-ASCII" ignoreCase='no' initiator=""
        terminator="" initiatedContent="no" textNumberRep="standard"
        separatorSuppressionPolicy="anyEmpty" separatorPosition="infix"
        occursCountKind="parsed" textTrimKind="none"/>

  <!-- Parsing values as a hidden layer, then
    creating elements by evaluating XPath expressions on the layer -->

  <xs:group name="data">
    <xs:sequence dfdl:separator="">
      <xs:element name="_x" type="xs:int" dfdl:representation="text"
        dfdl:terminator="%NL;" dfdl:outputValueCalc="{ xs:int(../ex:x) }" />
      <xs:element name="_y" type="xs:int" dfdl:representation="text"
        dfdl:terminator="%NL;" dfdl:outputValueCalc="{ xs:int(../ex:y) }" />
      <xs:element name="_z" type="xs:int" dfdl:representation="text"
        dfdl:terminator="%NL;" dfdl:outputValueCalc="{ xs:int(../ex:z) }" />
    </xs:sequence>
  </xs:group>

  <xs:element name="table">
    <xs:complexType>
      <xs:sequence>
        <xs:sequence dfdl:hiddenGroupRef="ex:data" />
        <xs:element name="product" type="xs:int"
          dfdl:inputValueCalc="{ /ex:table/ex:_x * /ex:table/ex:_y * /ex:table/ex:_z }" />
        <xs:element name="sum" type="xs:int"
          dfdl:inputValueCalc="{ /ex:table/ex:_x + /ex:table/ex:_y + /ex:table/ex:_z }" />
        <xs:element name="concat" type="xs:string"
          dfdl:inputValueCalc="{ fn:concat(fn:concat(/ex:table/ex:_x,/ex:table/ex:_y),/ex:table/ex:_z) }" />
        <xs:element name="x" type="xs:string" dfdl:inputValueCalc="{ xs:string(../ex:_x) }" />
        <xs:element name="y" type="xs:string" dfdl:inputValueCalc="{ xs:string(../ex:_y) }" />
        <xs:element name="z" type="xs:string" dfdl:inputValueCalc="{ xs:string(../ex:_z) }" />
        <xs:element name="productAgain" type="xs:string"
          dfdl:inputValueCalc="{ xs:string(../ex:product) }" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  </tdml:defineSchema>
  
  <tdml:parserTestCase name="AC000" root="table" model="AC-Embedded"
    description="inputValueCalc expressions and hiddenGroupRef">
    <tdml:document>
	  <tdml:documentPart type="text" replaceDFDLEntities="true"><![CDATA[10%LF;20%LF;30%LF;]]></tdml:documentPart>
	</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <table>
          <product xsi:type="xs:int">6000</product>
          <sum xsi:type="xs:int">60</sum>
          <concat xsi:type="xs:string">102030</concat>
          <x xsi:type="xs:string">10</x>
          <y xsi:type="xs:string">20</y>
          <z xsi:type="xs:string">30</z>
          <productAgain xsi:type="xs:string">6000</productAgain>
        </table>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

	<tdml:defineSchema name="nestedGroupRefs">
		<xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
		<xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited"
          occursCountKind='parsed'/>

		<xs:element name="root">
			<xs:complexType>
				<xs:group ref="ex:g0" dfdl:separator="%NL;"></xs:group>
			</xs:complexType>
		</xs:element>
		<xs:group name="g0">
			<xs:sequence dfdl:separatorPosition="infix">
				<xs:element name="g0c0" minOccurs="0">
					<xs:complexType>
						<xs:group ref="ex:g1" dfdl:separator="|"></xs:group>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:group>
		<xs:group name="g1">
			<xs:sequence dfdl:separatorPosition="infix">
				<xs:element name="g1c0" minOccurs="0">
					<xs:complexType>
						<xs:group ref="ex:g2" dfdl:separator=","></xs:group>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:group>
		<xs:group name="g2">
			<xs:sequence dfdl:separatorPosition="infix">
				<xs:element name="g2c0" type="xs:string" />
				<xs:element name="g2c1" type="xs:string" />
				<xs:element name="g2c2" type="xs:string" />
			</xs:sequence>
		</xs:group>

	</tdml:defineSchema>

	<tdml:parserTestCase name="nestedGroupRefs" root="root"
		model="nestedGroupRefs" description="Verify that nested group references are working properly - DFDL-14">

		<tdml:document>
		  <tdml:documentPart type="text" replaceDFDLEntities="true"><![CDATA[A,B,C|D,E,F|G,H,I%LF;A,B,C|D,E,F|G,H,I%LF;A,B,C|D,E,F|G,H,I]]></tdml:documentPart>
		</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
				<root>
					<g0c0>
						<g1c0>
							<g2c0>A</g2c0>
							<g2c1>B</g2c1>
							<g2c2>C</g2c2>
						</g1c0>
						<g1c0>
							<g2c0>D</g2c0>
							<g2c1>E</g2c1>
							<g2c2>F</g2c2>
						</g1c0>
						<g1c0>
							<g2c0>G</g2c0>
							<g2c1>H</g2c1>
							<g2c2>I</g2c2>
						</g1c0>
					</g0c0>
					<g0c0>
						<g1c0>
							<g2c0>A</g2c0>
							<g2c1>B</g2c1>
							<g2c2>C</g2c2>
						</g1c0>
						<g1c0>
							<g2c0>D</g2c0>
							<g2c1>E</g2c1>
							<g2c2>F</g2c2>
						</g1c0>
						<g1c0>
							<g2c0>G</g2c0>
							<g2c1>H</g2c1>
							<g2c2>I</g2c2>
						</g1c0>
					</g0c0>
					<g0c0>
						<g1c0>
							<g2c0>A</g2c0>
							<g2c1>B</g2c1>
							<g2c2>C</g2c2>
						</g1c0>
						<g1c0>
							<g2c0>D</g2c0>
							<g2c1>E</g2c1>
							<g2c2>F</g2c2>
						</g1c0>
						<g1c0>
							<g2c0>G</g2c0>
							<g2c1>H</g2c1>
							<g2c2>I</g2c2>
						</g1c0>
					</g0c0>
				</root>
			</tdml:dfdlInfoset>
		</tdml:infoset>

  </tdml:parserTestCase>

	<tdml:defineSchema name="nestedGroupRefs2">
		<xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
        <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" 
          occursCountKind='parsed'/>

		<xs:element name="root">
			<xs:complexType>
				<xs:group ref="ex:g0" dfdl:separator="%NL;"></xs:group>
			</xs:complexType>
		</xs:element>
		<xs:group name="g0">
			<xs:sequence dfdl:separatorPosition="infix">
				<xs:element name="g0c0" minOccurs="0">
					<xs:complexType>
						<xs:group ref="ex:g1" dfdl:separator="|"></xs:group>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:group>
		<xs:group name="g1">
			<xs:sequence dfdl:separatorPosition="infix">
				<xs:element name="g1c0" minOccurs="0">
					<xs:complexType>
						<xs:group ref="ex:g2" dfdl:separator=","></xs:group>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:group>
		<xs:group name="g2">
			<xs:sequence dfdl:separatorPosition="infix">
				<xs:element name="g2c0" type="xs:string" />
				<xs:element name="g2c1" type="xs:string" />
        <xs:element name="g2c2" type="xs:string" />
        <xs:sequence dfdl:hiddenGroupRef="ex:hg" />
        <xs:group ref="ex:vg" />
			</xs:sequence>
    </xs:group>
    <xs:group name="hg">
      <xs:choice>
        <xs:element name="inty" type="xs:int"
          dfdl:lengthKind="delimited" dfdl:outputValueCalc="{ 1 }" />
        <xs:element name="stringy" type="xs:string"
          dfdl:lengthKind="delimited" />
      </xs:choice>
    </xs:group>
    <xs:group name="vg">
      <xs:choice>
        <xs:element name="inty" type="xs:int"
          dfdl:lengthKind="delimited" />
        <xs:element name="stringy" type="xs:string"
          dfdl:lengthKind="delimited" />
      </xs:choice>
    </xs:group>

  </tdml:defineSchema>

	<tdml:parserTestCase name="nestedGroupRefs2" root="root"
		model="nestedGroupRefs2" description="Verify that nested hidden groups and choices work correctly - DFDL-14-039R"
		roundTrip="twoPass">

		<tdml:document>
		  <tdml:documentPart type="text" replaceDFDLEntities="true"><![CDATA[A,B,C,1,x|D,E,F,2,y|G,H,I,3,z%LF;A,B,C,x,1|D,E,F,y,2|G,H,I,z,3%LF;A,B,C,4,u|D,E,F,5,v|G,H,I,6,w]]></tdml:documentPart>
		</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
				<root>
					<g0c0>
						<g1c0>
							<g2c0>A</g2c0>
							<g2c1>B</g2c1>
							<g2c2>C</g2c2>
							<stringy>x</stringy>
						</g1c0>
						<g1c0>
							<g2c0>D</g2c0>
							<g2c1>E</g2c1>
							<g2c2>F</g2c2>
							<stringy>y</stringy>
						</g1c0>
						<g1c0>
							<g2c0>G</g2c0>
							<g2c1>H</g2c1>
							<g2c2>I</g2c2>
							<stringy>z</stringy>
						</g1c0>
					</g0c0>
					<g0c0>
						<g1c0>
							<g2c0>A</g2c0>
							<g2c1>B</g2c1>
							<g2c2>C</g2c2>
							<inty>1</inty>
						</g1c0>
						<g1c0>
							<g2c0>D</g2c0>
							<g2c1>E</g2c1>
							<g2c2>F</g2c2>
							<inty>2</inty>
						</g1c0>
						<g1c0>
							<g2c0>G</g2c0>
							<g2c1>H</g2c1>
							<g2c2>I</g2c2>
							<inty>3</inty>
						</g1c0>
					</g0c0>
					<g0c0>
						<g1c0>
							<g2c0>A</g2c0>
							<g2c1>B</g2c1>
							<g2c2>C</g2c2>
							<stringy>u</stringy>
						</g1c0>
						<g1c0>
							<g2c0>D</g2c0>
							<g2c1>E</g2c1>
							<g2c2>F</g2c2>
							<stringy>v</stringy>
						</g1c0>
						<g1c0>
							<g2c0>G</g2c0>
							<g2c1>H</g2c1>
							<g2c2>I</g2c2>
							<stringy>w</stringy>
						</g1c0>
					</g0c0>
				</root>
			</tdml:dfdlInfoset>
		</tdml:infoset>

  </tdml:parserTestCase>

  <tdml:defineSchema name="noDefault">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />

    <xs:element name="emptySeq" type="ex:complexEmptySeq" dfdl:lengthKind="implicit"/>
    
    <xs:complexType name="complexEmptySeq">
      <xs:sequence/>
    </xs:complexType>
  </tdml:defineSchema>

  <!--
    Test name: noDefaultSeqKind
       Schema: emptySDEschema
      Purpose: This test demonstrates that DFDL allows complexTypes with empty content (not to be confused with NO content)
  -->
  
  <tdml:parserTestCase name="noDefaultSeqKind" root="emptySeq"
    model="noDefault" description="Section 14 - DFDL-14-007R.">
    <tdml:document>
      <tdml:documentPart type="text"></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:emptySeq/>
      </tdml:dfdlInfoset>
    </tdml:infoset>

  </tdml:parserTestCase>

  <tdml:parserTestCase name="sequenceWithComplexType" root="e1"
	model="sequenceWithComplexType.dfdl.xsd" description="">

    <tdml:document>-;test;test2/</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <e1>
          <e2>
            <String1>test</String1>
          </e2>
          <e2>
            <String1>test2</String1>
          </e2>
        </e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:defineSchema name="hiddenGroupSeqWithRequiredElements">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />

    <xs:group name="hg">
      <xs:sequence>
        <xs:element name="inty" type="xs:int" dfdl:lengthKind="delimited" />
      </xs:sequence>
    </xs:group>

    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>

  <!--
    Test name: hiddenGroupSeqWithRequiredElements
       Schema: hiddenGroupSeqWithRequiredElements
      Purpose: This test demonstrates that an SDE is thrown if any elements in a hidden sequence are required
  -->

  <tdml:parserTestCase name="hiddenGroupSeqWithRequiredElements" root="e"
    model="hiddenGroupSeqWithRequiredElements" description="Section 14 - Hidden Groups - DFDL-14-042R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[145,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>hidden group</tdml:error>
      <tdml:error>outputValueCalc</tdml:error>
      <tdml:error>inty</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:defineSchema name="hiddenGroupChoiceWithAllRequiredBranches">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />

    <xs:group name="hg">
      <xs:choice>
        <xs:element name="inty" type="xs:int" dfdl:lengthKind="delimited" />
        <xs:element name="stringy" type="xs:string" dfdl:lengthKind="delimited" />
      </xs:choice>
    </xs:group>

    <xs:element name="e" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:sequence dfdl:hiddenGroupRef="ex:hg" />
          <xs:element name="g" type="xs:int" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>

  <!--
    Test name: hiddenGroupChoiceWithAllRequiredBranches
       Schema: hiddenGroupChoiceWithAllRequiredBranches
      Purpose: This test demonstrates that an SDE is thrown if all branches in a hidden choie are required
  -->

  <tdml:parserTestCase name="hiddenGroupChoiceWithAllRequiredBranches" root="e"
    model="hiddenGroupChoiceWithAllRequiredBranches" description="Section 14 - Hidden Groups - DFDL-14-042R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[145,2]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>choice</tdml:error>
      <tdml:error>hidden group</tdml:error>
      <tdml:error>outputValueCalc</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>


  <tdml:defineSchema name="groupsWithAnnotations">
    <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>
    <dfdl:format ref="ex:GeneralFormat" lengthKind="delimited" />

    <xs:group name="sequenceGroup">
      <xs:annotation><xs:documentation>doc</xs:documentation></xs:annotation>
      <!-- COMMENT -->
      <xs:sequence>
        <xs:element name="inty" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="2" />
        <xs:element name="stringy" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="2" />
      </xs:sequence>
    </xs:group>

    <xs:element name="e1" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:group ref="ex:sequenceGroup" />
      </xs:complexType>
    </xs:element>

    <xs:group name="choiceGroup">
      <xs:annotation><xs:documentation>doc</xs:documentation></xs:annotation>
      <!-- COMMENT -->
      <xs:choice>
        <xs:element name="inty" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="2" />
        <xs:element name="stringy" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="2" />
      </xs:choice>
    </xs:group>

    <xs:element name="e2" dfdl:lengthKind="delimited">
      <xs:complexType>
        <xs:group ref="ex:choiceGroup" />
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>


  <tdml:parserTestCase name="sequence_group_with_annotation_01" root="e1"
    model="groupsWithAnnotations" description="Section 14 - Groups - DFDL-14-042R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[10st]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e1>
          <inty>10</inty>
          <stringy>st</stringy>
        </e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="choice_group_with_annotation_01" root="e2"
    model="groupsWithAnnotations" description="Section 14 - Groups - DFDL-14-042R">
    <tdml:document>
      <tdml:documentPart type="text"><![CDATA[st]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e2>
          <stringy>st</stringy>
        </e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

</tdml:testSuite>
